<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心如止水</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-04T11:20:14.901Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gerogegao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Matplotlib的Seaborn风格可视化</title>
    <link href="http://yoursite.com/2019/10/04/Matplotlib%E7%9A%84Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2019/10/04/Matplotlib的Seaborn风格可视化/</id>
    <published>2019-10-04T11:04:57.000Z</published>
    <updated>2019-10-04T11:20:14.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Seaborn风格可视化"><a href="#1-Seaborn风格可视化" class="headerlink" title="1.Seaborn风格可视化"></a>1.Seaborn风格可视化</h1><h2 id="1-1-什么事seaborn"><a href="#1-1-什么事seaborn" class="headerlink" title="1.1 什么事seaborn"></a>1.1 什么事seaborn</h2><p>​       Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。</p><a id="more"></a><h2 id="1-2-seaborn-API"><a href="#1-2-seaborn-API" class="headerlink" title="1.2 seaborn API"></a>1.2 seaborn API</h2><p>Seaborn 要求原始数据的输入类型为 pandas 的 Dataframe 或 Numpy 数组，画图函数有以下几种形式:</p><ul><li>sns.图名(x=’X轴 列名’, y=’Y轴 列名’, data=原始数据df对象)</li><li>sns.图名(x=’X轴 列名’, y=’Y轴 列名’, hue=’分组绘图参数’, data=原始数据df对象)</li><li>sns.图名(x=np.array, y=np.array[, …])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h1 id="2-基本绘图设置"><a href="#2-基本绘图设置" class="headerlink" title="2. 基本绘图设置"></a>2. 基本绘图设置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建正弦函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sinplot</span><span class="params">(flip=<span class="number">1</span>)</span>:</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">14</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">        plt.plot(x, np.sin(x+i*<span class="number">.5</span>)*(<span class="number">7</span>-i)*flip)</span><br><span class="line"></span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_3_0.png" alt></p><h2 id="2-1-简单切换成Seaborn风格"><a href="#2-1-简单切换成Seaborn风格" class="headerlink" title="2.1 简单切换成Seaborn风格"></a>2.1 简单切换成Seaborn风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换Seaborn风格</span></span><br><span class="line">sns.set()</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_5_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换seaborn图标风格</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), facecolor=<span class="string">'white'</span>)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">sns.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line">data = np.random.normal(size=(<span class="number">20</span>,<span class="number">6</span>))+np.arange(<span class="number">6</span>)/<span class="number">2</span></span><br><span class="line">sns.boxplot(data=data)</span><br><span class="line">plt.title(<span class="string">'style-whitegrid'</span>)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line">sns.set_style(<span class="string">'dark'</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_6_0.png" alt="png"></p><h2 id="2-3-设置图标坐标轴"><a href="#2-3-设置图标坐标轴" class="headerlink" title="2.3 设置图标坐标轴"></a>2.3 设置图标坐标轴</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#despine()</span></span><br><span class="line"><span class="comment"># seaborn.despine(fig=None, ax=None, top=True, right=True, left=False, bottom=False, offset=None, trim=False)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line">sns.set_style(<span class="string">"ticks"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>,<span class="number">9</span>))</span><br><span class="line">plt.subplots_adjust(hspace=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)  </span><br><span class="line">sinplot()</span><br><span class="line"><span class="comment"># 删除了上、右坐标轴</span></span><br><span class="line">sns.despine()</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">sns.violinplot(data=data)</span><br><span class="line"><span class="comment"># offset：与坐标轴之间的偏移</span></span><br><span class="line"><span class="comment"># trim：为True时，将坐标轴限制在数据最大最小值</span></span><br><span class="line"><span class="comment">#sns.despine(offset=10, trim=True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax3 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># top, right, left, bottom：布尔型，为True时不显示</span></span><br><span class="line"><span class="comment">#sns.despine(left=True, right = False)</span></span><br><span class="line">sns.boxplot(data=data, palette=<span class="string">"deep"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b20e4f7a58&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_8_1.png" alt="png"></p><h2 id="2-4-设置局部图标风格"><a href="#2-4-设置局部图标风格" class="headerlink" title="2.4 设置局部图标风格"></a>2.4 设置局部图标风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">"darkgrid"</span>):</span><br><span class="line">    plt.subplot(<span class="number">211</span>)</span><br><span class="line">    sinplot()</span><br><span class="line"><span class="comment"># 设置局部图表风格，用with做代码块区分</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br><span class="line"><span class="comment"># 外部表格风格</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_10_0.png" alt="png"></p><h2 id="2-5-设置显示比例"><a href="#2-5-设置显示比例" class="headerlink" title="2.5 设置显示比例"></a>2.5 设置显示比例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set_context()</span></span><br><span class="line"><span class="comment"># 选择包括：'paper', 'notebook', 'talk', 'poster'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 与上面的cell比较你就会发现不同</span></span><br><span class="line">    </span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br><span class="line">sns.set_context(<span class="string">"poster"</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_12_0.png" alt="png"></p><h2 id="2-6-调色板"><a href="#2-6-调色板" class="headerlink" title="2.6 调色板"></a>2.6 调色板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># color_palette()</span></span><br><span class="line"><span class="comment"># 默认6种颜色：deep, muted, pastel, bright, dark, colorblind</span></span><br><span class="line"><span class="comment"># seaborn.color_palette(palette=None, n_colors=None, desat=None)</span></span><br><span class="line">current_palette = sns.color_palette()</span><br><span class="line">print(type(current_palette))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sns.palplot(current_palette[2:4])</span></span><br><span class="line">sns.palplot(current_palette)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;seaborn.palettes._ColorPalette&apos;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_14_1.png" alt="png"></p><h2 id="2-7-颜色风格"><a href="#2-7-颜色风格" class="headerlink" title="2.7 颜色风格"></a>2.7 颜色风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 颜色风格内容：Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, </span></span><br><span class="line"><span class="comment"># BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, </span></span><br><span class="line"><span class="comment"># Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples,</span></span><br><span class="line"><span class="comment"># Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, </span></span><br><span class="line"><span class="comment"># Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, </span></span><br><span class="line"><span class="comment"># autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, </span></span><br><span class="line"><span class="comment"># cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, </span></span><br><span class="line"><span class="comment"># gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, </span></span><br><span class="line"><span class="comment"># hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, </span></span><br><span class="line"><span class="comment"># pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spectral, spectral_r, spring, </span></span><br><span class="line"><span class="comment"># spring_r, summer, summer_r, terrain, terrain_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r</span></span><br><span class="line"></span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">'Accent'</span>,<span class="number">12</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">'Accent_r'</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_16_0.png" alt="png"></p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_16_1.png" alt="png"></p><h2 id="2-8-设置饱和度和亮度"><a href="#2-8-设置饱和度和亮度" class="headerlink" title="2.8 设置饱和度和亮度"></a>2.8 设置饱和度和亮度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.hls_palette(<span class="number">4</span>,l=<span class="number">.3</span>,s=<span class="number">.8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># l-&gt;亮度</span></span><br><span class="line"><span class="comment"># s-&gt;饱和度</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_18_0.png" alt="png"></p><h2 id="2-9-设置颜色线性变化"><a href="#2-9-设置颜色线性变化" class="headerlink" title="2.9 设置颜色线性变化"></a>2.9 设置颜色线性变化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置颜色线性变化</span></span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>, gamma=<span class="number">2</span>))</span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>, start=<span class="number">.5</span>, rot=<span class="number">.75</span>))</span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>,start=<span class="number">0.5</span>, rot=<span class="number">0</span>, dark=<span class="number">0.95</span>, reverse=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># n_colors → 颜色个数</span></span><br><span class="line"><span class="comment"># start → 值区间在0-3，开始颜色</span></span><br><span class="line"><span class="comment"># rot → 颜色旋转角度</span></span><br><span class="line"><span class="comment"># gamma → 颜色伽马值，越大颜色越暗</span></span><br><span class="line"><span class="comment"># dark，light → 值区间0-1，颜色深浅</span></span><br><span class="line"><span class="comment"># reverse → 布尔值，默认为False，由浅到深</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_20_0.png" alt="png"></p><p><img src="F:/MyBlog/source/_posts/season风格可视化/output_20_1.png" alt="png"></p><p><img src="F:/MyBlog/source/_posts/season风格可视化/output_20_2.png" alt="png"></p><h2 id="2-10-创建分散颜色"><a href="#2-10-创建分散颜色" class="headerlink" title="2.10 创建分散颜色"></a>2.10 创建分散颜色</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">x = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 创建分散颜色</span></span><br><span class="line">cmap = sns.diverging_palette(<span class="number">200</span>, <span class="number">20</span>, sep=<span class="number">20</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sns.heatmap(x, cmap=cmap)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21a370cf8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_22_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line">fig=plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line"><span class="keyword">with</span> sns.color_palette(<span class="string">'PuBuGn_d'</span>):</span><br><span class="line">    plt.subplot(<span class="number">211</span>)</span><br><span class="line">    sinplot()</span><br><span class="line">    </span><br><span class="line">sns.set_palette(<span class="string">'husl'</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_23_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'darkgrid'</span>)</span><br><span class="line">sns.set_context(<span class="string">'paper'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"><span class="comment">#不再发出警告</span></span><br></pre></td></tr></table></figure><h1 id="3-分布数据可视化"><a href="#3-分布数据可视化" class="headerlink" title="3. 分布数据可视化"></a>3. 分布数据可视化</h1><h2 id="3-1-直方图"><a href="#3-1-直方图" class="headerlink" title="3.1 直方图"></a>3.1 直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直方图</span></span><br><span class="line"><span class="comment">#设计随即种子</span></span><br><span class="line">rs = np.random.RandomState(<span class="number">10</span>)</span><br><span class="line">s = pd.Series(rs.randn(<span class="number">100</span>)*<span class="number">100</span>)</span><br><span class="line">sns.distplot(s, bins=<span class="number">10</span>, hist=<span class="literal">True</span>, kde=<span class="literal">False</span>, norm_hist=<span class="literal">False</span>,</span><br><span class="line">            rug=<span class="literal">True</span>,vertical=<span class="literal">False</span>,color=<span class="string">'y'</span>, label=<span class="string">'distplot'</span>, axlabel=<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment"># bins → 箱数</span></span><br><span class="line"><span class="comment"># hist、ked → 是否显示箱/密度曲线</span></span><br><span class="line"><span class="comment"># norm_hist → 直方图是否按照密度来显示</span></span><br><span class="line"><span class="comment"># rug → 是否显示数据分布情况</span></span><br><span class="line"><span class="comment"># vertical → 是否水平显示</span></span><br><span class="line"><span class="comment"># color → 设置颜色</span></span><br><span class="line"><span class="comment"># label → 图例</span></span><br><span class="line"><span class="comment"># axlabel → x轴标注</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.legend.Legend at 0x1b20e65e4e0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_26_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(s, rug=<span class="literal">True</span>, rug_kws=&#123;<span class="string">'color'</span>:<span class="string">'g'</span>&#125;,</span><br><span class="line">            kde_kws=&#123;<span class="string">"color"</span>: <span class="string">"k"</span>, <span class="string">"lw"</span>: <span class="number">1</span>, <span class="string">"label"</span>: <span class="string">"KDE"</span>,<span class="string">'linestyle'</span>:<span class="string">'--'</span>&#125;,   </span><br><span class="line">            <span class="comment"># 设置密度曲线颜色，线宽，标注、线形</span></span><br><span class="line">            hist_kws=&#123;<span class="string">"histtype"</span>: <span class="string">"step"</span>, <span class="string">"linewidth"</span>: <span class="number">1</span>,<span class="string">"alpha"</span>: <span class="number">1</span>, <span class="string">"color"</span>: <span class="string">"g"</span>&#125;)  </span><br><span class="line">            <span class="comment"># 设置箱子的风格、线宽、透明度、颜色</span></span><br><span class="line">            <span class="comment"># 风格包括：'bar', 'barstacked', 'step', 'stepfilled'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21bc8e828&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_27_1.png" alt="png"></p><h2 id="3-2-密度图"><a href="#3-2-密度图" class="headerlink" title="3.2 密度图"></a>3.2 密度图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 单个样本数据密度分布图</span></span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,</span><br><span class="line">           shade = <span class="literal">False</span>,  <span class="comment"># 是否填充</span></span><br><span class="line">           color = <span class="string">'b'</span>,   <span class="comment"># 设置颜色</span></span><br><span class="line">           vertical = <span class="literal">False</span>  <span class="comment"># 设置是否水平</span></span><br><span class="line">           )</span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,bw=<span class="number">5</span>, label=<span class="string">"bw: 0.2"</span>,</span><br><span class="line">            linestyle = <span class="string">'-'</span>,linewidth = <span class="number">1.2</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,bw=<span class="number">20</span>, label=<span class="string">"bw: 2"</span>,</span><br><span class="line">            linestyle = <span class="string">'-'</span>,linewidth = <span class="number">1.2</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># bw → 控制拟合的程度，类似直方图的箱数</span></span><br><span class="line"></span><br><span class="line">sns.rugplot(s,height = <span class="number">0.1</span>,color = <span class="string">'k'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 数据频率分布图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21babf470&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_29_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 两个样本数据密度分布图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">2</span>)  <span class="comment"># 设定随机数种子</span></span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">100</span>,<span class="number">2</span>),</span><br><span class="line">                 columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">sns.kdeplot(df[<span class="string">'A'</span>],df[<span class="string">'B'</span>],</span><br><span class="line">           cbar = <span class="literal">True</span>,    <span class="comment"># 是否显示颜色图例</span></span><br><span class="line">           shade = <span class="literal">True</span>,   <span class="comment"># 是否填充</span></span><br><span class="line">           cmap = <span class="string">'Reds'</span>,  <span class="comment"># 设置调色盘</span></span><br><span class="line">           shade_lowest=<span class="literal">False</span>,  <span class="comment"># 最外围颜色是否显示</span></span><br><span class="line">           n_levels = <span class="number">10</span>   <span class="comment"># 曲线个数（如果非常多，则会越平滑）</span></span><br><span class="line">           )</span><br><span class="line"><span class="comment"># 两个维度数据生成曲线密度图，以颜色作为密度衰减显示</span></span><br><span class="line"></span><br><span class="line">sns.rugplot(df[<span class="string">'A'</span>], color=<span class="string">"g"</span>, axis=<span class="string">'x'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line">sns.rugplot(df[<span class="string">'B'</span>], color=<span class="string">"r"</span>, axis=<span class="string">'y'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 注意设置x，y轴</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21bb63470&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_30_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 两个样本数据密度分布图</span></span><br><span class="line"><span class="comment"># 多个密度图</span></span><br><span class="line"></span><br><span class="line">rs1 = np.random.RandomState(<span class="number">2</span>)  </span><br><span class="line">rs2 = np.random.RandomState(<span class="number">5</span>)  </span><br><span class="line">df1 = pd.DataFrame(rs1.randn(<span class="number">100</span>,<span class="number">2</span>)+<span class="number">2</span>,columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">df2 = pd.DataFrame(rs2.randn(<span class="number">100</span>,<span class="number">2</span>)<span class="number">-2</span>,columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">sns.kdeplot(df1[<span class="string">'A'</span>],df1[<span class="string">'B'</span>],cmap = <span class="string">'Greens'</span>,</span><br><span class="line">            shade = <span class="literal">True</span>,shade_lowest=<span class="literal">False</span>)</span><br><span class="line">sns.kdeplot(df2[<span class="string">'A'</span>],df2[<span class="string">'B'</span>],cmap = <span class="string">'Blues'</span>,</span><br><span class="line">            shade = <span class="literal">True</span>,shade_lowest=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line"><span class="comment">#sns.rugplot(df2['A']+df1['A'], color="g", axis='x',alpha = 0.5)</span></span><br><span class="line"><span class="comment">#sns.rugplot(df2['B']+df1['B'], color="r", axis='y',alpha = 0.5)</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21be56278&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_31_1.png" alt="png"></p><h2 id="3-3-综合散点图"><a href="#3-3-综合散点图" class="headerlink" title="3.3 综合散点图"></a>3.3 综合散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">2</span>)  </span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">200</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],  <span class="comment"># 设置xy轴，显示columns名称</span></span><br><span class="line">              data=df,   <span class="comment"># 设置数据</span></span><br><span class="line">              color = <span class="string">'k'</span>,   <span class="comment"># 设置颜色</span></span><br><span class="line">              s = <span class="number">50</span>, edgecolor=<span class="string">"w"</span>,linewidth=<span class="number">1</span>,  <span class="comment"># 设置散点大小、边缘线颜色及宽度(只针对scatter）</span></span><br><span class="line">              kind = <span class="string">'scatter'</span>,   <span class="comment"># 设置类型：“scatter”、“reg”、“resid”、“kde”、“hex”</span></span><br><span class="line">              space = <span class="number">0.2</span>,  <span class="comment"># 设置散点图和布局图的间距</span></span><br><span class="line">              size = <span class="number">8</span>,   <span class="comment"># 图表大小（自动调整为正方形）</span></span><br><span class="line">              ratio = <span class="number">5</span>,  <span class="comment"># 散点图与布局图高度比，整型</span></span><br><span class="line">              marginal_kws=dict(bins=<span class="number">15</span>, rug=<span class="literal">True</span>)  <span class="comment"># 设置柱状图箱数，是否设置rug</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21bee2be0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_33_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"><span class="comment"># 六边形图</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">500</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">"white"</span>):</span><br><span class="line">    sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],data = df, kind=<span class="string">"hex"</span>, color=<span class="string">"g"</span>,</span><br><span class="line">                 marginal_kws=dict(bins=<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_34_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"><span class="comment"># 密度图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">15</span>)</span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">300</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">g = sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],data = df,</span><br><span class="line">                  kind=<span class="string">"kde"</span>, color=<span class="string">"k"</span>,</span><br><span class="line">                  shade_lowest=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 创建密度图</span></span><br><span class="line"></span><br><span class="line">g.plot_joint(plt.scatter,c=<span class="string">"w"</span>, s=<span class="number">30</span>, linewidth=<span class="number">1</span>, marker=<span class="string">"*"</span>)</span><br><span class="line"><span class="comment"># 添加散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21c4325f8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_35_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + ax_marg_x.hist() + ax_marg_y.hist()</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g.plot_joint(plt.scatter, color =<span class="string">'m'</span>, edgecolor = <span class="string">'white'</span>)  <span class="comment"># 设置框内图表，scatter</span></span><br><span class="line">g.ax_marg_x.hist(tips[<span class="string">"total_bill"</span>], color=<span class="string">"b"</span>, alpha=<span class="number">.6</span>,</span><br><span class="line">                 bins=np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">3</span>))            <span class="comment"># 设置x轴直方图，注意bins是数组</span></span><br><span class="line">g.ax_marg_y.hist(tips[<span class="string">"tip"</span>], color=<span class="string">"r"</span>, alpha=<span class="number">.6</span>,</span><br><span class="line">                 orientation=<span class="string">"horizontal"</span>,</span><br><span class="line">                 bins=np.arange(<span class="number">0</span>, <span class="number">12</span>, <span class="number">1</span>))            <span class="comment"># 设置x轴直方图，注意需要orientation参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">g.annotate(stats.pearsonr)    </span><br><span class="line"><span class="comment"># 设置标注，可以为pearsonr，spearmanr</span></span><br><span class="line"></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line">0       16.99  1.01  Female     No  Sun  Dinner     2</span><br><span class="line">1       10.34  1.66    Male     No  Sun  Dinner     3</span><br><span class="line">2       21.01  3.50    Male     No  Sun  Dinner     3</span><br><span class="line">3       23.68  3.31    Male     No  Sun  Dinner     2</span><br><span class="line">4       24.59  3.61  Female     No  Sun  Dinner     4</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_36_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + plot_marginals()</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g = g.plot_joint(plt.scatter,color=<span class="string">"g"</span>, s=<span class="number">40</span>, edgecolor=<span class="string">"white"</span>)   <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">g.plot_marginals(sns.distplot, kde=<span class="literal">True</span>, color=<span class="string">"g"</span>)                <span class="comment"># 绘制x，y轴直方图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21c630da0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_37_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + plot_marginals()</span></span><br><span class="line"><span class="comment"># kde - 密度图</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g = g.plot_joint(sns.kdeplot,cmap = <span class="string">'Reds_r'</span>)             <span class="comment"># 绘制密度图</span></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">g.plot_marginals(sns.kdeplot, shade = <span class="literal">True</span>, color=<span class="string">"r"</span>)  <span class="comment"># 绘制x，y轴密度图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21d7aef60&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_38_1.png" alt="png"></p><h2 id="3-4-矩阵散点图"><a href="#3-4-矩阵散点图" class="headerlink" title="3.4 矩阵散点图"></a>3.4 矩阵散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">"iris"</span>)</span><br><span class="line">print(iris.head())</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris,</span><br><span class="line">            kind = <span class="string">'scatter'</span>,  <span class="comment"># 散点图/回归分布图 &#123;‘scatter’, ‘reg’&#125;  </span></span><br><span class="line">            diag_kind=<span class="string">"hist"</span>,  <span class="comment"># 直方图/密度图 &#123;‘hist’, ‘kde’&#125;</span></span><br><span class="line">            hue=<span class="string">"species"</span>,   <span class="comment"># 按照某一字段进行分类</span></span><br><span class="line">            palette=<span class="string">"husl"</span>,  <span class="comment"># 设置调色板</span></span><br><span class="line">            markers=[<span class="string">"o"</span>, <span class="string">"s"</span>, <span class="string">"D"</span>],  <span class="comment"># 设置不同系列的点样式（这里根据参考分类个数）</span></span><br><span class="line">            size = <span class="number">2</span>,   <span class="comment"># 图表大小</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   sepal_length  sepal_width  petal_length  petal_width species</span><br><span class="line">0           5.1          3.5           1.4          0.2  setosa</span><br><span class="line">1           4.9          3.0           1.4          0.2  setosa</span><br><span class="line">2           4.7          3.2           1.3          0.2  setosa</span><br><span class="line">3           4.6          3.1           1.5          0.2  setosa</span><br><span class="line">4           5.0          3.6           1.4          0.2  setosa</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21d8a44e0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_40_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"><span class="comment"># 只提取局部变量进行对比</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris,vars=[<span class="string">"sepal_width"</span>, <span class="string">"sepal_length"</span>],</span><br><span class="line">             kind = <span class="string">'reg'</span>, diag_kind=<span class="string">"kde"</span>, </span><br><span class="line">             hue=<span class="string">"species"</span>, palette=<span class="string">"husl"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21e003c18&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_41_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"><span class="comment"># 其他参数设置</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris, diag_kind=<span class="string">"kde"</span>, markers=<span class="string">"+"</span>,</span><br><span class="line">             plot_kws=dict(s=<span class="number">50</span>, edgecolor=<span class="string">"b"</span>, linewidth=<span class="number">1</span>),</span><br><span class="line">             <span class="comment"># 设置点样式</span></span><br><span class="line">             diag_kws=dict(shade=<span class="literal">True</span>)</span><br><span class="line">             <span class="comment"># 设置密度图样式</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21c37be48&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_42_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  矩阵散点图 - PairGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># map_diag() + map_offdiag()</span></span><br><span class="line"></span><br><span class="line">g = sns.PairGrid(iris,hue=<span class="string">"species"</span>,palette = <span class="string">'hls'</span>,</span><br><span class="line">                vars = [<span class="string">'sepal_length'</span>,<span class="string">'sepal_width'</span>,<span class="string">'petal_length'</span>,<span class="string">'petal_width'</span>],  <span class="comment"># 可筛选</span></span><br><span class="line">                )</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据，按照species分类</span></span><br><span class="line"></span><br><span class="line">g.map_diag(plt.hist, </span><br><span class="line">           histtype = <span class="string">'barstacked'</span>,   <span class="comment"># 可选：'bar', 'barstacked', 'step', 'stepfilled'</span></span><br><span class="line">           linewidth = <span class="number">1</span>, edgecolor = <span class="string">'w'</span>)           </span><br><span class="line"><span class="comment"># 对角线图表，plt.hist/sns.kdeplot</span></span><br><span class="line"></span><br><span class="line">g.map_offdiag(plt.scatter,</span><br><span class="line">              edgecolor=<span class="string">"w"</span>, s=<span class="number">40</span>,linewidth = <span class="number">1</span>,   <span class="comment"># 设置点颜色、大小、描边宽度</span></span><br><span class="line">             )     </span><br><span class="line"><span class="comment"># 其他图表，plt.scatter/plt.bar...</span></span><br><span class="line"></span><br><span class="line">g.add_legend()</span><br><span class="line"><span class="comment"># 添加图例</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b218fe3f98&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_43_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - PairGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># map_diag() + map_lower() + map_upper()</span></span><br><span class="line"></span><br><span class="line">g = sns.PairGrid(iris)</span><br><span class="line">g.map_diag(sns.kdeplot, lw=<span class="number">3</span>)   <span class="comment"># 设置对角线图表</span></span><br><span class="line">g.map_upper(plt.scatter, color = <span class="string">'r'</span>)     <span class="comment"># 设置对角线上端图表</span></span><br><span class="line">g.map_lower(sns.kdeplot, cmap=<span class="string">"Blues_d"</span>)      <span class="comment"># 设置对角线下端图表</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21ee966a0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_44_1.png" alt="png"></p><h1 id="4-分类数据可视化"><a href="#4-分类数据可视化" class="headerlink" title="4. 分类数据可视化"></a>4. 分类数据可视化</h1><h2 id="4-1-分类散点图"><a href="#4-1-分类散点图" class="headerlink" title="4.1 分类散点图"></a>4.1 分类散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 按照不同类别对样本数据进行分布散点图绘制</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"day"</span>,          <span class="comment"># x → 设置分组统计字段</span></span><br><span class="line">              y=<span class="string">"total_bill"</span>,   <span class="comment"># y → 数据分布统计字段</span></span><br><span class="line">              <span class="comment"># 这里xy数据对调，将会使得散点图横向分布</span></span><br><span class="line">              data=tips,        <span class="comment"># data → 对应数据</span></span><br><span class="line">              jitter = <span class="literal">True</span>,    <span class="comment"># jitter → 当点数据重合较多时，用该参数做一些调整，也可以设置间距如：jitter = 0.1</span></span><br><span class="line">              size = <span class="number">5</span>, edgecolor = <span class="string">'w'</span>,linewidth=<span class="number">1</span>,marker = <span class="string">'o'</span>  <span class="comment"># 设置点的大小、描边颜色或宽度、点样式</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line">0       16.99  1.01  Female     No  Sun  Dinner     2</span><br><span class="line">1       10.34  1.66    Male     No  Sun  Dinner     3</span><br><span class="line">2       21.01  3.50    Male     No  Sun  Dinner     3</span><br><span class="line">3       23.68  3.31    Male     No  Sun  Dinner     2</span><br><span class="line">4       24.59  3.61  Female     No  Sun  Dinner     4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21f971320&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_46_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>,</span><br><span class="line">              data=tips, jitter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21f9b2b00&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_47_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 设置调色盘</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>,</span><br><span class="line">              data=tips, jitter=<span class="literal">True</span>,</span><br><span class="line">              palette=<span class="string">"Set2"</span>,  <span class="comment"># 设置调色盘</span></span><br><span class="line">              dodge=<span class="literal">True</span>,  <span class="comment"># 是否拆分</span></span><br><span class="line">             )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fc11198&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_48_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 筛选分类类别</span></span><br><span class="line"></span><br><span class="line">print(tips[<span class="string">'day'</span>].value_counts())</span><br><span class="line"><span class="comment"># 查看day字段的唯一值</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,jitter = <span class="literal">True</span>, </span><br><span class="line">              order = [<span class="string">'Sat'</span>,<span class="string">'Sun'</span>])</span><br><span class="line"><span class="comment"># order → 筛选类别</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sat     87</span><br><span class="line">Sun     76</span><br><span class="line">Thur    62</span><br><span class="line">Fri     19</span><br><span class="line">Name: day, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fc8c748&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_49_2.png" alt="png"></p><h2 id="4-2-分簇散点图"><a href="#4-2-分簇散点图" class="headerlink" title="4.2 分簇散点图"></a>4.2 分簇散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swarmplot()</span></span><br><span class="line"><span class="comment"># 分簇散点图</span></span><br><span class="line"></span><br><span class="line">sns.swarmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"day"</span>, data=tips,</span><br><span class="line">              size = <span class="number">5</span>, edgecolor = <span class="string">'w'</span>,linewidth=<span class="number">1</span>,marker = <span class="string">'o'</span>,</span><br><span class="line">              palette = <span class="string">'Reds'</span>)</span><br><span class="line"><span class="comment"># 用法和stripplot类似</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fcdef28&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_51_1.png" alt="png"></p><h2 id="4-3-箱型图"><a href="#4-3-箱型图" class="headerlink" title="4.3 箱型图"></a>4.3 箱型图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boxplot()</span></span><br><span class="line"></span><br><span class="line">sns.boxplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            linewidth = <span class="number">2</span>,   <span class="comment"># 线宽</span></span><br><span class="line">            width = <span class="number">0.8</span>,     <span class="comment"># 箱之间的间隔比例</span></span><br><span class="line">            fliersize = <span class="number">3</span>,   <span class="comment"># 异常点大小</span></span><br><span class="line">            palette = <span class="string">'hls'</span>, <span class="comment"># 设置调色板</span></span><br><span class="line">            whis = <span class="number">1.5</span>,      <span class="comment"># 设置IQR </span></span><br><span class="line">            notch = <span class="literal">True</span>,    <span class="comment"># 设置是否以中值做凹槽</span></span><br><span class="line">            order = [<span class="string">'Thur'</span>,<span class="string">'Fri'</span>,<span class="string">'Sat'</span>,<span class="string">'Sun'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">           )</span><br><span class="line"><span class="comment"># 绘制箱型图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sns.swarmplot(x="day", y="total_bill", data=tips,color ='k',size = 3,alpha = 0.8)</span></span><br><span class="line"><span class="comment"># 可以添加散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fd32710&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_53_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line">sns.boxplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            hue = <span class="string">'smoker'</span>, palette = <span class="string">'Reds'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fdce5c0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_54_1.png" alt="png"></p><h1 id="4-4-小提琴图"><a href="#4-4-小提琴图" class="headerlink" title="4.4 小提琴图"></a>4.4 小提琴图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># violinplot()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            linewidth = <span class="number">2</span>,   <span class="comment"># 线宽</span></span><br><span class="line">            width = <span class="number">0.8</span>,     <span class="comment"># 箱之间的间隔比例</span></span><br><span class="line">            palette = <span class="string">'hls'</span>, <span class="comment"># 设置调色板</span></span><br><span class="line">            order = [<span class="string">'Thur'</span>,<span class="string">'Fri'</span>,<span class="string">'Sat'</span>,<span class="string">'Sun'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">            scale = <span class="string">'area'</span>,  <span class="comment"># 测度小提琴图的宽度：area-面积相同，count-按照样本数量决定宽度，width-宽度一样</span></span><br><span class="line">            gridsize = <span class="number">50</span>,   <span class="comment"># 设置小提琴图边线的平滑度，越高越平滑</span></span><br><span class="line">            inner = <span class="string">'box'</span>,   <span class="comment"># 设置内部显示类型 → “box”, “quartile”, “point”, “stick”, None</span></span><br><span class="line">            <span class="comment">#bw = 0.8        # 控制拟合程度，一般可以不设置</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21feb0d68&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_56_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">               hue = <span class="string">'smoker'</span>, palette=<span class="string">"muted"</span>, </span><br><span class="line">               split=<span class="literal">True</span>,  <span class="comment"># 设置是否拆分小提琴图</span></span><br><span class="line">               inner=<span class="string">"quartile"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21ff37940&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_57_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结合散点图</span></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette = <span class="string">'hls'</span>, inner = <span class="literal">None</span>)</span><br><span class="line">sns.swarmplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, color=<span class="string">"w"</span>, alpha=<span class="number">.5</span>)</span><br><span class="line"><span class="comment"># 插入散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fff0e80&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_58_1.png" alt="png"></p><h2 id="4-5-LV图"><a href="#4-5-LV图" class="headerlink" title="4.5 LV图"></a>4.5 LV图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  lvplot()</span></span><br><span class="line">sns.lvplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">"mako"</span>,</span><br><span class="line">           <span class="comment">#hue = 'smoker',</span></span><br><span class="line">           width = <span class="number">0.8</span>,           <span class="comment"># 箱之间间隔比例</span></span><br><span class="line">           linewidth = <span class="number">12</span>,</span><br><span class="line">           scale = <span class="string">'area'</span>,        <span class="comment"># 设置框的大小 → “linear”、“exonential”、“area”</span></span><br><span class="line">           k_depth = <span class="string">'proportion'</span>,  <span class="comment"># 设置框的数量 → “proportion”、“tukey”、“trustworthy”</span></span><br><span class="line">          )</span><br><span class="line"><span class="comment"># 绘制LV图</span></span><br><span class="line"></span><br><span class="line">sns.swarmplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,color =<span class="string">'k'</span>,size = <span class="number">3</span>,alpha = <span class="number">0.8</span>)</span><br><span class="line"><span class="comment"># 可以添加散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b22101c400&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_60_1.png" alt="png"></p><h1 id="4-6分类统计图"><a href="#4-6分类统计图" class="headerlink" title="4.6分类统计图"></a>4.6分类统计图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"><span class="comment"># 置信区间：样本均值 + 抽样误差</span></span><br><span class="line"></span><br><span class="line">titanic = sns.load_dataset(<span class="string">"titanic"</span>)</span><br><span class="line"><span class="comment">#print(titanic.head())</span></span><br><span class="line"><span class="comment">#print('-----')</span></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">sns.barplot(x=<span class="string">"sex"</span>, y=<span class="string">"survived"</span>, hue=<span class="string">"class"</span>, data=titanic,</span><br><span class="line">            palette = <span class="string">'hls'</span>, </span><br><span class="line">            order = [<span class="string">'male'</span>,<span class="string">'female'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">            capsize = <span class="number">0.05</span>,  <span class="comment"># 误差线横向延伸宽度</span></span><br><span class="line">            saturation=<span class="number">.8</span>,   <span class="comment"># 颜色饱和度</span></span><br><span class="line">            errcolor = <span class="string">'gray'</span>,errwidth = <span class="number">2</span>,  <span class="comment"># 误差线颜色，宽度</span></span><br><span class="line">            ci = <span class="string">'sd'</span>    <span class="comment"># 置信区间误差 → 0-100内值、'sd'、None</span></span><br><span class="line">            )</span><br><span class="line"><span class="comment">#print(titanic.groupby(['sex','class']).mean()['survived'])</span></span><br><span class="line"><span class="comment">#print(titanic.groupby(['sex','class']).std()['survived'])</span></span><br><span class="line"><span class="comment"># 计算数据</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b2210a1048&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_62_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">sns.barplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"sex"</span>, data=tips,</span><br><span class="line">            palette = <span class="string">'Blues'</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line">tips.groupby([<span class="string">'day'</span>,<span class="string">'sex'</span>]).mean()</span><br><span class="line"><span class="comment"># 计算数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>size</th>    </tr>    <tr>      <th>day</th>      <th>sex</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">Thur</th>      <th>Male</th>      <td>18.714667</td>      <td>2.980333</td>      <td>2.433333</td>    </tr>    <tr>      <th>Female</th>      <td>16.715312</td>      <td>2.575625</td>      <td>2.468750</td>    </tr>    <tr>      <th rowspan="2" valign="top">Fri</th>      <th>Male</th>      <td>19.857000</td>      <td>2.693000</td>      <td>2.100000</td>    </tr>    <tr>      <th>Female</th>      <td>14.145556</td>      <td>2.781111</td>      <td>2.111111</td>    </tr>    <tr>      <th rowspan="2" valign="top">Sat</th>      <th>Male</th>      <td>20.802542</td>      <td>3.083898</td>      <td>2.644068</td>    </tr>    <tr>      <th>Female</th>      <td>19.680357</td>      <td>2.801786</td>      <td>2.250000</td>    </tr>    <tr>      <th rowspan="2" valign="top">Sun</th>      <th>Male</th>      <td>21.887241</td>      <td>3.220345</td>      <td>2.810345</td>    </tr>    <tr>      <th>Female</th>      <td>19.872222</td>      <td>3.367222</td>      <td>2.944444</td>    </tr>  </tbody></table></div><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_63_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">crashes = sns.load_dataset(<span class="string">"car_crashes"</span>).sort_values(<span class="string">"total"</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">print(crashes.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">f, ax = plt.subplots(figsize=(<span class="number">6</span>, <span class="number">15</span>))</span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line"></span><br><span class="line">sns.set_color_codes(<span class="string">"pastel"</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"total"</span>, y=<span class="string">"abbrev"</span>, data=crashes,</span><br><span class="line">            label=<span class="string">"Total"</span>, color=<span class="string">"b"</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 设置第一个柱状图</span></span><br><span class="line"></span><br><span class="line">sns.set_color_codes(<span class="string">"muted"</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"alcohol"</span>, y=<span class="string">"abbrev"</span>, data=crashes,</span><br><span class="line">            label=<span class="string">"Alcohol-involved"</span>, color=<span class="string">"b"</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 设置第二个柱状图</span></span><br><span class="line"></span><br><span class="line">ax.legend(ncol=<span class="number">2</span>, loc=<span class="string">"lower right"</span>)</span><br><span class="line">sns.despine(left=<span class="literal">True</span>, bottom=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    total  speeding  alcohol  not_distracted  no_previous  ins_premium  \</span><br><span class="line">40   23.9     9.082    9.799          22.944       19.359       858.97   </span><br><span class="line">34   23.9     5.497   10.038          23.661       20.554       688.75   </span><br><span class="line">48   23.8     8.092    6.664          23.086       20.706       992.61   </span><br><span class="line">3    22.4     4.032    5.824          21.056       21.280       827.34   </span><br><span class="line">17   21.4     4.066    4.922          16.692       16.264       872.51   </span><br><span class="line"></span><br><span class="line">    ins_losses abbrev  </span><br><span class="line">40      116.29     SC  </span><br><span class="line">34      109.72     ND  </span><br><span class="line">48      152.56     WV  </span><br><span class="line">3       142.39     AR  </span><br><span class="line">17      137.13     KY</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_64_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  countplot()</span></span><br><span class="line"><span class="comment"># 计数柱状图</span></span><br><span class="line"></span><br><span class="line">sns.countplot(x=<span class="string">"class"</span>, hue=<span class="string">"who"</span>, data=titanic,palette = <span class="string">'magma'</span>)</span><br><span class="line"><span class="comment">#sns.countplot(y="class", hue="who", data=titanic,palette = 'magma')  </span></span><br><span class="line"><span class="comment"># x/y → 以x或者y轴绘图（横向，竖向）</span></span><br><span class="line"><span class="comment"># 用法和barplot相似</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b22117aac8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_65_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pointplot()</span></span><br><span class="line"><span class="comment"># 折线图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">sns.pointplot(x=<span class="string">"time"</span>, y=<span class="string">"total_bill"</span>, hue = <span class="string">'smoker'</span>,data=tips,</span><br><span class="line">              palette = <span class="string">'hls'</span>,</span><br><span class="line">              dodge = <span class="literal">True</span>,   <span class="comment"># 设置点是否分开</span></span><br><span class="line">              join = <span class="literal">True</span>,    <span class="comment"># 是否连线</span></span><br><span class="line">              markers=[<span class="string">"o"</span>, <span class="string">"x"</span>], linestyles=[<span class="string">"-"</span>, <span class="string">"--"</span>],  <span class="comment"># 设置点样式、线型</span></span><br><span class="line">              )</span><br><span class="line">tips.groupby([<span class="string">'time'</span>,<span class="string">'smoker'</span>]).mean()[<span class="string">'total_bill'</span>]</span><br><span class="line"><span class="comment"># 计算数据</span></span><br><span class="line"><span class="comment"># # 用法和barplot相似</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time    smoker</span><br><span class="line">Lunch   Yes       17.399130</span><br><span class="line">        No        17.050889</span><br><span class="line">Dinner  Yes       21.859429</span><br><span class="line">        No        20.095660</span><br><span class="line">Name: total_bill, dtype: float64</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_66_1.png" alt="png"></p><h1 id="5-线性数据可视化"><a href="#5-线性数据可视化" class="headerlink" title="5.线性数据可视化"></a>5.线性数据可视化</h1><h2 id="5-1基本使用"><a href="#5-1基本使用" class="headerlink" title="5.1基本使用"></a>5.1基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本用法</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, hue = <span class="string">'smoker'</span>,data=tips,palette=<span class="string">"Set1"</span>,</span><br><span class="line">           ci = <span class="number">70</span>,   <span class="comment"># 误差值</span></span><br><span class="line">           size = <span class="number">5</span>,  <span class="comment"># 图表大小</span></span><br><span class="line">           markers = [<span class="string">'+'</span>,<span class="string">'o'</span>],  <span class="comment"># 点样式</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line">0       16.99  1.01  Female     No  Sun  Dinner     2</span><br><span class="line">1       10.34  1.66    Male     No  Sun  Dinner     3</span><br><span class="line">2       21.01  3.50    Male     No  Sun  Dinner     3</span><br><span class="line">3       23.68  3.31    Male     No  Sun  Dinner     2</span><br><span class="line">4       24.59  3.61  Female     No  Sun  Dinner     4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b21c57d7b8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_68_2.png" alt="png"></p><h2 id="5-2-多表格"><a href="#5-2-多表格" class="headerlink" title="5.2 多表格"></a>5.2 多表格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, col=<span class="string">"smoker"</span>, data=tips)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b2215774e0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_70_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多图表1</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"size"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>, col=<span class="string">"day"</span>,data=tips, </span><br><span class="line">           aspect=<span class="number">0.6</span>,    <span class="comment"># 长宽比</span></span><br><span class="line">           x_jitter=<span class="number">.30</span>,  <span class="comment"># 给x或者y轴随机增加噪音点</span></span><br><span class="line">           col_wrap=<span class="number">4</span>,    <span class="comment"># 每行的列数</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b2216276a0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_71_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多图表2</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, row=<span class="string">"sex"</span>, col=<span class="string">"time"</span>,data=tips, size=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 行为sex字段，列为time字段</span></span><br><span class="line"><span class="comment"># x轴total_bill, y轴tip</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b22160a400&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_72_1.png" alt="png"></p><h2 id="5-3-非线性回归"><a href="#5-3-非线性回归" class="headerlink" title="5.3 非线性回归"></a>5.3 非线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非线性回归</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>,data=tips,</span><br><span class="line">           order = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b2214d7b00&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_74_1.png" alt="png"></p><h1 id="6-其他图表可视化"><a href="#6-其他图表可视化" class="headerlink" title="6. 其他图表可视化"></a>6. 其他图表可视化</h1><h2 id="6-1-时间线图"><a href="#6-1-时间线图" class="headerlink" title="6.1 时间线图"></a>6.1 时间线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  tsplot()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">31</span>)</span><br><span class="line">data = np.sin(x) + np.random.rand(<span class="number">10</span>, <span class="number">31</span>) + np.random.randn(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#print(data.shape)</span></span><br><span class="line"><span class="comment">#print(pd.DataFrame(data).head())</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">sns.tsplot(data=data,</span><br><span class="line">           err_style=<span class="string">"ci_band"</span>,   <span class="comment"># 误差数据风格，可选：ci_band, ci_bars, boot_traces, boot_kde, unit_traces, unit_points</span></span><br><span class="line">           interpolate=<span class="literal">True</span>,      <span class="comment"># 是否连线</span></span><br><span class="line">           ci = [<span class="number">40</span>,<span class="number">70</span>,<span class="number">90</span>],       <span class="comment"># 设置误差区间 </span></span><br><span class="line">           color = <span class="string">'r'</span>            <span class="comment"># 设置颜色</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21668c860&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_76_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.tsplot(data=data, err_style=<span class="string">"boot_traces"</span>, </span><br><span class="line">           n_boot=<span class="number">300</span>   <span class="comment"># 迭代次数</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b216533048&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_77_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gammas = sns.load_dataset(<span class="string">"gammas"</span>)</span><br><span class="line">print(gammas.head())</span><br><span class="line">print(<span class="string">'数据量为：%i条'</span> % len(gammas))</span><br><span class="line">print(<span class="string">'timepoint为0.0时的数据量为：%i条'</span> % len(gammas[gammas[<span class="string">'timepoint'</span>] == <span class="number">0</span>]))</span><br><span class="line">print(<span class="string">'timepoint共有%i个唯一值'</span> % len(gammas[<span class="string">'timepoint'</span>].value_counts()))</span><br><span class="line"><span class="comment">#print(gammas['timepoint'].value_counts())  # 查看唯一值具体信息</span></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"></span><br><span class="line">sns.tsplot(time=<span class="string">"timepoint"</span>,     <span class="comment"># 时间数据，x轴</span></span><br><span class="line">           value=<span class="string">"BOLD signal"</span>,  <span class="comment"># y轴value</span></span><br><span class="line">           unit=<span class="string">"subject"</span>,       <span class="comment"># </span></span><br><span class="line">           condition=<span class="string">"ROI"</span>,      <span class="comment"># 分类</span></span><br><span class="line">           data=gammas)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   timepoint  ROI  subject  BOLD signal</span><br><span class="line">0        0.0  IPS        0     0.513433</span><br><span class="line">1        0.0  IPS        1    -0.414368</span><br><span class="line">2        0.0  IPS        2     0.214695</span><br><span class="line">3        0.0  IPS        3     0.814809</span><br><span class="line">4        0.0  IPS        4    -0.894992</span><br><span class="line">数据量为：6000条</span><br><span class="line">timepoint为0.0时的数据量为：60条</span><br><span class="line">timepoint共有100个唯一值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b221f95a58&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_78_2.png" alt="png"></p><h2 id="6-2-热图"><a href="#6-2-热图" class="headerlink" title="6.2 热图"></a>6.2 热图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热图 - heatmap()</span></span><br><span class="line"><span class="comment"># 简单示例</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># 创建数据 - 10*12图表</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(df,    <span class="comment"># 加载数据</span></span><br><span class="line">            vmin=<span class="number">0</span>, vmax=<span class="number">1</span>   <span class="comment"># 设置图例最大最小值</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b221faac88&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_80_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># heatmap()</span></span><br><span class="line"><span class="comment"># 参数设置</span></span><br><span class="line"></span><br><span class="line">flights = sns.load_dataset(<span class="string">"flights"</span>)</span><br><span class="line">flights = flights.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>) </span><br><span class="line"><span class="comment">#print(flights.head())</span></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">           </span><br><span class="line">sns.heatmap(flights,</span><br><span class="line">            annot = <span class="literal">True</span>,      <span class="comment"># 是否显示数值</span></span><br><span class="line">            fmt = <span class="string">'d'</span>,         <span class="comment"># 格式化字符串</span></span><br><span class="line">            linewidths = <span class="number">0.2</span>,  <span class="comment"># 格子边线宽度</span></span><br><span class="line">            <span class="comment">#center = 100,      # 调色盘的色彩中心值，若没有指定，则以cmap为主</span></span><br><span class="line">            <span class="comment">#cmap = 'Reds',     # 设置调色盘</span></span><br><span class="line">            cbar = <span class="literal">True</span>,       <span class="comment"># 是否显示图例色带</span></span><br><span class="line">            <span class="comment">#cbar_kws=&#123;"orientation": "horizontal"&#125;,   # 是否横向显示图例色带</span></span><br><span class="line">            <span class="comment">#square = True,     # 是否正方形显示图表</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b223040588&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_81_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  heatmap()</span></span><br><span class="line"><span class="comment"># 绘制半边热图</span></span><br><span class="line"></span><br><span class="line">sns.set(style=<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">33</span>)</span><br><span class="line">d = pd.DataFrame(rs.normal(size=(<span class="number">100</span>, <span class="number">26</span>)))</span><br><span class="line">corr = d.corr()   <span class="comment"># 求解相关性矩阵表格</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">mask = np.zeros_like(corr, dtype=np.bool)</span><br><span class="line">mask[np.triu_indices_from(mask)] = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置一个“上三角形”蒙版</span></span><br><span class="line"></span><br><span class="line">cmap = sns.diverging_palette(<span class="number">220</span>, <span class="number">10</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 设置调色盘</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(corr, mask=mask, cmap=cmap, vmax=<span class="number">.3</span>, center=<span class="number">0</span>,</span><br><span class="line">            square=<span class="literal">True</span>, linewidths=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 生成半边热图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b2231f3128&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_82_1.png" alt="png"></p><h2 id="6-3-图标矩阵"><a href="#6-3-图标矩阵" class="headerlink" title="6.3 图标矩阵"></a>6.3 图标矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">attend = sns.load_dataset(<span class="string">"attention"</span>)</span><br><span class="line">print(attend.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">g = sns.FacetGrid(attend, col=<span class="string">"subject"</span>, col_wrap=<span class="number">5</span>,   <span class="comment"># 设置每行的图表数量</span></span><br><span class="line">                  size=<span class="number">1.5</span>)</span><br><span class="line">g.map(plt.plot, <span class="string">"solutions"</span>, <span class="string">"score"</span>, </span><br><span class="line">      marker=<span class="string">"o"</span>,color = <span class="string">'gray'</span>,linewidth = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制图表矩阵</span></span><br><span class="line"></span><br><span class="line">g.set(xlim = (<span class="number">0</span>,<span class="number">4</span>),</span><br><span class="line">      ylim = (<span class="number">0</span>,<span class="number">10</span>),</span><br><span class="line">      xticks = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">      yticks = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">      )</span><br><span class="line"><span class="comment"># 设置x，y轴刻度</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   Unnamed: 0  subject attention  solutions  score</span><br><span class="line">0           0        1   divided          1    2.0</span><br><span class="line">1           1        2   divided          1    3.0</span><br><span class="line">2           2        3   divided          1    3.0</span><br><span class="line">3           3        4   divided          1    5.0</span><br><span class="line">4           4        5   divided          1    4.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b22328cb00&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_84_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Seaborn风格可视化&quot;&gt;&lt;a href=&quot;#1-Seaborn风格可视化&quot; class=&quot;headerlink&quot; title=&quot;1.Seaborn风格可视化&quot;&gt;&lt;/a&gt;1.Seaborn风格可视化&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么事seaborn&quot;&gt;&lt;a href=&quot;#1-1-什么事seaborn&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么事seaborn&quot;&gt;&lt;/a&gt;1.1 什么事seaborn&lt;/h2&gt;&lt;p&gt;​       Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据分析" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/10/04/season%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/season%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2019/10/04/season风格可视化/season风格可视化/</id>
    <published>2019-10-04T10:59:59.294Z</published>
    <updated>2019-10-04T11:01:54.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Seaborn风格可视化"><a href="#1-Seaborn风格可视化" class="headerlink" title="1.Seaborn风格可视化"></a>1.Seaborn风格可视化</h1><h2 id="1-1-什么事seaborn"><a href="#1-1-什么事seaborn" class="headerlink" title="1.1 什么事seaborn"></a>1.1 什么事seaborn</h2><p>​       Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。</p><a id="more"></a><h2 id="1-2-seaborn-API"><a href="#1-2-seaborn-API" class="headerlink" title="1.2 seaborn API"></a>1.2 seaborn API</h2><p>Seaborn 要求原始数据的输入类型为 pandas 的 Dataframe 或 Numpy 数组，画图函数有以下几种形式:</p><ul><li>sns.图名(x=’X轴 列名’, y=’Y轴 列名’, data=原始数据df对象)</li><li>sns.图名(x=’X轴 列名’, y=’Y轴 列名’, hue=’分组绘图参数’, data=原始数据df对象)</li><li>sns.图名(x=np.array, y=np.array[, …])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h1 id="2-基本绘图设置"><a href="#2-基本绘图设置" class="headerlink" title="2. 基本绘图设置"></a>2. 基本绘图设置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建正弦函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sinplot</span><span class="params">(flip=<span class="number">1</span>)</span>:</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">14</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">        plt.plot(x, np.sin(x+i*<span class="number">.5</span>)*(<span class="number">7</span>-i)*flip)</span><br><span class="line"></span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="output_3_0.png" alt="png"></p><h2 id="2-1-简单切换成Seaborn风格"><a href="#2-1-简单切换成Seaborn风格" class="headerlink" title="2.1 简单切换成Seaborn风格"></a>2.1 简单切换成Seaborn风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换Seaborn风格</span></span><br><span class="line">sns.set()</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="output_5_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换seaborn图标风格</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), facecolor=<span class="string">'white'</span>)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">sns.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line">data = np.random.normal(size=(<span class="number">20</span>,<span class="number">6</span>))+np.arange(<span class="number">6</span>)/<span class="number">2</span></span><br><span class="line">sns.boxplot(data=data)</span><br><span class="line">plt.title(<span class="string">'style-whitegrid'</span>)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line">sns.set_style(<span class="string">'dark'</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="output_6_0.png" alt="png"></p><h2 id="2-3-设置图标坐标轴"><a href="#2-3-设置图标坐标轴" class="headerlink" title="2.3 设置图标坐标轴"></a>2.3 设置图标坐标轴</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#despine()</span></span><br><span class="line"><span class="comment"># seaborn.despine(fig=None, ax=None, top=True, right=True, left=False, bottom=False, offset=None, trim=False)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line">sns.set_style(<span class="string">"ticks"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>,<span class="number">9</span>))</span><br><span class="line">plt.subplots_adjust(hspace=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)  </span><br><span class="line">sinplot()</span><br><span class="line"><span class="comment"># 删除了上、右坐标轴</span></span><br><span class="line">sns.despine()</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">sns.violinplot(data=data)</span><br><span class="line"><span class="comment"># offset：与坐标轴之间的偏移</span></span><br><span class="line"><span class="comment"># trim：为True时，将坐标轴限制在数据最大最小值</span></span><br><span class="line"><span class="comment">#sns.despine(offset=10, trim=True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax3 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># top, right, left, bottom：布尔型，为True时不显示</span></span><br><span class="line"><span class="comment">#sns.despine(left=True, right = False)</span></span><br><span class="line">sns.boxplot(data=data, palette=<span class="string">"deep"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b20e4f7a58&gt;</code></pre><p><img src="output_8_1.png" alt="png"></p><h2 id="2-4-设置局部图标风格"><a href="#2-4-设置局部图标风格" class="headerlink" title="2.4 设置局部图标风格"></a>2.4 设置局部图标风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">"darkgrid"</span>):</span><br><span class="line">    plt.subplot(<span class="number">211</span>)</span><br><span class="line">    sinplot()</span><br><span class="line"><span class="comment"># 设置局部图表风格，用with做代码块区分</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br><span class="line"><span class="comment"># 外部表格风格</span></span><br></pre></td></tr></table></figure><p><img src="output_10_0.png" alt="png"></p><h2 id="2-5-设置显示比例"><a href="#2-5-设置显示比例" class="headerlink" title="2.5 设置显示比例"></a>2.5 设置显示比例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set_context()</span></span><br><span class="line"><span class="comment"># 选择包括：'paper', 'notebook', 'talk', 'poster'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 与上面的cell比较你就会发现不同</span></span><br><span class="line">    </span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br><span class="line">sns.set_context(<span class="string">"poster"</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="output_12_0.png" alt="png"></p><h2 id="2-6-调色板"><a href="#2-6-调色板" class="headerlink" title="2.6 调色板"></a>2.6 调色板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># color_palette()</span></span><br><span class="line"><span class="comment"># 默认6种颜色：deep, muted, pastel, bright, dark, colorblind</span></span><br><span class="line"><span class="comment"># seaborn.color_palette(palette=None, n_colors=None, desat=None)</span></span><br><span class="line">current_palette = sns.color_palette()</span><br><span class="line">print(type(current_palette))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sns.palplot(current_palette[2:4])</span></span><br><span class="line">sns.palplot(current_palette)</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;seaborn.palettes._ColorPalette&#39;&gt;</code></pre><p><img src="output_14_1.png" alt="png"></p><h2 id="2-7-颜色风格"><a href="#2-7-颜色风格" class="headerlink" title="2.7 颜色风格"></a>2.7 颜色风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 颜色风格内容：Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, </span></span><br><span class="line"><span class="comment"># BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, </span></span><br><span class="line"><span class="comment"># Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples,</span></span><br><span class="line"><span class="comment"># Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, </span></span><br><span class="line"><span class="comment"># Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, </span></span><br><span class="line"><span class="comment"># autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, </span></span><br><span class="line"><span class="comment"># cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, </span></span><br><span class="line"><span class="comment"># gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, </span></span><br><span class="line"><span class="comment"># hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, </span></span><br><span class="line"><span class="comment"># pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spectral, spectral_r, spring, </span></span><br><span class="line"><span class="comment"># spring_r, summer, summer_r, terrain, terrain_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r</span></span><br><span class="line"></span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">'Accent'</span>,<span class="number">12</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">'Accent_r'</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="output_16_0.png" alt="png"></p><p><img src="output_16_1.png" alt="png"></p><h2 id="2-8-设置饱和度和亮度"><a href="#2-8-设置饱和度和亮度" class="headerlink" title="2.8 设置饱和度和亮度"></a>2.8 设置饱和度和亮度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.hls_palette(<span class="number">4</span>,l=<span class="number">.3</span>,s=<span class="number">.8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># l-&gt;亮度</span></span><br><span class="line"><span class="comment"># s-&gt;饱和度</span></span><br></pre></td></tr></table></figure><p><img src="output_18_0.png" alt="png"></p><h2 id="2-9-设置颜色线性变化"><a href="#2-9-设置颜色线性变化" class="headerlink" title="2.9 设置颜色线性变化"></a>2.9 设置颜色线性变化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置颜色线性变化</span></span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>, gamma=<span class="number">2</span>))</span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>, start=<span class="number">.5</span>, rot=<span class="number">.75</span>))</span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>,start=<span class="number">0.5</span>, rot=<span class="number">0</span>, dark=<span class="number">0.95</span>, reverse=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># n_colors → 颜色个数</span></span><br><span class="line"><span class="comment"># start → 值区间在0-3，开始颜色</span></span><br><span class="line"><span class="comment"># rot → 颜色旋转角度</span></span><br><span class="line"><span class="comment"># gamma → 颜色伽马值，越大颜色越暗</span></span><br><span class="line"><span class="comment"># dark，light → 值区间0-1，颜色深浅</span></span><br><span class="line"><span class="comment"># reverse → 布尔值，默认为False，由浅到深</span></span><br></pre></td></tr></table></figure><p><img src="output_20_0.png" alt="png"></p><p><img src="output_20_1.png" alt="png"></p><p><img src="output_20_2.png" alt="png"></p><h2 id="2-10-创建分散颜色"><a href="#2-10-创建分散颜色" class="headerlink" title="2.10 创建分散颜色"></a>2.10 创建分散颜色</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">x = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 创建分散颜色</span></span><br><span class="line">cmap = sns.diverging_palette(<span class="number">200</span>, <span class="number">20</span>, sep=<span class="number">20</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sns.heatmap(x, cmap=cmap)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21a370cf8&gt;</code></pre><p><img src="output_22_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line">fig=plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line"><span class="keyword">with</span> sns.color_palette(<span class="string">'PuBuGn_d'</span>):</span><br><span class="line">    plt.subplot(<span class="number">211</span>)</span><br><span class="line">    sinplot()</span><br><span class="line">    </span><br><span class="line">sns.set_palette(<span class="string">'husl'</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="output_23_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'darkgrid'</span>)</span><br><span class="line">sns.set_context(<span class="string">'paper'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"><span class="comment">#不再发出警告</span></span><br></pre></td></tr></table></figure><h1 id="3-分布数据可视化"><a href="#3-分布数据可视化" class="headerlink" title="3. 分布数据可视化"></a>3. 分布数据可视化</h1><h2 id="3-1-直方图"><a href="#3-1-直方图" class="headerlink" title="3.1 直方图"></a>3.1 直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直方图</span></span><br><span class="line"><span class="comment">#设计随即种子</span></span><br><span class="line">rs = np.random.RandomState(<span class="number">10</span>)</span><br><span class="line">s = pd.Series(rs.randn(<span class="number">100</span>)*<span class="number">100</span>)</span><br><span class="line">sns.distplot(s, bins=<span class="number">10</span>, hist=<span class="literal">True</span>, kde=<span class="literal">False</span>, norm_hist=<span class="literal">False</span>,</span><br><span class="line">            rug=<span class="literal">True</span>,vertical=<span class="literal">False</span>,color=<span class="string">'y'</span>, label=<span class="string">'distplot'</span>, axlabel=<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment"># bins → 箱数</span></span><br><span class="line"><span class="comment"># hist、ked → 是否显示箱/密度曲线</span></span><br><span class="line"><span class="comment"># norm_hist → 直方图是否按照密度来显示</span></span><br><span class="line"><span class="comment"># rug → 是否显示数据分布情况</span></span><br><span class="line"><span class="comment"># vertical → 是否水平显示</span></span><br><span class="line"><span class="comment"># color → 设置颜色</span></span><br><span class="line"><span class="comment"># label → 图例</span></span><br><span class="line"><span class="comment"># axlabel → x轴标注</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.legend.Legend at 0x1b20e65e4e0&gt;</code></pre><p><img src="output_26_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(s, rug=<span class="literal">True</span>, rug_kws=&#123;<span class="string">'color'</span>:<span class="string">'g'</span>&#125;,</span><br><span class="line">            kde_kws=&#123;<span class="string">"color"</span>: <span class="string">"k"</span>, <span class="string">"lw"</span>: <span class="number">1</span>, <span class="string">"label"</span>: <span class="string">"KDE"</span>,<span class="string">'linestyle'</span>:<span class="string">'--'</span>&#125;,   </span><br><span class="line">            <span class="comment"># 设置密度曲线颜色，线宽，标注、线形</span></span><br><span class="line">            hist_kws=&#123;<span class="string">"histtype"</span>: <span class="string">"step"</span>, <span class="string">"linewidth"</span>: <span class="number">1</span>,<span class="string">"alpha"</span>: <span class="number">1</span>, <span class="string">"color"</span>: <span class="string">"g"</span>&#125;)  </span><br><span class="line">            <span class="comment"># 设置箱子的风格、线宽、透明度、颜色</span></span><br><span class="line">            <span class="comment"># 风格包括：'bar', 'barstacked', 'step', 'stepfilled'</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21bc8e828&gt;</code></pre><p><img src="output_27_1.png" alt="png"></p><h2 id="3-2-密度图"><a href="#3-2-密度图" class="headerlink" title="3.2 密度图"></a>3.2 密度图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 单个样本数据密度分布图</span></span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,</span><br><span class="line">           shade = <span class="literal">False</span>,  <span class="comment"># 是否填充</span></span><br><span class="line">           color = <span class="string">'b'</span>,   <span class="comment"># 设置颜色</span></span><br><span class="line">           vertical = <span class="literal">False</span>  <span class="comment"># 设置是否水平</span></span><br><span class="line">           )</span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,bw=<span class="number">5</span>, label=<span class="string">"bw: 0.2"</span>,</span><br><span class="line">            linestyle = <span class="string">'-'</span>,linewidth = <span class="number">1.2</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,bw=<span class="number">20</span>, label=<span class="string">"bw: 2"</span>,</span><br><span class="line">            linestyle = <span class="string">'-'</span>,linewidth = <span class="number">1.2</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># bw → 控制拟合的程度，类似直方图的箱数</span></span><br><span class="line"></span><br><span class="line">sns.rugplot(s,height = <span class="number">0.1</span>,color = <span class="string">'k'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 数据频率分布图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21babf470&gt;</code></pre><p><img src="output_29_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 两个样本数据密度分布图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">2</span>)  <span class="comment"># 设定随机数种子</span></span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">100</span>,<span class="number">2</span>),</span><br><span class="line">                 columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">sns.kdeplot(df[<span class="string">'A'</span>],df[<span class="string">'B'</span>],</span><br><span class="line">           cbar = <span class="literal">True</span>,    <span class="comment"># 是否显示颜色图例</span></span><br><span class="line">           shade = <span class="literal">True</span>,   <span class="comment"># 是否填充</span></span><br><span class="line">           cmap = <span class="string">'Reds'</span>,  <span class="comment"># 设置调色盘</span></span><br><span class="line">           shade_lowest=<span class="literal">False</span>,  <span class="comment"># 最外围颜色是否显示</span></span><br><span class="line">           n_levels = <span class="number">10</span>   <span class="comment"># 曲线个数（如果非常多，则会越平滑）</span></span><br><span class="line">           )</span><br><span class="line"><span class="comment"># 两个维度数据生成曲线密度图，以颜色作为密度衰减显示</span></span><br><span class="line"></span><br><span class="line">sns.rugplot(df[<span class="string">'A'</span>], color=<span class="string">"g"</span>, axis=<span class="string">'x'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line">sns.rugplot(df[<span class="string">'B'</span>], color=<span class="string">"r"</span>, axis=<span class="string">'y'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 注意设置x，y轴</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21bb63470&gt;</code></pre><p><img src="output_30_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 两个样本数据密度分布图</span></span><br><span class="line"><span class="comment"># 多个密度图</span></span><br><span class="line"></span><br><span class="line">rs1 = np.random.RandomState(<span class="number">2</span>)  </span><br><span class="line">rs2 = np.random.RandomState(<span class="number">5</span>)  </span><br><span class="line">df1 = pd.DataFrame(rs1.randn(<span class="number">100</span>,<span class="number">2</span>)+<span class="number">2</span>,columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">df2 = pd.DataFrame(rs2.randn(<span class="number">100</span>,<span class="number">2</span>)<span class="number">-2</span>,columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">sns.kdeplot(df1[<span class="string">'A'</span>],df1[<span class="string">'B'</span>],cmap = <span class="string">'Greens'</span>,</span><br><span class="line">            shade = <span class="literal">True</span>,shade_lowest=<span class="literal">False</span>)</span><br><span class="line">sns.kdeplot(df2[<span class="string">'A'</span>],df2[<span class="string">'B'</span>],cmap = <span class="string">'Blues'</span>,</span><br><span class="line">            shade = <span class="literal">True</span>,shade_lowest=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line"><span class="comment">#sns.rugplot(df2['A']+df1['A'], color="g", axis='x',alpha = 0.5)</span></span><br><span class="line"><span class="comment">#sns.rugplot(df2['B']+df1['B'], color="r", axis='y',alpha = 0.5)</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21be56278&gt;</code></pre><p><img src="output_31_1.png" alt="png"></p><h2 id="3-3-综合散点图"><a href="#3-3-综合散点图" class="headerlink" title="3.3 综合散点图"></a>3.3 综合散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">2</span>)  </span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">200</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],  <span class="comment"># 设置xy轴，显示columns名称</span></span><br><span class="line">              data=df,   <span class="comment"># 设置数据</span></span><br><span class="line">              color = <span class="string">'k'</span>,   <span class="comment"># 设置颜色</span></span><br><span class="line">              s = <span class="number">50</span>, edgecolor=<span class="string">"w"</span>,linewidth=<span class="number">1</span>,  <span class="comment"># 设置散点大小、边缘线颜色及宽度(只针对scatter）</span></span><br><span class="line">              kind = <span class="string">'scatter'</span>,   <span class="comment"># 设置类型：“scatter”、“reg”、“resid”、“kde”、“hex”</span></span><br><span class="line">              space = <span class="number">0.2</span>,  <span class="comment"># 设置散点图和布局图的间距</span></span><br><span class="line">              size = <span class="number">8</span>,   <span class="comment"># 图表大小（自动调整为正方形）</span></span><br><span class="line">              ratio = <span class="number">5</span>,  <span class="comment"># 散点图与布局图高度比，整型</span></span><br><span class="line">              marginal_kws=dict(bins=<span class="number">15</span>, rug=<span class="literal">True</span>)  <span class="comment"># 设置柱状图箱数，是否设置rug</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.JointGrid at 0x1b21bee2be0&gt;</code></pre><p><img src="output_33_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"><span class="comment"># 六边形图</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">500</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">"white"</span>):</span><br><span class="line">    sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],data = df, kind=<span class="string">"hex"</span>, color=<span class="string">"g"</span>,</span><br><span class="line">                 marginal_kws=dict(bins=<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p><img src="output_34_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"><span class="comment"># 密度图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">15</span>)</span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">300</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">g = sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],data = df,</span><br><span class="line">                  kind=<span class="string">"kde"</span>, color=<span class="string">"k"</span>,</span><br><span class="line">                  shade_lowest=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 创建密度图</span></span><br><span class="line"></span><br><span class="line">g.plot_joint(plt.scatter,c=<span class="string">"w"</span>, s=<span class="number">30</span>, linewidth=<span class="number">1</span>, marker=<span class="string">"*"</span>)</span><br><span class="line"><span class="comment"># 添加散点图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.JointGrid at 0x1b21c4325f8&gt;</code></pre><p><img src="output_35_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + ax_marg_x.hist() + ax_marg_y.hist()</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g.plot_joint(plt.scatter, color =<span class="string">'m'</span>, edgecolor = <span class="string">'white'</span>)  <span class="comment"># 设置框内图表，scatter</span></span><br><span class="line">g.ax_marg_x.hist(tips[<span class="string">"total_bill"</span>], color=<span class="string">"b"</span>, alpha=<span class="number">.6</span>,</span><br><span class="line">                 bins=np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">3</span>))            <span class="comment"># 设置x轴直方图，注意bins是数组</span></span><br><span class="line">g.ax_marg_y.hist(tips[<span class="string">"tip"</span>], color=<span class="string">"r"</span>, alpha=<span class="number">.6</span>,</span><br><span class="line">                 orientation=<span class="string">"horizontal"</span>,</span><br><span class="line">                 bins=np.arange(<span class="number">0</span>, <span class="number">12</span>, <span class="number">1</span>))            <span class="comment"># 设置x轴直方图，注意需要orientation参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">g.annotate(stats.pearsonr)    </span><br><span class="line"><span class="comment"># 设置标注，可以为pearsonr，spearmanr</span></span><br><span class="line"></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br></pre></td></tr></table></figure><pre><code>   total_bill   tip     sex smoker  day    time  size0       16.99  1.01  Female     No  Sun  Dinner     21       10.34  1.66    Male     No  Sun  Dinner     32       21.01  3.50    Male     No  Sun  Dinner     33       23.68  3.31    Male     No  Sun  Dinner     24       24.59  3.61  Female     No  Sun  Dinner     4</code></pre><p><img src="output_36_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + plot_marginals()</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g = g.plot_joint(plt.scatter,color=<span class="string">"g"</span>, s=<span class="number">40</span>, edgecolor=<span class="string">"white"</span>)   <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">g.plot_marginals(sns.distplot, kde=<span class="literal">True</span>, color=<span class="string">"g"</span>)                <span class="comment"># 绘制x，y轴直方图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.JointGrid at 0x1b21c630da0&gt;</code></pre><p><img src="output_37_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + plot_marginals()</span></span><br><span class="line"><span class="comment"># kde - 密度图</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g = g.plot_joint(sns.kdeplot,cmap = <span class="string">'Reds_r'</span>)             <span class="comment"># 绘制密度图</span></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">g.plot_marginals(sns.kdeplot, shade = <span class="literal">True</span>, color=<span class="string">"r"</span>)  <span class="comment"># 绘制x，y轴密度图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.JointGrid at 0x1b21d7aef60&gt;</code></pre><p><img src="output_38_1.png" alt="png"></p><h2 id="3-4-矩阵散点图"><a href="#3-4-矩阵散点图" class="headerlink" title="3.4 矩阵散点图"></a>3.4 矩阵散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">"iris"</span>)</span><br><span class="line">print(iris.head())</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris,</span><br><span class="line">            kind = <span class="string">'scatter'</span>,  <span class="comment"># 散点图/回归分布图 &#123;‘scatter’, ‘reg’&#125;  </span></span><br><span class="line">            diag_kind=<span class="string">"hist"</span>,  <span class="comment"># 直方图/密度图 &#123;‘hist’, ‘kde’&#125;</span></span><br><span class="line">            hue=<span class="string">"species"</span>,   <span class="comment"># 按照某一字段进行分类</span></span><br><span class="line">            palette=<span class="string">"husl"</span>,  <span class="comment"># 设置调色板</span></span><br><span class="line">            markers=[<span class="string">"o"</span>, <span class="string">"s"</span>, <span class="string">"D"</span>],  <span class="comment"># 设置不同系列的点样式（这里根据参考分类个数）</span></span><br><span class="line">            size = <span class="number">2</span>,   <span class="comment"># 图表大小</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><pre><code>   sepal_length  sepal_width  petal_length  petal_width species0           5.1          3.5           1.4          0.2  setosa1           4.9          3.0           1.4          0.2  setosa2           4.7          3.2           1.3          0.2  setosa3           4.6          3.1           1.5          0.2  setosa4           5.0          3.6           1.4          0.2  setosa&lt;seaborn.axisgrid.PairGrid at 0x1b21d8a44e0&gt;</code></pre><p><img src="output_40_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"><span class="comment"># 只提取局部变量进行对比</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris,vars=[<span class="string">"sepal_width"</span>, <span class="string">"sepal_length"</span>],</span><br><span class="line">             kind = <span class="string">'reg'</span>, diag_kind=<span class="string">"kde"</span>, </span><br><span class="line">             hue=<span class="string">"species"</span>, palette=<span class="string">"husl"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1b21e003c18&gt;</code></pre><p><img src="output_41_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"><span class="comment"># 其他参数设置</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris, diag_kind=<span class="string">"kde"</span>, markers=<span class="string">"+"</span>,</span><br><span class="line">             plot_kws=dict(s=<span class="number">50</span>, edgecolor=<span class="string">"b"</span>, linewidth=<span class="number">1</span>),</span><br><span class="line">             <span class="comment"># 设置点样式</span></span><br><span class="line">             diag_kws=dict(shade=<span class="literal">True</span>)</span><br><span class="line">             <span class="comment"># 设置密度图样式</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1b21c37be48&gt;</code></pre><p><img src="output_42_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  矩阵散点图 - PairGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># map_diag() + map_offdiag()</span></span><br><span class="line"></span><br><span class="line">g = sns.PairGrid(iris,hue=<span class="string">"species"</span>,palette = <span class="string">'hls'</span>,</span><br><span class="line">                vars = [<span class="string">'sepal_length'</span>,<span class="string">'sepal_width'</span>,<span class="string">'petal_length'</span>,<span class="string">'petal_width'</span>],  <span class="comment"># 可筛选</span></span><br><span class="line">                )</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据，按照species分类</span></span><br><span class="line"></span><br><span class="line">g.map_diag(plt.hist, </span><br><span class="line">           histtype = <span class="string">'barstacked'</span>,   <span class="comment"># 可选：'bar', 'barstacked', 'step', 'stepfilled'</span></span><br><span class="line">           linewidth = <span class="number">1</span>, edgecolor = <span class="string">'w'</span>)           </span><br><span class="line"><span class="comment"># 对角线图表，plt.hist/sns.kdeplot</span></span><br><span class="line"></span><br><span class="line">g.map_offdiag(plt.scatter,</span><br><span class="line">              edgecolor=<span class="string">"w"</span>, s=<span class="number">40</span>,linewidth = <span class="number">1</span>,   <span class="comment"># 设置点颜色、大小、描边宽度</span></span><br><span class="line">             )     </span><br><span class="line"><span class="comment"># 其他图表，plt.scatter/plt.bar...</span></span><br><span class="line"></span><br><span class="line">g.add_legend()</span><br><span class="line"><span class="comment"># 添加图例</span></span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1b218fe3f98&gt;</code></pre><p><img src="output_43_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - PairGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># map_diag() + map_lower() + map_upper()</span></span><br><span class="line"></span><br><span class="line">g = sns.PairGrid(iris)</span><br><span class="line">g.map_diag(sns.kdeplot, lw=<span class="number">3</span>)   <span class="comment"># 设置对角线图表</span></span><br><span class="line">g.map_upper(plt.scatter, color = <span class="string">'r'</span>)     <span class="comment"># 设置对角线上端图表</span></span><br><span class="line">g.map_lower(sns.kdeplot, cmap=<span class="string">"Blues_d"</span>)      <span class="comment"># 设置对角线下端图表</span></span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.PairGrid at 0x1b21ee966a0&gt;</code></pre><p><img src="output_44_1.png" alt="png"></p><h1 id="4-分类数据可视化"><a href="#4-分类数据可视化" class="headerlink" title="4. 分类数据可视化"></a>4. 分类数据可视化</h1><h2 id="4-1-分类散点图"><a href="#4-1-分类散点图" class="headerlink" title="4.1 分类散点图"></a>4.1 分类散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 按照不同类别对样本数据进行分布散点图绘制</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"day"</span>,          <span class="comment"># x → 设置分组统计字段</span></span><br><span class="line">              y=<span class="string">"total_bill"</span>,   <span class="comment"># y → 数据分布统计字段</span></span><br><span class="line">              <span class="comment"># 这里xy数据对调，将会使得散点图横向分布</span></span><br><span class="line">              data=tips,        <span class="comment"># data → 对应数据</span></span><br><span class="line">              jitter = <span class="literal">True</span>,    <span class="comment"># jitter → 当点数据重合较多时，用该参数做一些调整，也可以设置间距如：jitter = 0.1</span></span><br><span class="line">              size = <span class="number">5</span>, edgecolor = <span class="string">'w'</span>,linewidth=<span class="number">1</span>,marker = <span class="string">'o'</span>  <span class="comment"># 设置点的大小、描边颜色或宽度、点样式</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><pre><code>   total_bill   tip     sex smoker  day    time  size0       16.99  1.01  Female     No  Sun  Dinner     21       10.34  1.66    Male     No  Sun  Dinner     32       21.01  3.50    Male     No  Sun  Dinner     33       23.68  3.31    Male     No  Sun  Dinner     24       24.59  3.61  Female     No  Sun  Dinner     4&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21f971320&gt;</code></pre><p><img src="output_46_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>,</span><br><span class="line">              data=tips, jitter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21f9b2b00&gt;</code></pre><p><img src="output_47_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 设置调色盘</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>,</span><br><span class="line">              data=tips, jitter=<span class="literal">True</span>,</span><br><span class="line">              palette=<span class="string">"Set2"</span>,  <span class="comment"># 设置调色盘</span></span><br><span class="line">              dodge=<span class="literal">True</span>,  <span class="comment"># 是否拆分</span></span><br><span class="line">             )</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fc11198&gt;</code></pre><p><img src="output_48_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 筛选分类类别</span></span><br><span class="line"></span><br><span class="line">print(tips[<span class="string">'day'</span>].value_counts())</span><br><span class="line"><span class="comment"># 查看day字段的唯一值</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,jitter = <span class="literal">True</span>, </span><br><span class="line">              order = [<span class="string">'Sat'</span>,<span class="string">'Sun'</span>])</span><br><span class="line"><span class="comment"># order → 筛选类别</span></span><br></pre></td></tr></table></figure><pre><code>Sat     87Sun     76Thur    62Fri     19Name: day, dtype: int64&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fc8c748&gt;</code></pre><p><img src="output_49_2.png" alt="png"></p><h2 id="4-2-分簇散点图"><a href="#4-2-分簇散点图" class="headerlink" title="4.2 分簇散点图"></a>4.2 分簇散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swarmplot()</span></span><br><span class="line"><span class="comment"># 分簇散点图</span></span><br><span class="line"></span><br><span class="line">sns.swarmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"day"</span>, data=tips,</span><br><span class="line">              size = <span class="number">5</span>, edgecolor = <span class="string">'w'</span>,linewidth=<span class="number">1</span>,marker = <span class="string">'o'</span>,</span><br><span class="line">              palette = <span class="string">'Reds'</span>)</span><br><span class="line"><span class="comment"># 用法和stripplot类似</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fcdef28&gt;</code></pre><p><img src="output_51_1.png" alt="png"></p><h2 id="4-3-箱型图"><a href="#4-3-箱型图" class="headerlink" title="4.3 箱型图"></a>4.3 箱型图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boxplot()</span></span><br><span class="line"></span><br><span class="line">sns.boxplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            linewidth = <span class="number">2</span>,   <span class="comment"># 线宽</span></span><br><span class="line">            width = <span class="number">0.8</span>,     <span class="comment"># 箱之间的间隔比例</span></span><br><span class="line">            fliersize = <span class="number">3</span>,   <span class="comment"># 异常点大小</span></span><br><span class="line">            palette = <span class="string">'hls'</span>, <span class="comment"># 设置调色板</span></span><br><span class="line">            whis = <span class="number">1.5</span>,      <span class="comment"># 设置IQR </span></span><br><span class="line">            notch = <span class="literal">True</span>,    <span class="comment"># 设置是否以中值做凹槽</span></span><br><span class="line">            order = [<span class="string">'Thur'</span>,<span class="string">'Fri'</span>,<span class="string">'Sat'</span>,<span class="string">'Sun'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">           )</span><br><span class="line"><span class="comment"># 绘制箱型图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sns.swarmplot(x="day", y="total_bill", data=tips,color ='k',size = 3,alpha = 0.8)</span></span><br><span class="line"><span class="comment"># 可以添加散点图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fd32710&gt;</code></pre><p><img src="output_53_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line">sns.boxplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            hue = <span class="string">'smoker'</span>, palette = <span class="string">'Reds'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fdce5c0&gt;</code></pre><p><img src="output_54_1.png" alt="png"></p><h1 id="4-4-小提琴图"><a href="#4-4-小提琴图" class="headerlink" title="4.4 小提琴图"></a>4.4 小提琴图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># violinplot()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            linewidth = <span class="number">2</span>,   <span class="comment"># 线宽</span></span><br><span class="line">            width = <span class="number">0.8</span>,     <span class="comment"># 箱之间的间隔比例</span></span><br><span class="line">            palette = <span class="string">'hls'</span>, <span class="comment"># 设置调色板</span></span><br><span class="line">            order = [<span class="string">'Thur'</span>,<span class="string">'Fri'</span>,<span class="string">'Sat'</span>,<span class="string">'Sun'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">            scale = <span class="string">'area'</span>,  <span class="comment"># 测度小提琴图的宽度：area-面积相同，count-按照样本数量决定宽度，width-宽度一样</span></span><br><span class="line">            gridsize = <span class="number">50</span>,   <span class="comment"># 设置小提琴图边线的平滑度，越高越平滑</span></span><br><span class="line">            inner = <span class="string">'box'</span>,   <span class="comment"># 设置内部显示类型 → “box”, “quartile”, “point”, “stick”, None</span></span><br><span class="line">            <span class="comment">#bw = 0.8        # 控制拟合程度，一般可以不设置</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21feb0d68&gt;</code></pre><p><img src="output_56_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">               hue = <span class="string">'smoker'</span>, palette=<span class="string">"muted"</span>, </span><br><span class="line">               split=<span class="literal">True</span>,  <span class="comment"># 设置是否拆分小提琴图</span></span><br><span class="line">               inner=<span class="string">"quartile"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21ff37940&gt;</code></pre><p><img src="output_57_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结合散点图</span></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette = <span class="string">'hls'</span>, inner = <span class="literal">None</span>)</span><br><span class="line">sns.swarmplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, color=<span class="string">"w"</span>, alpha=<span class="number">.5</span>)</span><br><span class="line"><span class="comment"># 插入散点图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fff0e80&gt;</code></pre><p><img src="output_58_1.png" alt="png"></p><h2 id="4-5-LV图"><a href="#4-5-LV图" class="headerlink" title="4.5 LV图"></a>4.5 LV图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  lvplot()</span></span><br><span class="line">sns.lvplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">"mako"</span>,</span><br><span class="line">           <span class="comment">#hue = 'smoker',</span></span><br><span class="line">           width = <span class="number">0.8</span>,           <span class="comment"># 箱之间间隔比例</span></span><br><span class="line">           linewidth = <span class="number">12</span>,</span><br><span class="line">           scale = <span class="string">'area'</span>,        <span class="comment"># 设置框的大小 → “linear”、“exonential”、“area”</span></span><br><span class="line">           k_depth = <span class="string">'proportion'</span>,  <span class="comment"># 设置框的数量 → “proportion”、“tukey”、“trustworthy”</span></span><br><span class="line">          )</span><br><span class="line"><span class="comment"># 绘制LV图</span></span><br><span class="line"></span><br><span class="line">sns.swarmplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,color =<span class="string">'k'</span>,size = <span class="number">3</span>,alpha = <span class="number">0.8</span>)</span><br><span class="line"><span class="comment"># 可以添加散点图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b22101c400&gt;</code></pre><p><img src="output_60_1.png" alt="png"></p><h1 id="4-6分类统计图"><a href="#4-6分类统计图" class="headerlink" title="4.6分类统计图"></a>4.6分类统计图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"><span class="comment"># 置信区间：样本均值 + 抽样误差</span></span><br><span class="line"></span><br><span class="line">titanic = sns.load_dataset(<span class="string">"titanic"</span>)</span><br><span class="line"><span class="comment">#print(titanic.head())</span></span><br><span class="line"><span class="comment">#print('-----')</span></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">sns.barplot(x=<span class="string">"sex"</span>, y=<span class="string">"survived"</span>, hue=<span class="string">"class"</span>, data=titanic,</span><br><span class="line">            palette = <span class="string">'hls'</span>, </span><br><span class="line">            order = [<span class="string">'male'</span>,<span class="string">'female'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">            capsize = <span class="number">0.05</span>,  <span class="comment"># 误差线横向延伸宽度</span></span><br><span class="line">            saturation=<span class="number">.8</span>,   <span class="comment"># 颜色饱和度</span></span><br><span class="line">            errcolor = <span class="string">'gray'</span>,errwidth = <span class="number">2</span>,  <span class="comment"># 误差线颜色，宽度</span></span><br><span class="line">            ci = <span class="string">'sd'</span>    <span class="comment"># 置信区间误差 → 0-100内值、'sd'、None</span></span><br><span class="line">            )</span><br><span class="line"><span class="comment">#print(titanic.groupby(['sex','class']).mean()['survived'])</span></span><br><span class="line"><span class="comment">#print(titanic.groupby(['sex','class']).std()['survived'])</span></span><br><span class="line"><span class="comment"># 计算数据</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b2210a1048&gt;</code></pre><p><img src="output_62_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">sns.barplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"sex"</span>, data=tips,</span><br><span class="line">            palette = <span class="string">'Blues'</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line">tips.groupby([<span class="string">'day'</span>,<span class="string">'sex'</span>]).mean()</span><br><span class="line"><span class="comment"># 计算数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>size</th>    </tr>    <tr>      <th>day</th>      <th>sex</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">Thur</th>      <th>Male</th>      <td>18.714667</td>      <td>2.980333</td>      <td>2.433333</td>    </tr>    <tr>      <th>Female</th>      <td>16.715312</td>      <td>2.575625</td>      <td>2.468750</td>    </tr>    <tr>      <th rowspan="2" valign="top">Fri</th>      <th>Male</th>      <td>19.857000</td>      <td>2.693000</td>      <td>2.100000</td>    </tr>    <tr>      <th>Female</th>      <td>14.145556</td>      <td>2.781111</td>      <td>2.111111</td>    </tr>    <tr>      <th rowspan="2" valign="top">Sat</th>      <th>Male</th>      <td>20.802542</td>      <td>3.083898</td>      <td>2.644068</td>    </tr>    <tr>      <th>Female</th>      <td>19.680357</td>      <td>2.801786</td>      <td>2.250000</td>    </tr>    <tr>      <th rowspan="2" valign="top">Sun</th>      <th>Male</th>      <td>21.887241</td>      <td>3.220345</td>      <td>2.810345</td>    </tr>    <tr>      <th>Female</th>      <td>19.872222</td>      <td>3.367222</td>      <td>2.944444</td>    </tr>  </tbody></table></div><p><img src="output_63_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">crashes = sns.load_dataset(<span class="string">"car_crashes"</span>).sort_values(<span class="string">"total"</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">print(crashes.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">f, ax = plt.subplots(figsize=(<span class="number">6</span>, <span class="number">15</span>))</span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line"></span><br><span class="line">sns.set_color_codes(<span class="string">"pastel"</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"total"</span>, y=<span class="string">"abbrev"</span>, data=crashes,</span><br><span class="line">            label=<span class="string">"Total"</span>, color=<span class="string">"b"</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 设置第一个柱状图</span></span><br><span class="line"></span><br><span class="line">sns.set_color_codes(<span class="string">"muted"</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"alcohol"</span>, y=<span class="string">"abbrev"</span>, data=crashes,</span><br><span class="line">            label=<span class="string">"Alcohol-involved"</span>, color=<span class="string">"b"</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 设置第二个柱状图</span></span><br><span class="line"></span><br><span class="line">ax.legend(ncol=<span class="number">2</span>, loc=<span class="string">"lower right"</span>)</span><br><span class="line">sns.despine(left=<span class="literal">True</span>, bottom=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>    total  speeding  alcohol  not_distracted  no_previous  ins_premium  \40   23.9     9.082    9.799          22.944       19.359       858.97   34   23.9     5.497   10.038          23.661       20.554       688.75   48   23.8     8.092    6.664          23.086       20.706       992.61   3    22.4     4.032    5.824          21.056       21.280       827.34   17   21.4     4.066    4.922          16.692       16.264       872.51       ins_losses abbrev  40      116.29     SC  34      109.72     ND  48      152.56     WV  3       142.39     AR  17      137.13     KY  </code></pre><p><img src="output_64_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  countplot()</span></span><br><span class="line"><span class="comment"># 计数柱状图</span></span><br><span class="line"></span><br><span class="line">sns.countplot(x=<span class="string">"class"</span>, hue=<span class="string">"who"</span>, data=titanic,palette = <span class="string">'magma'</span>)</span><br><span class="line"><span class="comment">#sns.countplot(y="class", hue="who", data=titanic,palette = 'magma')  </span></span><br><span class="line"><span class="comment"># x/y → 以x或者y轴绘图（横向，竖向）</span></span><br><span class="line"><span class="comment"># 用法和barplot相似</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b22117aac8&gt;</code></pre><p><img src="output_65_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pointplot()</span></span><br><span class="line"><span class="comment"># 折线图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">sns.pointplot(x=<span class="string">"time"</span>, y=<span class="string">"total_bill"</span>, hue = <span class="string">'smoker'</span>,data=tips,</span><br><span class="line">              palette = <span class="string">'hls'</span>,</span><br><span class="line">              dodge = <span class="literal">True</span>,   <span class="comment"># 设置点是否分开</span></span><br><span class="line">              join = <span class="literal">True</span>,    <span class="comment"># 是否连线</span></span><br><span class="line">              markers=[<span class="string">"o"</span>, <span class="string">"x"</span>], linestyles=[<span class="string">"-"</span>, <span class="string">"--"</span>],  <span class="comment"># 设置点样式、线型</span></span><br><span class="line">              )</span><br><span class="line">tips.groupby([<span class="string">'time'</span>,<span class="string">'smoker'</span>]).mean()[<span class="string">'total_bill'</span>]</span><br><span class="line"><span class="comment"># 计算数据</span></span><br><span class="line"><span class="comment"># # 用法和barplot相似</span></span><br></pre></td></tr></table></figure><pre><code>time    smokerLunch   Yes       17.399130        No        17.050889Dinner  Yes       21.859429        No        20.095660Name: total_bill, dtype: float64</code></pre><p><img src="output_66_1.png" alt="png"></p><h1 id="5-线性数据可视化"><a href="#5-线性数据可视化" class="headerlink" title="5.线性数据可视化"></a>5.线性数据可视化</h1><h2 id="5-1基本使用"><a href="#5-1基本使用" class="headerlink" title="5.1基本使用"></a>5.1基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本用法</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, hue = <span class="string">'smoker'</span>,data=tips,palette=<span class="string">"Set1"</span>,</span><br><span class="line">           ci = <span class="number">70</span>,   <span class="comment"># 误差值</span></span><br><span class="line">           size = <span class="number">5</span>,  <span class="comment"># 图表大小</span></span><br><span class="line">           markers = [<span class="string">'+'</span>,<span class="string">'o'</span>],  <span class="comment"># 点样式</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><pre><code>   total_bill   tip     sex smoker  day    time  size0       16.99  1.01  Female     No  Sun  Dinner     21       10.34  1.66    Male     No  Sun  Dinner     32       21.01  3.50    Male     No  Sun  Dinner     33       23.68  3.31    Male     No  Sun  Dinner     24       24.59  3.61  Female     No  Sun  Dinner     4&lt;seaborn.axisgrid.FacetGrid at 0x1b21c57d7b8&gt;</code></pre><p><img src="output_68_2.png" alt="png"></p><h2 id="5-2-多表格"><a href="#5-2-多表格" class="headerlink" title="5.2 多表格"></a>5.2 多表格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, col=<span class="string">"smoker"</span>, data=tips)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x1b2215774e0&gt;</code></pre><p><img src="output_70_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多图表1</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"size"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>, col=<span class="string">"day"</span>,data=tips, </span><br><span class="line">           aspect=<span class="number">0.6</span>,    <span class="comment"># 长宽比</span></span><br><span class="line">           x_jitter=<span class="number">.30</span>,  <span class="comment"># 给x或者y轴随机增加噪音点</span></span><br><span class="line">           col_wrap=<span class="number">4</span>,    <span class="comment"># 每行的列数</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x1b2216276a0&gt;</code></pre><p><img src="output_71_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多图表2</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, row=<span class="string">"sex"</span>, col=<span class="string">"time"</span>,data=tips, size=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 行为sex字段，列为time字段</span></span><br><span class="line"><span class="comment"># x轴total_bill, y轴tip</span></span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x1b22160a400&gt;</code></pre><p><img src="output_72_1.png" alt="png"></p><h2 id="5-3-非线性回归"><a href="#5-3-非线性回归" class="headerlink" title="5.3 非线性回归"></a>5.3 非线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非线性回归</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>,data=tips,</span><br><span class="line">           order = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x1b2214d7b00&gt;</code></pre><p><img src="output_74_1.png" alt="png"></p><h1 id="6-其他图表可视化"><a href="#6-其他图表可视化" class="headerlink" title="6. 其他图表可视化"></a>6. 其他图表可视化</h1><h2 id="6-1-时间线图"><a href="#6-1-时间线图" class="headerlink" title="6.1 时间线图"></a>6.1 时间线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  tsplot()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">31</span>)</span><br><span class="line">data = np.sin(x) + np.random.rand(<span class="number">10</span>, <span class="number">31</span>) + np.random.randn(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#print(data.shape)</span></span><br><span class="line"><span class="comment">#print(pd.DataFrame(data).head())</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">sns.tsplot(data=data,</span><br><span class="line">           err_style=<span class="string">"ci_band"</span>,   <span class="comment"># 误差数据风格，可选：ci_band, ci_bars, boot_traces, boot_kde, unit_traces, unit_points</span></span><br><span class="line">           interpolate=<span class="literal">True</span>,      <span class="comment"># 是否连线</span></span><br><span class="line">           ci = [<span class="number">40</span>,<span class="number">70</span>,<span class="number">90</span>],       <span class="comment"># 设置误差区间 </span></span><br><span class="line">           color = <span class="string">'r'</span>            <span class="comment"># 设置颜色</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21668c860&gt;</code></pre><p><img src="output_76_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.tsplot(data=data, err_style=<span class="string">"boot_traces"</span>, </span><br><span class="line">           n_boot=<span class="number">300</span>   <span class="comment"># 迭代次数</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b216533048&gt;</code></pre><p><img src="output_77_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gammas = sns.load_dataset(<span class="string">"gammas"</span>)</span><br><span class="line">print(gammas.head())</span><br><span class="line">print(<span class="string">'数据量为：%i条'</span> % len(gammas))</span><br><span class="line">print(<span class="string">'timepoint为0.0时的数据量为：%i条'</span> % len(gammas[gammas[<span class="string">'timepoint'</span>] == <span class="number">0</span>]))</span><br><span class="line">print(<span class="string">'timepoint共有%i个唯一值'</span> % len(gammas[<span class="string">'timepoint'</span>].value_counts()))</span><br><span class="line"><span class="comment">#print(gammas['timepoint'].value_counts())  # 查看唯一值具体信息</span></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"></span><br><span class="line">sns.tsplot(time=<span class="string">"timepoint"</span>,     <span class="comment"># 时间数据，x轴</span></span><br><span class="line">           value=<span class="string">"BOLD signal"</span>,  <span class="comment"># y轴value</span></span><br><span class="line">           unit=<span class="string">"subject"</span>,       <span class="comment"># </span></span><br><span class="line">           condition=<span class="string">"ROI"</span>,      <span class="comment"># 分类</span></span><br><span class="line">           data=gammas)</span><br></pre></td></tr></table></figure><pre><code>   timepoint  ROI  subject  BOLD signal0        0.0  IPS        0     0.5134331        0.0  IPS        1    -0.4143682        0.0  IPS        2     0.2146953        0.0  IPS        3     0.8148094        0.0  IPS        4    -0.894992数据量为：6000条timepoint为0.0时的数据量为：60条timepoint共有100个唯一值&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b221f95a58&gt;</code></pre><p><img src="output_78_2.png" alt="png"></p><h2 id="6-2-热图"><a href="#6-2-热图" class="headerlink" title="6.2 热图"></a>6.2 热图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热图 - heatmap()</span></span><br><span class="line"><span class="comment"># 简单示例</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># 创建数据 - 10*12图表</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(df,    <span class="comment"># 加载数据</span></span><br><span class="line">            vmin=<span class="number">0</span>, vmax=<span class="number">1</span>   <span class="comment"># 设置图例最大最小值</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b221faac88&gt;</code></pre><p><img src="output_80_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># heatmap()</span></span><br><span class="line"><span class="comment"># 参数设置</span></span><br><span class="line"></span><br><span class="line">flights = sns.load_dataset(<span class="string">"flights"</span>)</span><br><span class="line">flights = flights.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>) </span><br><span class="line"><span class="comment">#print(flights.head())</span></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">           </span><br><span class="line">sns.heatmap(flights,</span><br><span class="line">            annot = <span class="literal">True</span>,      <span class="comment"># 是否显示数值</span></span><br><span class="line">            fmt = <span class="string">'d'</span>,         <span class="comment"># 格式化字符串</span></span><br><span class="line">            linewidths = <span class="number">0.2</span>,  <span class="comment"># 格子边线宽度</span></span><br><span class="line">            <span class="comment">#center = 100,      # 调色盘的色彩中心值，若没有指定，则以cmap为主</span></span><br><span class="line">            <span class="comment">#cmap = 'Reds',     # 设置调色盘</span></span><br><span class="line">            cbar = <span class="literal">True</span>,       <span class="comment"># 是否显示图例色带</span></span><br><span class="line">            <span class="comment">#cbar_kws=&#123;"orientation": "horizontal"&#125;,   # 是否横向显示图例色带</span></span><br><span class="line">            <span class="comment">#square = True,     # 是否正方形显示图表</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b223040588&gt;</code></pre><p><img src="output_81_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  heatmap()</span></span><br><span class="line"><span class="comment"># 绘制半边热图</span></span><br><span class="line"></span><br><span class="line">sns.set(style=<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">33</span>)</span><br><span class="line">d = pd.DataFrame(rs.normal(size=(<span class="number">100</span>, <span class="number">26</span>)))</span><br><span class="line">corr = d.corr()   <span class="comment"># 求解相关性矩阵表格</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">mask = np.zeros_like(corr, dtype=np.bool)</span><br><span class="line">mask[np.triu_indices_from(mask)] = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置一个“上三角形”蒙版</span></span><br><span class="line"></span><br><span class="line">cmap = sns.diverging_palette(<span class="number">220</span>, <span class="number">10</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 设置调色盘</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(corr, mask=mask, cmap=cmap, vmax=<span class="number">.3</span>, center=<span class="number">0</span>,</span><br><span class="line">            square=<span class="literal">True</span>, linewidths=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 生成半边热图</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b2231f3128&gt;</code></pre><p><img src="output_82_1.png" alt="png"></p><h2 id="6-3-图标矩阵"><a href="#6-3-图标矩阵" class="headerlink" title="6.3 图标矩阵"></a>6.3 图标矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">attend = sns.load_dataset(<span class="string">"attention"</span>)</span><br><span class="line">print(attend.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">g = sns.FacetGrid(attend, col=<span class="string">"subject"</span>, col_wrap=<span class="number">5</span>,   <span class="comment"># 设置每行的图表数量</span></span><br><span class="line">                  size=<span class="number">1.5</span>)</span><br><span class="line">g.map(plt.plot, <span class="string">"solutions"</span>, <span class="string">"score"</span>, </span><br><span class="line">      marker=<span class="string">"o"</span>,color = <span class="string">'gray'</span>,linewidth = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制图表矩阵</span></span><br><span class="line"></span><br><span class="line">g.set(xlim = (<span class="number">0</span>,<span class="number">4</span>),</span><br><span class="line">      ylim = (<span class="number">0</span>,<span class="number">10</span>),</span><br><span class="line">      xticks = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">      yticks = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">      )</span><br><span class="line"><span class="comment"># 设置x，y轴刻度</span></span><br></pre></td></tr></table></figure><pre><code>   Unnamed: 0  subject attention  solutions  score0           0        1   divided          1    2.01           1        2   divided          1    3.02           2        3   divided          1    3.03           3        4   divided          1    5.04           4        5   divided          1    4.0&lt;seaborn.axisgrid.FacetGrid at 0x1b22328cb00&gt;</code></pre><p><img src="output_84_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Seaborn风格可视化&quot;&gt;&lt;a href=&quot;#1-Seaborn风格可视化&quot; class=&quot;headerlink&quot; title=&quot;1.Seaborn风格可视化&quot;&gt;&lt;/a&gt;1.Seaborn风格可视化&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么事seaborn&quot;&gt;&lt;a href=&quot;#1-1-什么事seaborn&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么事seaborn&quot;&gt;&lt;/a&gt;1.1 什么事seaborn&lt;/h2&gt;&lt;p&gt;​       Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/10/02/pandas%E5%AE%9E%E8%B7%B5/pandas%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/10/02/pandas实践/pandas实践/</id>
    <published>2019-10-02T08:26:37.500Z</published>
    <updated>2019-10-02T08:27:53.982Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">data_01 = pd.read_csv(<span class="string">'data/data_01.csv'</span>)</span><br><span class="line">data_02 = pd.read_csv(<span class="string">'data/data_02.csv'</span>)</span><br><span class="line">data_03 = pd.read_csv(<span class="string">'data/data_03.csv'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="将三个数据合并"><a href="#将三个数据合并" class="headerlink" title="将三个数据合并"></a>将三个数据合并</h2><pre><code>concat(objs, axis,join)</code></pre><p>objs: series，dataframe或者pannel构成的list序列</p><p>axis: 需要合并链接的轴，0表示的是行，1表示的是列,默认为0</p><p>join: 表示连接方式，inner或者outer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.concat([data_01, data_02, data_03])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>cand_nm</th>      <th>contbr_nm</th>      <th>contbr_st</th>      <th>contbr_employer</th>      <th>contbr_occupation</th>      <th>contb_receipt_amt</th>      <th>contb_receipt_dt</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bachmann, Michelle</td>      <td>HARVEY, WILLIAM</td>      <td>AL</td>      <td>RETIRED</td>      <td>RETIRED</td>      <td>250.0</td>      <td>20-Jun-11</td>    </tr>    <tr>      <th>1</th>      <td>Bachmann, Michelle</td>      <td>HARVEY, WILLIAM</td>      <td>AL</td>      <td>RETIRED</td>      <td>RETIRED</td>      <td>50.0</td>      <td>23-Jun-11</td>    </tr>    <tr>      <th>2</th>      <td>Bachmann, Michelle</td>      <td>SMITH, LANIER</td>      <td>AL</td>      <td>INFORMATION REQUESTED</td>      <td>INFORMATION REQUESTED</td>      <td>250.0</td>      <td>5-Jul-11</td>    </tr>    <tr>      <th>3</th>      <td>Bachmann, Michelle</td>      <td>BLEVINS, DARONDA</td>      <td>AR</td>      <td>NONE</td>      <td>RETIRED</td>      <td>250.0</td>      <td>1-Aug-11</td>    </tr>    <tr>      <th>4</th>      <td>Bachmann, Michelle</td>      <td>WARDENBURG, HAROLD</td>      <td>AR</td>      <td>NONE</td>      <td>RETIRED</td>      <td>300.0</td>      <td>20-Jun-11</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 1001732 entries, 0 to 1730Data columns (total 7 columns):cand_nm              1001732 non-null objectcontbr_nm            1001732 non-null objectcontbr_st            1001728 non-null objectcontbr_employer      988003 non-null objectcontbr_occupation    993302 non-null objectcontb_receipt_amt    1001732 non-null float64contb_receipt_dt     1001732 non-null objectdtypes: float64(1), object(6)memory usage: 61.1+ MB</code></pre><h2 id="各字段含义"><a href="#各字段含义" class="headerlink" title="各字段含义"></a>各字段含义</h2><ul><li>cand_nm — 接受捐赠的候选人姓名</li><li>contbr_nm — 捐赠人姓名</li><li>contbr_st — 捐赠人所在州</li><li>contbr_employer — 捐赠人所在公司</li><li>contbr_occupation — 捐赠人职业</li><li>contb_receipt_amt — 捐赠数额（美元）</li><li>contb_receipt_dt — 收到捐款的日期</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>contb_receipt_amt</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1.001732e+06</td>    </tr>    <tr>      <th>mean</th>      <td>2.982358e+02</td>    </tr>    <tr>      <th>std</th>      <td>3.749665e+03</td>    </tr>    <tr>      <th>min</th>      <td>-3.080000e+04</td>    </tr>    <tr>      <th>25%</th>      <td>3.500000e+01</td>    </tr>    <tr>      <th>50%</th>      <td>1.000000e+02</td>    </tr>    <tr>      <th>75%</th>      <td>2.500000e+02</td>    </tr>    <tr>      <th>max</th>      <td>2.014491e+06</td>    </tr>  </tbody></table></div><h1 id="2-数据清洗"><a href="#2-数据清洗" class="headerlink" title="2.数据清洗"></a>2.数据清洗</h1><h2 id="2-1缺失值处理"><a href="#2-1缺失值处理" class="headerlink" title="2.1缺失值处理"></a>2.1缺失值处理</h2><p>dataframe.fillna()函数，对缺失值进行处理共有5个参数，功能是用指定的方法填充NA/NaN</p><ul><li>value: 变量，字典，Series or Dataframe</li><li>method: {‘backfill’,’bfill’,’pad’,’ffill’,None}，默认值为None，pad/ffill表示用前一个非缺失值去填充缺失值<br>backfill/bfill表示用下一个非缺失值填充该缺失值，None指定一个值去代替缺失值</li><li>inplace: True or False，True表示在原始数据上修改，False表示创建一个副本在副本上修改</li><li>limit: int，表示连续填充最大值，默认为None</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将两个字段用NOT PROVIDED填充</span></span><br><span class="line">data[<span class="string">'contbr_employer'</span>].fillna(<span class="string">'NOT PROVIDED'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">data[<span class="string">'contbr_occupation'</span>].fillna(<span class="string">'NOT PROVIDED'</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'一共有&#123;&#125;位候选人'</span>.format(len(data[<span class="string">'cand_nm'</span>].unique())))</span><br></pre></td></tr></table></figure><pre><code>一共有13位候选人</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似SQL中的distinct操作</span></span><br><span class="line">data[<span class="string">'cand_nm'</span>].unique()</span><br></pre></td></tr></table></figure><pre><code>array([&#39;Bachmann, Michelle&#39;, &#39;Romney, Mitt&#39;, &#39;Obama, Barack&#39;,       &quot;Roemer, Charles E. &#39;Buddy&#39; III&quot;, &#39;Pawlenty, Timothy&#39;,       &#39;Johnson, Gary Earl&#39;, &#39;Paul, Ron&#39;, &#39;Santorum, Rick&#39;,       &#39;Cain, Herman&#39;, &#39;Gingrich, Newt&#39;, &#39;McCotter, Thaddeus G&#39;,       &#39;Huntsman, Jon&#39;, &#39;Perry, Rick&#39;], dtype=object)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">parties = &#123;<span class="string">'Bachmann, Michelle'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Cain, Herman'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Gingrich, Newt'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Huntsman, Jon'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Johnson, Gary Earl'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'McCotter, Thaddeus G'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Obama, Barack'</span>: <span class="string">'Democrat'</span>,</span><br><span class="line">           <span class="string">'Paul, Ron'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Pawlenty, Timothy'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Perry, Rick'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">"Roemer, Charles E. 'Buddy' III"</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Romney, Mitt'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Santorum, Rick'</span>: <span class="string">'Republican'</span>&#125;</span><br><span class="line">data[<span class="string">'party'</span>] = data[<span class="string">'cand_nm'</span>].map(parties)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'party'</span>].value_counts()</span><br></pre></td></tr></table></figure><pre><code>Democrat      593747Republican    407985Name: party, dtype: int64</code></pre><h2 id="排序，按照职业汇总对赞助金额进行排序"><a href="#排序，按照职业汇总对赞助金额进行排序" class="headerlink" title="排序，按照职业汇总对赞助金额进行排序"></a>排序，按照职业汇总对赞助金额进行排序</h2><p>按照各个职位进行汇总，计算赞助总金额展示前20项，发现不少职业是相同的，只不过表达方式不一样，如C.E.O和CEO</p><pre><code>DataFrame.sort_value(by,ascengding=True,inplace=False)</code></pre><ul><li>by表示根据那一项排序，可以传入多列值</li><li>ascending=True表示升序，False表示降序，inplace=True表示修复原dataframe，默认为False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.groupby(<span class="string">'contbr_occupation'</span>)[<span class="string">'contb_receipt_amt'</span>].sum().sort_values(ascending=<span class="literal">False</span>)[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>contbr_occupationRETIRED                                   48176397.00ATTORNEY                                  18470473.30HOMEMAKER                                 17484807.65INFORMATION REQUESTED PER BEST EFFORTS    15859514.55INFORMATION REQUESTED                      8742357.59PHYSICIAN                                  7224044.40PRESIDENT                                  6347843.59EXECUTIVE                                  5273717.90CONSULTANT                                 4932627.98NOT PROVIDED                               4224760.39CEO                                        3570942.20LAWYER                                     3537982.19OWNER                                      3278488.16INVESTOR                                   3204481.92ENGINEER                                   2730527.43PROFESSOR                                  2458033.81C.E.O.                                     2433218.11SELF-EMPLOYED                              2259150.94MANAGER                                    2167571.47REAL ESTATE                                2110499.34Name: contb_receipt_amt, dtype: float64</code></pre><h2 id="利用函数进行数据转换-职业和雇主信息分析"><a href="#利用函数进行数据转换-职业和雇主信息分析" class="headerlink" title="利用函数进行数据转换:职业和雇主信息分析"></a>利用函数进行数据转换:职业和雇主信息分析</h2><p>许多职业都涉及基本相同的工作类型，下面我们来清理下这样的数据(利用了dict.get)</p><p>dict.get(key, default=None)</p><p>参数类型</p><ul><li>key: 字典中要查找的键</li><li>defult：如何字典中键不存在，默认返回default</li></ul><p>下面例子中get(x, x)，意思是如果不存在x，如果没有找到对应的映射，就返回原来的值，如果找到了对应的映射，就返回键指定的值。</p><pre><code>map(function, iterable)</code></pre><p>map函数是根据提供的函数对指定的序列做映射。</p><p>第一个参数function是函数，后面的每一个元素都会调用function函数，返回包含每次function函数返回的新列表</p><p><strong>返回值</strong>:</p><ul><li>python 2.x 返回列表</li><li>python 3.x 返回迭代器</li></ul><p>像列表、元组、字符串、字典等都是可迭代对象，每次从中取出一个数的过程便叫做迭代</p><p>next函数表示访问迭代器的下一条数据</p><p>迭代器生成方式,，data可以表示为数据也可以表示为</p><pre><code>iterator=iter(data)</code></pre><p>迭代器用来帮助我们记录每次迭代访问到的位置，当我们对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。</p><pre><code>for item in Iterable</code></pre><p>循环的本质就是先通过iter()函数获取可迭代对象Iterable的迭代器，然后对获取到的迭代器不断调用next()方法来获取下一个值并将其赋值给item</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line">y = map(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(next(y))</span><br><span class="line">print(next(y))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><pre><code>1491625</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立一个职业对应字典，把相同职业的不同表达映射为对应的职业，比如把C.E.O.映射为CEO</span></span><br><span class="line">occupation_map = &#123;</span><br><span class="line">  <span class="string">'INFORMATION REQUESTED PER BEST EFFORTS'</span>:<span class="string">'NOT PROVIDED'</span>,</span><br><span class="line">  <span class="string">'INFORMATION REQUESTED'</span>:<span class="string">'NOT PROVIDED'</span>,</span><br><span class="line">  <span class="string">'SELF'</span> : <span class="string">'SELF-EMPLOYED'</span>,</span><br><span class="line">  <span class="string">'SELF EMPLOYED'</span> : <span class="string">'SELF-EMPLOYED'</span>,</span><br><span class="line">  <span class="string">'C.E.O.'</span>:<span class="string">'CEO'</span>,</span><br><span class="line">  <span class="string">'LAWYER'</span>:<span class="string">'ATTORNEY'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不在字典中，返回x</span></span><br><span class="line">f = <span class="keyword">lambda</span> x: occupation_map.get(x, x)</span><br><span class="line">data.contbr_occupation = data.contbr_occupation.map(f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span><br></pre></td></tr></table></figure><pre><code>&lt;map at 0x1fb229bc4a8&gt;</code></pre><h1 id="2-3-数据筛选"><a href="#2-3-数据筛选" class="headerlink" title="2.3 数据筛选"></a>2.3 数据筛选</h1><font size="5">赞助商金额筛选</font> <p>赞助包括退款(负的出资额)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = data[data[<span class="string">'contb_receipt_amt'</span>]&gt;<span class="number">0</span>]</span><br></pre></td></tr></table></figure><font size="5">候选人筛选</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.groupby(<span class="string">'cand_nm'</span>)[<span class="string">'contb_receipt_amt'</span>].sum().sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><pre><code>cand_nmObama, Barack                     1.358776e+08Romney, Mitt                      8.833591e+07Paul, Ron                         2.100962e+07Perry, Rick                       2.030675e+07Gingrich, Newt                    1.283277e+07Santorum, Rick                    1.104316e+07Cain, Herman                      7.101082e+06Pawlenty, Timothy                 6.004819e+06Huntsman, Jon                     3.330373e+06Bachmann, Michelle                2.711189e+06Johnson, Gary Earl                5.669616e+05Roemer, Charles E. &#39;Buddy&#39; III    3.730099e+05McCotter, Thaddeus G              3.903000e+04Name: contb_receipt_amt, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取候选人为Obama、Romneyd的子数据集</span></span><br><span class="line">data_vs = data[data[<span class="string">'cand_nm'</span>].isin([<span class="string">'Romney, Mitt'</span>,<span class="string">'Obama, Barack'</span>])].copy()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_vs.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 694283 entries, 410 to 201385Data columns (total 8 columns):cand_nm              694283 non-null objectcontbr_nm            694283 non-null objectcontbr_st            694279 non-null objectcontbr_employer      694283 non-null objectcontbr_occupation    694283 non-null objectcontb_receipt_amt    694283 non-null float64contb_receipt_dt     694283 non-null objectparty                694283 non-null objectdtypes: float64(1), object(7)memory usage: 47.7+ MB</code></pre><h2 id="2-4-面元化数据"><a href="#2-4-面元化数据" class="headerlink" title="2.4 面元化数据"></a>2.4 面元化数据</h2><p>利用cut函数根据出资额大小将数据离散化到多个面源当中</p><p>pandas.cut函数作用</p><p>将数据离散化统计区间段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bins = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>,<span class="number">100000</span>,<span class="number">1000000</span>,<span class="number">10000000</span>])</span><br><span class="line">labels = pd.cut(data_vs[<span class="string">'contb_receipt_amt'</span>],bins)</span><br><span class="line">labels</span><br></pre></td></tr></table></figure><pre><code>410           (10, 100]411         (100, 1000]412         (100, 1000]413           (10, 100]414           (10, 100]415           (10, 100]416         (100, 1000]417           (10, 100]418         (100, 1000]419           (10, 100]420           (10, 100]421         (100, 1000]422         (100, 1000]423         (100, 1000]424         (100, 1000]425         (100, 1000]426       (1000, 10000]427         (100, 1000]428         (100, 1000]429           (10, 100]430       (1000, 10000]431         (100, 1000]432         (100, 1000]433         (100, 1000]434         (100, 1000]435         (100, 1000]436           (10, 100]437         (100, 1000]438         (100, 1000]439           (10, 100]              ...      201356        (10, 100]201357          (1, 10]201358        (10, 100]201359        (10, 100]201360        (10, 100]201361        (10, 100]201362      (100, 1000]201363        (10, 100]201364        (10, 100]201365        (10, 100]201366        (10, 100]201367        (10, 100]201368      (100, 1000]201369        (10, 100]201370        (10, 100]201371        (10, 100]201372        (10, 100]201373        (10, 100]201374        (10, 100]201375        (10, 100]201376    (1000, 10000]201377        (10, 100]201378        (10, 100]201379      (100, 1000]201380    (1000, 10000]201381        (10, 100]201382      (100, 1000]201383          (1, 10]201384        (10, 100]201385      (100, 1000]Name: contb_receipt_amt, Length: 694283, dtype: categoryCategories (8, interval[int64]): [(0, 1] &lt; (1, 10] &lt; (10, 100] &lt; (100, 1000] &lt; (1000, 10000] &lt; (10000, 100000] &lt; (100000, 1000000] &lt; (1000000, 10000000]]</code></pre><h1 id="3-数据聚合和分组运算"><a href="#3-数据聚合和分组运算" class="headerlink" title="3. 数据聚合和分组运算"></a>3. 数据聚合和分组运算</h1><p>分组计算Grouping，分组运算是一个“split-apply-combine”的过程：</p><ul><li>拆分，pandas对象中的数据会根据你所提供的一个或多个键被拆分为多组</li><li>应用，将一个函数应用到各个分组并产生一个新值</li><li>合并，所有这些函数的执行结果会合并到最终的结果对象中</li></ul><h2 id="3-1-透视表"><a href="#3-1-透视表" class="headerlink" title="3.1 透视表"></a>3.1 透视表</h2><p>利用pivot_table对数据进行分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照党派、职业对赞助金额进行汇总，类似excel中的透视表操作，聚合函数为sum</span></span><br><span class="line">by_occupation = data.pivot_table(<span class="string">'contb_receipt_amt'</span>, index=<span class="string">'contbr_occupation'</span>, columns=<span class="string">'party'</span>, aggfunc=<span class="string">'sum'</span>)</span><br><span class="line"><span class="comment"># 过滤掉赞助数小于200w的数据</span></span><br><span class="line">over_2mm = by_occupation[by_occupation.sum(<span class="number">1</span>)&gt;<span class="number">2000000</span>]</span><br><span class="line">over_2mm</span><br></pre></td></tr></table></figure><p>&lt;/style&gt;</p><p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>party</th>      <th>Democrat</th>      <th>Republican</th>    </tr>    <tr>      <th>contbr_occupation</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>ATTORNEY</th>      <td>14302461.84</td>      <td>7.868419e+06</td>    </tr>    <tr>      <th>CEO</th>      <td>2074974.79</td>      <td>4.211041e+06</td>    </tr>    <tr>      <th>CONSULTANT</th>      <td>2459912.71</td>      <td>2.544725e+06</td>    </tr>    <tr>      <th>ENGINEER</th>      <td>951525.55</td>      <td>1.818374e+06</td>    </tr>    <tr>      <th>EXECUTIVE</th>      <td>1355161.05</td>      <td>4.138850e+06</td>    </tr>    <tr>      <th>HOMEMAKER</th>      <td>4248875.80</td>      <td>1.363428e+07</td>    </tr>    <tr>      <th>INVESTOR</th>      <td>884133.00</td>      <td>2.431769e+06</td>    </tr>    <tr>      <th>MANAGER</th>      <td>762883.22</td>      <td>1.444532e+06</td>    </tr>    <tr>      <th>NOT PROVIDED</th>      <td>13725187.32</td>      <td>2.097161e+07</td>    </tr>    <tr>      <th>OWNER</th>      <td>1001567.36</td>      <td>2.408287e+06</td>    </tr>    <tr>      <th>PHYSICIAN</th>      <td>3735124.94</td>      <td>3.594320e+06</td>    </tr>    <tr>      <th>PRESIDENT</th>      <td>1878509.95</td>      <td>4.720924e+06</td>    </tr>    <tr>      <th>PROFESSOR</th>      <td>2165071.08</td>      <td>2.967027e+05</td>    </tr>    <tr>      <th>REAL ESTATE</th>      <td>528902.09</td>      <td>1.625902e+06</td>    </tr>    <tr>      <th>RETIRED</th>      <td>25305316.38</td>      <td>2.356099e+07</td>    </tr>    <tr>      <th>SELF-EMPLOYED</th>      <td>741746.40</td>      <td>2.245273e+06</td>    </tr>  </tbody></table><br>&lt;/div&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">over_2mm.plot(kind=<span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb229e5080&gt;</code></pre><p><img src="output_30_1.png" alt="png"></p><h2 id="3-2分组级运算和转换"><a href="#3-2分组级运算和转换" class="headerlink" title="3.2分组级运算和转换"></a>3.2分组级运算和转换</h2><p>根据职业和雇主信息分组运算</p><p>了解Obama和Romney总出资最高的职业和雇主</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_top_amounts</span><span class="params">(group, key, n=<span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 传入group by分组的对象，返回key字段排序的前n个数据</span></span><br><span class="line">    totals = group.groupby(key)[<span class="string">'contb_receipt_amt'</span>].sum()</span><br><span class="line">    <span class="keyword">return</span> totals.sort_values(ascending=<span class="literal">False</span>)[:n]</span><br><span class="line"></span><br><span class="line">grouped = data_vs.groupby(<span class="string">'cand_nm'</span>)</span><br><span class="line">grouped.apply(get_top_amounts, <span class="string">'contbr_occupation'</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><pre><code>cand_nm        contbr_occupationObama, Barack  RETIRED              25305316.38               ATTORNEY             14302461.84               NOT PROVIDED         13725187.32               HOMEMAKER             4248875.80               PHYSICIAN             3735124.94               CONSULTANT            2459912.71               PROFESSOR             2165071.08Romney, Mitt   NOT PROVIDED         11638509.84               RETIRED              11508473.59               HOMEMAKER             8147446.22               ATTORNEY              5372424.02               PRESIDENT             2491244.89               CEO                   2324297.03               EXECUTIVE             2300947.03Name: contb_receipt_amt, dtype: float64</code></pre><p>从数据看出Obama更受精英群体(律师、医生、咨询顾问)的欢迎，Romney更受企业家欢迎</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grouped.apply(get_top_amounts, <span class="string">'contbr_employer'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><pre><code>cand_nm        contbr_employer                       Obama, Barack  RETIRED                                   22694558.85               SELF-EMPLOYED                             17080985.96               NOT PROVIDED                               8830013.66               NOT EMPLOYED                               8586308.70               INFORMATION REQUESTED                      5053480.37               HOMEMAKER                                  2605408.54               SELF                                       1076531.20               SELF EMPLOYED                               469290.00               STUDENT                                     318831.45               VOLUNTEER                                   257104.00Romney, Mitt   INFORMATION REQUESTED PER BEST EFFORTS    12059527.24               RETIRED                                   11506225.71               HOMEMAKER                                  8147196.22               SELF-EMPLOYED                              7409860.98               STUDENT                                     496490.94               CREDIT SUISSE                               281150.00               MORGAN STANLEY                              267266.00               NOT PROVIDED                                262204.00               GOLDMAN SACH &amp; CO.                          238250.00               BARCLAYS CAPITAL                            162750.00Name: contb_receipt_amt, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对赞助金额进行分组分析</span></span><br><span class="line">grouped_bins = data_vs.groupby([<span class="string">'cand_nm'</span>, labels])</span><br><span class="line">grouped_bins.size().unstack(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>cand_nm</th>      <th>Obama, Barack</th>      <th>Romney, Mitt</th>    </tr>    <tr>      <th>contb_receipt_amt</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>(0, 1]</th>      <td>493.0</td>      <td>77.0</td>    </tr>    <tr>      <th>(1, 10]</th>      <td>40070.0</td>      <td>3681.0</td>    </tr>    <tr>      <th>(10, 100]</th>      <td>372280.0</td>      <td>31853.0</td>    </tr>    <tr>      <th>(100, 1000]</th>      <td>153992.0</td>      <td>43357.0</td>    </tr>    <tr>      <th>(1000, 10000]</th>      <td>22284.0</td>      <td>26186.0</td>    </tr>    <tr>      <th>(10000, 100000]</th>      <td>2.0</td>      <td>1.0</td>    </tr>    <tr>      <th>(100000, 1000000]</th>      <td>3.0</td>      <td>NaN</td>    </tr>    <tr>      <th>(1000000, 10000000]</th>      <td>4.0</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grouped_bins.size()</span><br></pre></td></tr></table></figure><pre><code>cand_nm        contb_receipt_amt  Obama, Barack  (0, 1]                    493               (1, 10]                 40070               (10, 100]              372280               (100, 1000]            153992               (1000, 10000]           22284               (10000, 100000]             2               (100000, 1000000]           3               (1000000, 10000000]         4Romney, Mitt   (0, 1]                     77               (1, 10]                  3681               (10, 100]               31853               (100, 1000]             43357               (1000, 10000]           26186               (10000, 100000]             1dtype: int64</code></pre><p>统计各个区间的赞助金额</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bucket_sums = grouped_bins[<span class="string">'contb_receipt_amt'</span>].sum().unstack(<span class="number">0</span>)</span><br><span class="line">bucket_sums</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>cand_nm</th>      <th>Obama, Barack</th>      <th>Romney, Mitt</th>    </tr>    <tr>      <th>contb_receipt_amt</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>(0, 1]</th>      <td>318.24</td>      <td>77.00</td>    </tr>    <tr>      <th>(1, 10]</th>      <td>337267.62</td>      <td>29819.66</td>    </tr>    <tr>      <th>(10, 100]</th>      <td>20288981.41</td>      <td>1987783.76</td>    </tr>    <tr>      <th>(100, 1000]</th>      <td>54798731.46</td>      <td>22363381.69</td>    </tr>    <tr>      <th>(1000, 10000]</th>      <td>51753705.67</td>      <td>63942145.42</td>    </tr>    <tr>      <th>(10000, 100000]</th>      <td>59100.00</td>      <td>12700.00</td>    </tr>    <tr>      <th>(100000, 1000000]</th>      <td>1490683.08</td>      <td>NaN</td>    </tr>    <tr>      <th>(1000000, 10000000]</th>      <td>7148839.76</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bucket_sums.plot(kind=<span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb22976fd0&gt;</code></pre><p><img src="output_39_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百分比堆积图，计算两位候选人收到赞助总金额的占比</span></span><br><span class="line">normed_sums = bucket_sums.div(bucket_sums.sum(axis=<span class="number">1</span>),axis=<span class="number">0</span>)</span><br><span class="line">normed_sums</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>cand_nm</th>      <th>Obama, Barack</th>      <th>Romney, Mitt</th>    </tr>    <tr>      <th>contb_receipt_amt</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>(0, 1]</th>      <td>0.805182</td>      <td>0.194818</td>    </tr>    <tr>      <th>(1, 10]</th>      <td>0.918767</td>      <td>0.081233</td>    </tr>    <tr>      <th>(10, 100]</th>      <td>0.910769</td>      <td>0.089231</td>    </tr>    <tr>      <th>(100, 1000]</th>      <td>0.710177</td>      <td>0.289823</td>    </tr>    <tr>      <th>(1000, 10000]</th>      <td>0.447326</td>      <td>0.552674</td>    </tr>    <tr>      <th>(10000, 100000]</th>      <td>0.823120</td>      <td>0.176880</td>    </tr>    <tr>      <th>(100000, 1000000]</th>      <td>1.000000</td>      <td>NaN</td>    </tr>    <tr>      <th>(1000000, 10000000]</th>      <td>1.000000</td>      <td>NaN</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是用柱状图，指定stack=True进行队列</span></span><br><span class="line">normed_sums[:<span class="number">-2</span>].plot(kind=<span class="string">'bar'</span>,stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb22138e48&gt;</code></pre><p><img src="output_41_1.png" alt="png"></p><p>在小额赞助方面，Obama获取的数量和金额比Romney多得多</p><h2 id="按照赞助人姓名分组，计算重复赞助次数最多的前20人"><a href="#按照赞助人姓名分组，计算重复赞助次数最多的前20人" class="headerlink" title="按照赞助人姓名分组，计算重复赞助次数最多的前20人"></a>按照赞助人姓名分组，计算重复赞助次数最多的前20人</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.groupby(<span class="string">'contbr_nm'</span>)[<span class="string">'contbr_nm'</span>].count().sort_values(ascending=<span class="literal">False</span>)[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>contbr_nmWILLIAMS, DEBBY          205BERKE, DAVID MICHAEL     171SEBAG, DAVID             161SMITH, ERIK              145FALLSGRAFF, TOBY         138SKINNER, DONNA           136CASPERSON, CAROLINA      132HARRIS, CLAUDIA W.       132ROSBERG, MARILYN         115POTTS, LILLIE            114DUDLEY, DEBBIE           111HAUGHEY, NOEL ANTHONY    107DFHDFH, DFHDFH            96SHERWIN, GLEN R.          94MITCHELL, CAITLIN         90SMITH, CHARLES            88NURU, ISAAC               87KARIMIAN, AFSANEH         87BIRMINGHAM, TOM           85MASTERS, MARGERY          85Name: contbr_nm, dtype: int64</code></pre><h1 id="4-事件处理"><a href="#4-事件处理" class="headerlink" title="4. 事件处理"></a>4. 事件处理</h1><h2 id="4-1-str转datetime"><a href="#4-1-str转datetime" class="headerlink" title="4.1 str转datetime"></a>4.1 str转datetime</h2><p>我们可以使用to_datetime方法解析多种不同的日期表示形式。对标准日期格式（如ISO8601）的解析非常快。我们也可以指定特定的日期解析格式，如pd.to_datetime(series,format=’%Y%m%d’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_vs[<span class="string">'time'</span>] = pd.to_datetime(data_vs[<span class="string">'contb_receipt_dt'</span>])</span><br></pre></td></tr></table></figure><h2 id="4-2以时间作为索引"><a href="#4-2以时间作为索引" class="headerlink" title="4.2以时间作为索引"></a>4.2以时间作为索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_vs.set_index(<span class="string">'time'</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">data_vs.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>cand_nm</th>      <th>contbr_nm</th>      <th>contbr_st</th>      <th>contbr_employer</th>      <th>contbr_occupation</th>      <th>contb_receipt_amt</th>      <th>contb_receipt_dt</th>      <th>party</th>    </tr>    <tr>      <th>time</th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2012-02-01</th>      <td>Romney, Mitt</td>      <td>ELDERBAUM, WILLIAM</td>      <td>AA</td>      <td>US GOVERNMENT</td>      <td>FOREIGN SERVICE OFFICER</td>      <td>25.0</td>      <td>1-Feb-12</td>      <td>Republican</td>    </tr>    <tr>      <th>2012-02-01</th>      <td>Romney, Mitt</td>      <td>ELDERBAUM, WILLIAM</td>      <td>AA</td>      <td>US GOVERNMENT</td>      <td>FOREIGN SERVICE OFFICER</td>      <td>110.0</td>      <td>1-Feb-12</td>      <td>Republican</td>    </tr>    <tr>      <th>2012-04-13</th>      <td>Romney, Mitt</td>      <td>CARLSEN, RICHARD</td>      <td>AE</td>      <td>DEFENSE INTELLIGENCE AGENCY</td>      <td>INTELLIGENCE ANALYST</td>      <td>250.0</td>      <td>13-Apr-12</td>      <td>Republican</td>    </tr>    <tr>      <th>2011-08-21</th>      <td>Romney, Mitt</td>      <td>DELUCA, PIERRE</td>      <td>AE</td>      <td>CISCO</td>      <td>ENGINEER</td>      <td>30.0</td>      <td>21-Aug-11</td>      <td>Republican</td>    </tr>    <tr>      <th>2012-03-07</th>      <td>Romney, Mitt</td>      <td>SARGENT, MICHAEL</td>      <td>AE</td>      <td>RAYTHEON TECHNICAL SERVICES CORP</td>      <td>COMPUTER SYSTEMS ENGINEER</td>      <td>100.0</td>      <td>7-Mar-12</td>      <td>Republican</td>    </tr>  </tbody></table></div><h2 id="4-3-重采样和频率转换"><a href="#4-3-重采样和频率转换" class="headerlink" title="4.3 重采样和频率转换"></a>4.3 重采样和频率转换</h2><p>重采样(Resampling) 指的是将时间序列的频度变成另一个频度的过程。把高频度的数据变为低频度叫做降采样(downsampling),resample会对数据进行分组，然后在调用聚合函数。这里我们把频率从每日变成每月，属于高频转低频的降采样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vs_time = data_vs.groupby(<span class="string">'cand_nm'</span>).resample(<span class="string">'M'</span>)[<span class="string">'cand_nm'</span>].count()</span><br><span class="line">vs_time.unstack(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>cand_nm</th>      <th>Obama, Barack</th>      <th>Romney, Mitt</th>    </tr>    <tr>      <th>time</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>2011-04-30</th>      <td>13830</td>      <td>1096</td>    </tr>    <tr>      <th>2011-05-31</th>      <td>12182</td>      <td>4163</td>    </tr>    <tr>      <th>2011-06-30</th>      <td>25626</td>      <td>5757</td>    </tr>    <tr>      <th>2011-07-31</th>      <td>12372</td>      <td>2454</td>    </tr>    <tr>      <th>2011-08-31</th>      <td>19860</td>      <td>3226</td>    </tr>    <tr>      <th>2011-09-30</th>      <td>46927</td>      <td>7968</td>    </tr>    <tr>      <th>2011-10-31</th>      <td>25941</td>      <td>5349</td>    </tr>    <tr>      <th>2011-11-30</th>      <td>32629</td>      <td>7737</td>    </tr>    <tr>      <th>2011-12-31</th>      <td>63562</td>      <td>10289</td>    </tr>    <tr>      <th>2012-01-31</th>      <td>40055</td>      <td>9431</td>    </tr>    <tr>      <th>2012-02-29</th>      <td>66416</td>      <td>13396</td>    </tr>    <tr>      <th>2012-03-31</th>      <td>123564</td>      <td>17807</td>    </tr>    <tr>      <th>2012-04-30</th>      <td>106164</td>      <td>16482</td>    </tr>  </tbody></table></div><p>plt.subpolots((nrows=1, ncols=1，figsize=(32,8))</p><p>表示在画布上面创建一个一行一列的的画布，大小为(32,8)</p><p>两个返回值一个是fig图像,另一个是子图ax的array列表。</p><p>vs_time可以理解为对该子图进行数据填充</p><p>unstack 表示将花括号结构变成表结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fig1,ax1 = plt.subplots(figsize=(<span class="number">32</span>,<span class="number">8</span>))</span><br><span class="line">vs_time.unstack(<span class="number">0</span>).plot(kind=<span class="string">'area'</span>,ax=ax1,alpha=<span class="number">0.6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_52_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">data=DataFrame(np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>,<span class="number">3</span>)),index=pd.Index([<span class="string">'street1'</span>,<span class="string">'street2'</span>]),columns=pd.Index([<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]))</span><br><span class="line">print(data)</span><br><span class="line">print(<span class="string">'-----------------------------------------\n'</span>)</span><br><span class="line">data2=data.stack()</span><br><span class="line">data3=data2.unstack()</span><br><span class="line">print(data2)</span><br><span class="line">print(<span class="string">'-----------------------------------------\n'</span>)</span><br><span class="line">print(data3)</span><br></pre></td></tr></table></figure><pre><code>         one  two  threestreet1    0    1      2street2    3    4      5-----------------------------------------street1  one      0         two      1         three    2street2  one      3         two      4         three    5dtype: int32-----------------------------------------         one  two  threestreet1    0    1      2street2    3    4      5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加载数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_01 = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&#39;data/data_01.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_02 = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&#39;data/data_02.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_03 = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&#39;data/data_03.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/09/24/pandas%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/09/24/pandas实践/</id>
    <published>2019-09-23T16:18:25.235Z</published>
    <updated>2019-10-01T15:05:02.388Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">data_01 = pd.read_csv(<span class="string">'data/data_01.csv'</span>)</span><br><span class="line">data_02 = pd.read_csv(<span class="string">'data/data_02.csv'</span>)</span><br><span class="line">data_03 = pd.read_csv(<span class="string">'data/data_03.csv'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="将三个数据合并"><a href="#将三个数据合并" class="headerlink" title="将三个数据合并"></a>将三个数据合并</h2><pre><code>concat(objs, axis,join)</code></pre><p>objs: series，dataframe或者pannel构成的list序列</p><p>axis: 需要合并链接的轴，0表示的是行，1表示的是列,默认为0</p><p>join: 表示连接方式，inner或者outer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data = pd.concat([data_01, data_02, data_03])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>cand_nm</th>      <th>contbr_nm</th>      <th>contbr_st</th>      <th>contbr_employer</th>      <th>contbr_occupation</th>      <th>contb_receipt_amt</th>      <th>contb_receipt_dt</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bachmann, Michelle</td>      <td>HARVEY, WILLIAM</td>      <td>AL</td>      <td>RETIRED</td>      <td>RETIRED</td>      <td>250.0</td>      <td>20-Jun-11</td>    </tr>    <tr>      <th>1</th>      <td>Bachmann, Michelle</td>      <td>HARVEY, WILLIAM</td>      <td>AL</td>      <td>RETIRED</td>      <td>RETIRED</td>      <td>50.0</td>      <td>23-Jun-11</td>    </tr>    <tr>      <th>2</th>      <td>Bachmann, Michelle</td>      <td>SMITH, LANIER</td>      <td>AL</td>      <td>INFORMATION REQUESTED</td>      <td>INFORMATION REQUESTED</td>      <td>250.0</td>      <td>5-Jul-11</td>    </tr>    <tr>      <th>3</th>      <td>Bachmann, Michelle</td>      <td>BLEVINS, DARONDA</td>      <td>AR</td>      <td>NONE</td>      <td>RETIRED</td>      <td>250.0</td>      <td>1-Aug-11</td>    </tr>    <tr>      <th>4</th>      <td>Bachmann, Michelle</td>      <td>WARDENBURG, HAROLD</td>      <td>AR</td>      <td>NONE</td>      <td>RETIRED</td>      <td>300.0</td>      <td>20-Jun-11</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 1001732 entries, 0 to 1730Data columns (total 7 columns):cand_nm              1001732 non-null objectcontbr_nm            1001732 non-null objectcontbr_st            1001728 non-null objectcontbr_employer      988003 non-null objectcontbr_occupation    993302 non-null objectcontb_receipt_amt    1001732 non-null float64contb_receipt_dt     1001732 non-null objectdtypes: float64(1), object(6)memory usage: 61.1+ MB</code></pre><h2 id="各字段含义"><a href="#各字段含义" class="headerlink" title="各字段含义"></a>各字段含义</h2><ul><li>cand_nm — 接受捐赠的候选人姓名</li><li>contbr_nm — 捐赠人姓名</li><li>contbr_st — 捐赠人所在州</li><li>contbr_employer — 捐赠人所在公司</li><li>contbr_occupation — 捐赠人职业</li><li>contb_receipt_amt — 捐赠数额（美元）</li><li>contb_receipt_dt — 收到捐款的日期</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>contb_receipt_amt</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>1.001732e+06</td>    </tr>    <tr>      <th>mean</th>      <td>2.982358e+02</td>    </tr>    <tr>      <th>std</th>      <td>3.749665e+03</td>    </tr>    <tr>      <th>min</th>      <td>-3.080000e+04</td>    </tr>    <tr>      <th>25%</th>      <td>3.500000e+01</td>    </tr>    <tr>      <th>50%</th>      <td>1.000000e+02</td>    </tr>    <tr>      <th>75%</th>      <td>2.500000e+02</td>    </tr>    <tr>      <th>max</th>      <td>2.014491e+06</td>    </tr>  </tbody></table></div><h1 id="2-数据清洗"><a href="#2-数据清洗" class="headerlink" title="2.数据清洗"></a>2.数据清洗</h1><h2 id="2-1缺失值处理"><a href="#2-1缺失值处理" class="headerlink" title="2.1缺失值处理"></a>2.1缺失值处理</h2><p>dataframe.fillna()函数，对缺失值进行处理共有5个参数，功能是用指定的方法填充NA/NaN</p><ul><li>value: 变量，字典，Series or Dataframe</li><li>method: {‘backfill’,’bfill’,’pad’,’ffill’,None}，默认值为None，pad/ffill表示用前一个非缺失值去填充缺失值<br>backfill/bfill表示用下一个非缺失值填充该缺失值，None指定一个值去代替缺失值</li><li>inplace: True or False，True表示在原始数据上修改，False表示创建一个副本在副本上修改</li><li>limit: int，表示连续填充最大值，默认为None</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将两个字段用NOT PROVIDED填充</span></span><br><span class="line">data[<span class="string">'contbr_employer'</span>].fillna(<span class="string">'NOT PROVIDED'</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">data[<span class="string">'contbr_occupation'</span>].fillna(<span class="string">'NOT PROVIDED'</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'一共有&#123;&#125;位候选人'</span>.format(len(data[<span class="string">'cand_nm'</span>].unique())))</span><br></pre></td></tr></table></figure><pre><code>一共有13位候选人</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似SQL中的distinct操作</span></span><br><span class="line">data[<span class="string">'cand_nm'</span>].unique()</span><br></pre></td></tr></table></figure><pre><code>array([&#39;Bachmann, Michelle&#39;, &#39;Romney, Mitt&#39;, &#39;Obama, Barack&#39;,       &quot;Roemer, Charles E. &#39;Buddy&#39; III&quot;, &#39;Pawlenty, Timothy&#39;,       &#39;Johnson, Gary Earl&#39;, &#39;Paul, Ron&#39;, &#39;Santorum, Rick&#39;,       &#39;Cain, Herman&#39;, &#39;Gingrich, Newt&#39;, &#39;McCotter, Thaddeus G&#39;,       &#39;Huntsman, Jon&#39;, &#39;Perry, Rick&#39;], dtype=object)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">parties = &#123;<span class="string">'Bachmann, Michelle'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Cain, Herman'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Gingrich, Newt'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Huntsman, Jon'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Johnson, Gary Earl'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'McCotter, Thaddeus G'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Obama, Barack'</span>: <span class="string">'Democrat'</span>,</span><br><span class="line">           <span class="string">'Paul, Ron'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Pawlenty, Timothy'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Perry, Rick'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">"Roemer, Charles E. 'Buddy' III"</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Romney, Mitt'</span>: <span class="string">'Republican'</span>,</span><br><span class="line">           <span class="string">'Santorum, Rick'</span>: <span class="string">'Republican'</span>&#125;</span><br><span class="line">data[<span class="string">'party'</span>] = data[<span class="string">'cand_nm'</span>].map(parties)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'party'</span>].value_counts()</span><br></pre></td></tr></table></figure><pre><code>Democrat      593747Republican    407985Name: party, dtype: int64</code></pre><h2 id="排序，按照职业汇总对赞助金额进行排序"><a href="#排序，按照职业汇总对赞助金额进行排序" class="headerlink" title="排序，按照职业汇总对赞助金额进行排序"></a>排序，按照职业汇总对赞助金额进行排序</h2><p>按照各个职位进行汇总，计算赞助总金额展示前20项，发现不少职业是相同的，只不过表达方式不一样，如C.E.O和CEO</p><pre><code>DataFrame.sort_value(by,ascengding=True,inplace=False)</code></pre><ul><li>by表示根据那一项排序，可以传入多列值</li><li>ascending=True表示升序，False表示降序，inplace=True表示修复原dataframe，默认为False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.groupby(<span class="string">'contbr_occupation'</span>)[<span class="string">'contb_receipt_amt'</span>].sum().sort_values(ascending=<span class="literal">False</span>)[:<span class="number">20</span>]</span><br></pre></td></tr></table></figure><pre><code>contbr_occupationRETIRED                                   48176397.00ATTORNEY                                  18470473.30HOMEMAKER                                 17484807.65INFORMATION REQUESTED PER BEST EFFORTS    15859514.55INFORMATION REQUESTED                      8742357.59PHYSICIAN                                  7224044.40PRESIDENT                                  6347843.59EXECUTIVE                                  5273717.90CONSULTANT                                 4932627.98NOT PROVIDED                               4224760.39CEO                                        3570942.20LAWYER                                     3537982.19OWNER                                      3278488.16INVESTOR                                   3204481.92ENGINEER                                   2730527.43PROFESSOR                                  2458033.81C.E.O.                                     2433218.11SELF-EMPLOYED                              2259150.94MANAGER                                    2167571.47REAL ESTATE                                2110499.34Name: contb_receipt_amt, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加载数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_01 = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&#39;data/data_01.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_02 = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&#39;data/data_02.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_03 = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&#39;data/data_03.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>特征工程(一)</title>
    <link href="http://yoursite.com/2019/09/21/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B-%E4%B8%80/"/>
    <id>http://yoursite.com/2019/09/21/特征工程-一/</id>
    <published>2019-09-21T03:29:58.000Z</published>
    <updated>2019-09-26T14:22:34.230Z</updated>
    
    <content type="html"><![CDATA[<p>fit,fit_transform,transform的区别</p><p>fit在训练模型的时候使用</p><p>fit_transform的作用是先拟合数据，然后将其转换成标准形式，一般是用在训练集上，例如StandardScaler计算出标准差</p><p>transfrom：指的是直接对数据进行标准化，直接用·训练集拟合的结果进行标准化或者归一化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;fit,fit_transform,transform的区别&lt;/p&gt;
&lt;p&gt;fit在训练模型的时候使用&lt;/p&gt;
&lt;p&gt;fit_transform的作用是先拟合数据，然后将其转换成标准形式，一般是用在训练集上，例如StandardScaler计算出标准差&lt;/p&gt;
&lt;p&gt;tra
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征工程" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据降维" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
      <category term="特征工程" scheme="http://yoursite.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hive的基本操作</title>
    <link href="http://yoursite.com/2019/09/17/hive%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/09/17/hive的基本操作/</id>
    <published>2019-09-17T13:57:11.000Z</published>
    <updated>2019-10-01T15:05:15.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表的增删改查操作"><a href="#表的增删改查操作" class="headerlink" title="表的增删改查操作"></a>表的增删改查操作</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>使用if not exists 如果存在则跳过，comment为注释。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> mydb.employees(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'Employee name'</span>,</span><br><span class="line">salary <span class="built_in">float</span> <span class="keyword">comment</span> <span class="string">'Employee salary'</span>,</span><br><span class="line">subordinates <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt; <span class="keyword">comment</span> <span class="string">'Names of subordinates'</span>,</span><br><span class="line">deduction <span class="keyword">map</span>&lt;<span class="keyword">string</span>, <span class="built_in">float</span>&gt;,</span><br><span class="line">address <span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>, state:<span class="keyword">string</span>, zip:<span class="built_in">int</span>&gt; <span class="keyword">comment</span> <span class="string">'Home address'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">comment</span> <span class="string">'descriptions of table'</span></span><br><span class="line">location <span class="string">'/user/hive/warehouse/mydb.db/employees'</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="描述表"><a href="#描述表" class="headerlink" title="描述表"></a>描述表</h2><p>显示表的字段和结构，使用desc/describe </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--显示表的字段和数据类型</span></span><br><span class="line">desc table_name;</span><br><span class="line"><span class="comment">--显示对应字段的数据类型</span></span><br><span class="line">desc table_name.columns</span><br></pre></td></tr></table></figure><h2 id="管理表和外部表"><a href="#管理表和外部表" class="headerlink" title="管理表和外部表"></a>管理表和外部表</h2><p><strong>管理表</strong>是hive创建的表，由hive控制其生命周期，hive默认情况下会将数据存在在配置文件指定的目录当中，由hive.metastore.warehouse.dir指定。当使用hive删除表的时候，对应的数据也会被删除，即hdfs文件系统中的数据也会被删除。管理表的缺点在于无法共享数据，比如利用pig等工具创建的数据，hive对其没有权限。当使用hive查询这些数据的时候就可以使用一个外部表指向这份数据，而不需要对其的权限。外部表需要使用external修饰。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> stocks(</span><br><span class="line"><span class="keyword">exchange</span><span class="keyword">string</span>,</span><br><span class="line">symbol<span class="keyword">string</span>,</span><br><span class="line">ymd<span class="keyword">string</span>,</span><br><span class="line">price__open<span class="keyword">string</span>,</span><br><span class="line">price__high<span class="keyword">string</span>,</span><br><span class="line">price__low<span class="keyword">string</span>,</span><br><span class="line">price__close<span class="built_in">float</span>,</span><br><span class="line">volume<span class="built_in">int</span>,</span><br><span class="line">price_adj_close<span class="built_in">float</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="string">'分隔符为,'</span></span><br><span class="line">location <span class="string">'data/stocks'</span>;</span><br></pre></td></tr></table></figure><p>加上external字段值后，删除表并不会删除这份数据，不过描述标的元数据信息会被删除。元数据可以理解为对该表的描述信息，而不是表内数据。</p><p>需要注意的是如果语句省略了external关键字同事源表是外部表，那么新表也是外部表，如果源表是管理表，新表也是管理表。在加上external之后，无论源表是管理表还是外部表，新表都是外部表。</p><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>在建表过程中，会根据分区字段创建对应目录，优点在于分层存储，可以加快查询速度，而缺点在于一些数据存在于文件目录下，但是hive只能从表中读取数据，因此会造成资源浪费。分区表创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees(</span><br><span class="line"><span class="keyword">name</span><span class="keyword">string</span>,</span><br><span class="line">salary<span class="built_in">float</span>,</span><br><span class="line">subordinates<span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">deduction<span class="keyword">map</span>&lt;<span class="keyword">string</span>,<span class="built_in">float</span>&gt;,</span><br><span class="line">address<span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>, city:<span class="keyword">string</span>, state:<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (country <span class="keyword">string</span>, state <span class="keyword">string</span>);</span><br></pre></td></tr></table></figure><p>在建表的时候hive在hdfs上的目录为…/employees/country/state</p><p>查看表中存在所有分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> employees;</span><br></pre></td></tr></table></figure><p>查询指定分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> employees <span class="keyword">partition</span>(country=<span class="string">'CHINA'</span>)</span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> table_name;</span><br></pre></td></tr></table></figure><p>对于管理表，表的元数据和表内数据都会被删除。</p><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="表的重命名"><a href="#表的重命名" class="headerlink" title="　表的重命名"></a>　表的重命名</h3><p>将表从ａ重命名为ｂ</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> a <span class="keyword">rename</span> <span class="keyword">to</span> b;</span><br></pre></td></tr></table></figure><h3 id="增加表分区"><a href="#增加表分区" class="headerlink" title="增加表分区"></a>增加表分区</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">add</span> partiion</span><br><span class="line"><span class="comment">--在一个查询语句中增加多个分区</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> </span><br><span class="line"><span class="keyword">partition</span>(...) location <span class="string">'/user/hive/warehouse/a'</span></span><br><span class="line"><span class="keyword">partition</span>(...) location <span class="string">'/user/hive/warehouse/b'</span></span><br><span class="line"><span class="keyword">partition</span>(...) location <span class="string">'/user/hive/warehouse/c'</span></span><br></pre></td></tr></table></figure><h3 id="修改列的信息"><a href="#修改列的信息" class="headerlink" title="修改列的信息"></a>修改列的信息</h3><p>将列名从a改到b，并且将其移到serverity字段后面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">change</span> </span><br><span class="line"><span class="keyword">column</span> a b type_name <span class="string">'修改列的数据类型'</span></span><br><span class="line"><span class="keyword">comment</span> <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">after</span> serverity</span><br></pre></td></tr></table></figure><h3 id="增加新的列"><a href="#增加新的列" class="headerlink" title="增加新的列"></a>增加新的列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">column</span>(</span><br><span class="line">    app_name <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'Application name'</span>,</span><br><span class="line">    session_id <span class="keyword">long</span> <span class="keyword">comment</span> <span class="string">'the current session id'</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="删除或替换列"><a href="#删除或替换列" class="headerlink" title="删除或替换列"></a>删除或替换列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  table_name <span class="keyword">replace</span> <span class="keyword">columns</span>（</span><br><span class="line">hour_mins_secs <span class="built_in">INT</span> <span class="keyword">comment</span> <span class="string">'xxx'</span></span><br><span class="line">severity <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'xxx'</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将之前的列都删除，只留下replace的列</p><h3 id="修改表的属性"><a href="#修改表的属性" class="headerlink" title="修改表的属性"></a>修改表的属性</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">set</span> tblproperties(<span class="string">'notes'</span>=<span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure><h3 id="修改表的存储属性"><a href="#修改表的存储属性" class="headerlink" title="修改表的存储属性"></a>修改表的存储属性</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">partition</span>(a=xxx,b=xxx,c=xxx) <span class="keyword">set</span> fileformat sequencefile;</span><br></pre></td></tr></table></figure><p>指定对应的分区中的表，并且重新设置其格式。</p><h1 id="加载和导出数据"><a href="#加载和导出数据" class="headerlink" title="加载和导出数据"></a>加载和导出数据</h1><h2 id="从本地加载数据"><a href="#从本地加载数据" class="headerlink" title="从本地加载数据"></a>从本地加载数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/home/hadopp/data.txt'</span></span><br><span class="line">overwrite <span class="keyword">into</span> <span class="keyword">table</span> employees</span><br><span class="line"><span class="keyword">partition</span>(country=<span class="string">'US'</span>,state=<span class="string">'CA'</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是创建分区表的时候使用的是partition by。如果目录不存在，hive会先创建分区目录。</p><h2 id="通过查询语句加载数据"><a href="#通过查询语句加载数据" class="headerlink" title="通过查询语句加载数据"></a>通过查询语句加载数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> employees</span><br><span class="line"><span class="keyword">partition</span>(country=<span class="string">'US'</span>,state=<span class="string">'CA'</span>)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> xxx=xxx;</span><br></pre></td></tr></table></figure><h2 id="通过查询语句建表"><a href="#通过查询语句建表" class="headerlink" title="通过查询语句建表"></a>通过查询语句建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> table_name <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name_b;</span><br></pre></td></tr></table></figure><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--方法一，谁用hadoop提供的工具</span></span><br><span class="line">hadoop fs -cp source_path target_path</span><br><span class="line"><span class="comment">--方法二</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/home/hadoop/employees'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h1 id="hive的连接操作"><a href="#hive的连接操作" class="headerlink" title="hive的连接操作"></a>hive的连接操作</h1><p>table stu</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1chenli21</span><br><span class="line">2xuzeng22</span><br><span class="line">3xiaodan23</span><br><span class="line">4hua24</span><br></pre></td></tr></table></figure><p>table sub</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1chinese</span><br><span class="line">2english</span><br><span class="line">3science</span><br><span class="line">5nature</span><br></pre></td></tr></table></figure><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>inner join，关键字 join on。仅列出两个表中符合连接条件的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*,b.* <span class="keyword">from</span> stu a <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line"><span class="number">1</span>chenli<span class="number">21</span><span class="number">1</span>chinese</span><br><span class="line"><span class="number">2</span>xuzeng<span class="number">22</span><span class="number">2</span>english</span><br><span class="line"><span class="number">3</span>xiaodan<span class="number">23</span><span class="number">3</span>science</span><br></pre></td></tr></table></figure><p>join后面连接表，而on指定连接条件。</p><h2 id="左连接和右连接"><a href="#左连接和右连接" class="headerlink" title="左连接和右连接"></a>左连接和右连接</h2><p>左连接，显示左边表的所有数据，如果右边表有与之对应的数据则显示，否则显示为NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> stu a <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli211chinese</span><br><span class="line">2xuzeng222english</span><br><span class="line">3xiaodan233science</span><br><span class="line">4hua24NULLNULL</span><br></pre></td></tr></table></figure><p>右连接与左连接相反，使用的关键字为 <strong>right outer  join xxx on xxx</strong>。</p><p>标准查询关键字执行顺序为 from-&gt;where-&gt;group by-&gt;having-&gt;order by。</p><h2 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h2><p>左表和右表都显示，如果没有对应数据，则都显示为NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> stu a <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli211chinese</span><br><span class="line">2xuzeng222english</span><br><span class="line">3xiaodan233science</span><br><span class="line">4hua24NULLNULL</span><br><span class="line">NULLNULLNULL5nature</span><br></pre></td></tr></table></figure><h2 id="左半开连接"><a href="#左半开连接" class="headerlink" title="左半开连接"></a>左半开连接</h2><p>左半开连接。left semi join，语法与左连接不一样，只能选择出左边表的数据，此数据符合on后面的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> stu a <span class="keyword">left</span> <span class="keyword">semi</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli21</span><br><span class="line">2xuzeng22</span><br><span class="line">3xiaodan23</span><br><span class="line"><span class="comment">--下列语句会报错</span></span><br><span class="line"><span class="keyword">select</span> a.*,b.* <span class="keyword">from</span> stu a <span class="keyword">left</span> <span class="keyword">semi</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br></pre></td></tr></table></figure><h2 id="笛卡尔连接"><a href="#笛卡尔连接" class="headerlink" title="笛卡尔连接"></a>笛卡尔连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*,b.* <span class="keyword">from</span> cl_student a <span class="keyword">join</span> cl_stu_sub b;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli211chinese</span><br><span class="line">1chenli212english</span><br><span class="line">1chenli213science</span><br><span class="line">1chenli215nature</span><br><span class="line">2xuzeng221chinese</span><br><span class="line">2xuzeng222english</span><br><span class="line">2xuzeng223science</span><br><span class="line">2xuzeng225nature</span><br><span class="line">3xiaodan231chinese</span><br><span class="line">3xiaodan232english</span><br><span class="line">3xiaodan233science</span><br><span class="line">3xiaodan235nature</span><br><span class="line">4hua241chinese</span><br><span class="line">4hua242english</span><br><span class="line">4hua243science</span><br><span class="line">4hua245nature</span><br></pre></td></tr></table></figure><p>花了几天的时间整理了hive的用法，终于不用在对着SQL摸瞎了，加油吧进击的SQL boy！ 日常福利(●´∀｀●)</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/alisi.jpg" alt="爱丽丝"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;表的增删改查操作&quot;&gt;&lt;a href=&quot;#表的增删改查操作&quot; class=&quot;headerlink&quot; title=&quot;表的增删改查操作&quot;&gt;&lt;/a&gt;表的增删改查操作&lt;/h1&gt;&lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;p&gt;使用if not exists 如果存在则跳过，comment为注释。&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; mydb.employees(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Employee name&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	salary &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Employee salary&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subordinates &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Names of subordinates&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	deduction &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	address &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;lt;street:&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, city:&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, state:&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, zip:&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Home address&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;descriptions of table&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location &lt;span class=&quot;string&quot;&gt;&#39;/user/hive/warehouse/mydb.db/employees&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive编程" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hive" scheme="http://yoursite.com/tags/Hive/"/>
    
      <category term="基本操作" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>hive数据类型</title>
    <link href="http://yoursite.com/2019/09/08/hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/09/08/hive数据类型/</id>
    <published>2019-09-08T08:40:03.000Z</published>
    <updated>2019-09-08T16:04:42.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本文件数据编码"><a href="#文本文件数据编码" class="headerlink" title="文本文件数据编码"></a>文本文件数据编码</h2><ul><li>TSV：tab separated values；即“制表符分隔值”，用制表符分隔数据</li><li>CSV： comma separated values；即“逗号分隔值”，用逗号分隔数据</li></ul><p>两种文件存在的缺点在于文件中可能存在不需要作为分隔符的逗号或者制表符存在，所有hive有专门的分隔符。</p><p>hive记录中默认的分隔符</p><a id="more"></a><div class="table-container"><table><thead><tr><th style="text-align:center">分隔符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td style="text-align:center">对于文本文件来说每一行都是记录，可以使用换行符作为分隔符</td></tr><tr><td style="text-align:center">^A(ctrl+A)</td><td style="text-align:center">用于分隔字段(列)，在CREATE TABLE 语句中可以使用八进制编码\001表示，键盘上打不出来。</td></tr><tr><td style="text-align:center">^B</td><td style="text-align:center">用于分隔array或者struct中的元素，或于用map钟键值对的分隔，在CREATE TABLE中使用\002表示</td></tr><tr><td style="text-align:center">^C</td><td style="text-align:center">用于MAP钟键与值的分隔，用\003表示</td></tr></tbody></table></div><h2 id="读时模式"><a href="#读时模式" class="headerlink" title="读时模式"></a>读时模式</h2><p>传统数据库是<strong>写时模式</strong>，即在写入文件的时候会，会对数据的格式进行校验，如果不符合，将无法写入数据库。</p><p>hive是<strong>读时模式</strong>，在往数据库里写入不会对数据进行校验，但是在读取数据的时候会对数据进行校验，对于不合格的数据，会设置为null。</p><p>hive的优点在于加载(写)数据的时候速度较快，因为不需要对数据进行解析，而传统写时模式则有利于数据的查询。</p><p>好久没有更新博客了，这篇虽然水了点，写得像个笔记，算是开篇吧，福利就上亚丝娜吧!!!</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/test1.jpg" alt="亚丝娜"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文本文件数据编码&quot;&gt;&lt;a href=&quot;#文本文件数据编码&quot; class=&quot;headerlink&quot; title=&quot;文本文件数据编码&quot;&gt;&lt;/a&gt;文本文件数据编码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TSV：tab separated values；即“制表符分隔值”，用制表符分隔数据&lt;/li&gt;
&lt;li&gt;CSV： comma separated values；即“逗号分隔值”，用逗号分隔数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;两种文件存在的缺点在于文件中可能存在不需要作为分隔符的逗号或者制表符存在，所有hive有专门的分隔符。&lt;/p&gt;&lt;p&gt;hive记录中默认的分隔符&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive编程" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hive" scheme="http://yoursite.com/tags/Hive/"/>
    
      <category term="编码类型" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
