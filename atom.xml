<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心如止水</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-14T08:17:56.439Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gerogegao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LightGBM论文笔记</title>
    <link href="http://yoursite.com/2020/03/14/LightGBM%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/14/LightGBM论文笔记/</id>
    <published>2020-03-14T08:17:56.000Z</published>
    <updated>2020-03-14T08:17:56.439Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>XGBoost原理总结</title>
    <link href="http://yoursite.com/2020/03/09/XGBoost%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/09/XGBoost原理及用法总结/</id>
    <published>2020-03-09T05:59:25.000Z</published>
    <updated>2020-03-17T16:26:31.349Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/a.png" alt></p><p>Xgboost, 是GBDT的一种实现方式，并且xgboost做了一些改进和优化。</p><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><h3 id="1-1-优化目标函数"><a href="#1-1-优化目标函数" class="headerlink" title="1.1 优化目标函数"></a>1.1 优化目标函数</h3><p>对于GBDT方法，都是基模型组成的加法公式。</p><script type="math/tex; mode=display">\hat y_i = \sum_{i=1}^kf_t(x_i)\tag{1}</script><p>其中$f_k$为基模型,$y_i$表示第$i$个样本预测值。</p><p>正则化损失函数</p><a id="more"></a><script type="math/tex; mode=display">\zeta^t=\sum_{i=1}^n l(y_i,\hat y_i^{(t-1)})+\Omega(f_t)\tag{2}</script><p>对于损失函数（2）进行二阶展开有：</p><script type="math/tex; mode=display">\zeta^{(t)} \approx  \sum_{i=1}^n[l(y_i,\hat y_i) +g_if_t(x_i)+\frac{1}{2}h_if_t^2(x_i)]+\Omega(f_t)\\ where\quad \Omega(f)=\gamma T+\frac{1}{2}\lambda||w||^2\tag{3}</script><p>对于损失函数，xgboost在处理的时候进行了二阶展开，其中$g_i=\frac{\partial l(y_i,\hat y_i^{(t-1)})}{\partial \hat y_i^{(t-1)}}$, $h_i=\frac{\partial ^2l(y_i,\hat y_i^{(t-1)})}{\partial (\hat y_i^{(t-1)})^2}$。其中$g_i$和$h_i$分别对应一阶倒和二阶倒数，正则项$T$表示叶子节点数目，$w$表示叶子的分数。$\gamma$空值叶子节点的个数，保证叶子节点不会过多分裂，而$\lambda$空值叶子结点的分值，避免分值过大造成过拟合。</p><p>对于第$t$步而言，前面的$t-1$步已经固定，因此有一阶、二阶梯度$g_i$和$h_i$为一个常数。因此目标函数可以化简为</p><script type="math/tex; mode=display">\hat \zeta^t=\sum_{i=1}^n[g_if_t(x_i)+\frac{1}{2}h_if_t^2(x_i)]+\Omega(f_t)\tag{4}</script><p>定义$I_j=\{x|q(x_i)=j\}$,表示为叶子结点$j$中的样本。所以上式(3)可以重写为</p><script type="math/tex; mode=display">\hat\zeta^{(t-1)}=\sum_{i=1}^n[g_if_t(x_i)+\frac{1}{2}h_if^2_t(x_i)]+\gamma T + \frac{1}{2}\lambda \sum_{j=1^T}w_j^2\tag{5}</script><script type="math/tex; mode=display">=\sum_{j=1}^T[(\sum_{i\in I_j}g_i)w_j+\frac{1}{2}(\sum_{i\in I_j}h_i+\lambda)w_j^2]+\gamma T \tag{6}</script><p>这里其实进行了一个转换，对于公式5而言，计算的损失函数是将所有数据得到损失函数。对于决策树，样本最终会落到叶子结点，因此公式6是通过叶子节点求损失值。</p><p>对于固定结构的$q(x)$，即改树节点时固定的，可以计算叶子结点$j$的最优权重$w_j^*$</p><script type="math/tex; mode=display">w_j^*=-\frac{2\sum_{i\in I_j}g_i}{\sum_{i\in I_j}h_i+\lambda}</script><p>将结果带入上式6有</p><script type="math/tex; mode=display">\hat \zeta^{(t)}=-\frac{1}{2} \sum_{j=1}^T\frac{(\sum_{i\in I_j}g_i)^2}{\sum_{i\in I_j}h_i+\lambda}\tag{7}</script><p>定$G_j=\sum_{i\in I_j}g_i$,$H_j=\sum_{i\in I_j}h_i$，则有</p><script type="math/tex; mode=display">w_j^*=-\frac{G_j}{H_j+\lambda}</script><p>将上式带入公式7化简有</p><script type="math/tex; mode=display">\zeta^{(t)}=-\frac{1}{2}\sum_{j=1}^T\frac{G_j^2}{H_j+\lambda}\tag{8}</script><p>对于Xgboost使用泰勒展开的原因是因为想统一损失函数的形式，方便自定义损失函数。</p><h3 id="1-2最佳切分点算法"><a href="#1-2最佳切分点算法" class="headerlink" title="1.2最佳切分点算法"></a>1.2最佳切分点算法</h3><p>xgboost支持两种实现，贪心算法和近似算法。sklearn中GBDT是贪心算法</p><p>1）贪心算法，和GBDT一样，暴力枚举</p><p>1、对于所有叶子节点枚举可用的特征，并且将特征值按照升序排序</p><p>2、计算节点分裂时候的收益</p><p>3、选择收益做大的节点和特征进行分裂</p><p>4、重复1，直到分裂结束</p><p>关键点在于对收益的计算</p><p>假设某一节点完成分裂，在分裂前，其目标函数为</p><script type="math/tex; mode=display">L(y,\hat y_i)=-\frac{1}{2}[\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}]+\gamma\tag{9}</script><p>分裂后的目标函数为</p><script type="math/tex; mode=display">L=-\frac{1}{2}[\frac{G_L^2}{H_L+\lambda}+\frac{G_R^2}{H_R+\lambda}]+2\gamma\tag{10}</script><p>所以分裂一个节点的收益可以从用式（9）-（10）</p><script type="math/tex; mode=display">Gain=-\frac{1}{2}[\frac{G_L^2}{H_L+\lambda}+\frac{G_R^2}{H_R+\lambda}-\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}]-\gamma</script><p>G表示所有叶子节点的梯度</p><p>2)近似算法</p><p>作用在于选择，当数据量比较大，无法全部读入内存时，给出近似最优解。对比贪心算法，可能在精度上有所缺失，但是提升了速度，降低了内存消耗。</p><p>该算法的核心思想是根据特征分布的分位数提出候选点，然后将特征映射到候选划分的桶之中，然后统计桶中的聚合信息(指的前面的$g$和$h$)，找到所有区间最佳分裂点。</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/近似算法.PNG" alt></p><p>1、对于特征k根据分位数找到候选集合</p><p>2、将样本映射到改候选集合对应的分区桶中</p><p>该算法有两种变体，区别在于何时剔除候选点：</p><ul><li>Global：在初始阶段就给出所有候选节点，并且在后续分裂中使用相同的分裂节点。</li><li>Local：每次分裂重新提出候选节点</li></ul><p>分位图</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/%E5%88%86%E4%BD%8D%E5%9B%BE.png" alt="123"></p><p>加权分位图：</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/加权分位图.png" alt="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/%E5%8A%A0%E6%9D%83%E5%88%86%E4%BD%8D%E5%9B%BE.png"></p><p>由于前面我们知道目标函数为</p><script type="math/tex; mode=display">L=\sum_{i=1}^n[g_if_t(x_i)+\frac{1}{2}h_if_t^2(x_i)]+\Omega(f_t)\tag{11}</script><p>由于$g_i$和$h_i$是有上一轮迭代得到，因此都是常数，所以上式可以变形为：</p><script type="math/tex; mode=display">L\approx\sum_{i=1}^n\frac{1}{2}h_i[(f_t(x_i)+\frac{g_i}{h_i})^2]+\Omega(f_t)+C\\C=-\frac{g_i^2}{h_i}\tag{12}</script><p>这样损失函数就变成了加权的形式，因此对于每个样本，其实权值是不等的，所以采用加权分位图。</p><h3 id="1-3-稀疏感知分裂"><a href="#1-3-稀疏感知分裂" class="headerlink" title="1.3 稀疏感知分裂"></a>1.3 稀疏感知分裂</h3><p>在实际问题中，通常输入数据都是稀疏的，造成稀疏的原因有：</p><ul><li>数据缺失</li><li>一些统计量常常为0</li><li>特征工程的结果，如one-shot</li></ul><p>稀疏感知算法的目的是给每个节点一个默认的分裂方向，其思想非常简单，就是分别计算缺失值样本分裂到左边或者右边是的收益，选择收益大的一个分支作为最优缺省值方向</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/稀疏感知分裂.PNG" alt></p><h2 id="2-工程优化"><a href="#2-工程优化" class="headerlink" title="2. 工程优化"></a>2. 工程优化</h2><h3 id="2-1-块结构设计"><a href="#2-1-块结构设计" class="headerlink" title="2.1 块结构设计"></a>2.1 块结构设计</h3><p>树学习中最耗时的部分是数据排序。为了减少排序的成本，我们提出将数据存储在内存单元中，称之为block。每个block中的数据每列根据特征取值排序，并以压缩列（CSC）格式储存。这种输入数据布局只需要在训练前计算一次，可以在后续迭代中重复使用。</p><ul><li>每个块包含一个或者多个已经排好序的特征</li><li>缺失值将不在进行排序</li><li>每个特征值都会存储样本梯度统计值索引</li></ul><p>因为每个特征都是独立存放，因此在选择特征进行分裂的时候可以分布式实现</p><h3 id="2-2-缓存方法优化"><a href="#2-2-缓存方法优化" class="headerlink" title="2.2 缓存方法优化"></a>2.2 缓存方法优化</h3><p>算法是通过行索引提取梯度统计量，但是在排序之后就会乱掉，不能够直接访问。并且当统计量没法放进CPU缓存是，会导致访问失败，因此xgb给每个线程分配一个内部缓冲区。</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/缓存优化.png" alt="https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96.png"></p><h3 id="2-3-核外快计算方式"><a href="#2-3-核外快计算方式" class="headerlink" title="2.3 核外快计算方式"></a>2.3 核外快计算方式</h3><p>对于数据量比较大的数据，没有办法存储到内存，可以考虑部分读取，将数据存储到硬盘，但是硬盘读取会占用大量时间</p><p>XGBoost采用两种方式降低硬盘读取开销</p><p>1、块压缩：对Block进行案列压缩，并且在读取时解压</p><p>2、块拆分：将每个块存储到不同的磁盘，然后从多个磁盘读取增加吞吐量。</p><h2 id="3-GBDT和XGBoost区别"><a href="#3-GBDT和XGBoost区别" class="headerlink" title="3. GBDT和XGBoost区别"></a>3. GBDT和XGBoost区别</h2><ul><li>传统GBDT以CART作为基分类器，xgboost还支持线性分类器，这个时候xgboost相当于带L1和L2正则化项的逻辑斯蒂回归（分类问题）或者线性回归（回归问题）。</li><li>传统GBDT在优化时只用到一阶导数信息，xgboost则对代价函数进行了二阶泰勒展开，同时用到了一阶和二阶导数。顺便提一下，xgboost工具支持自定义代价函数，只要函数可一阶和二阶求导。</li><li>xgboost在代价函数里加入了正则项，用于控制模型的复杂度。正则项里包含了树的叶子节点个数、每个叶子节点上输出的score的L2模的平方和。从Bias-variance tradeoff角度来讲，正则项降低了模型的variance，使学习出来的模型更加简单，防止过拟合，这也是xgboost优于传统GBDT的一个特性。</li><li>Shrinkage（缩减），相当于学习速率（xgboost中的eta）。xgboost在进行完一次迭代后，会将叶子节点的权重乘上该系数，主要是为了削弱每棵树的影响，让后面有更大的学习空间。实际应用中，一般把eta设置得小一点，然后迭代次数设置得大一点。（补充：传统GBDT的实现也有学习速率）</li><li>列抽样（column subsampling）。xgboost借鉴了随机森林的做法，支持列抽样，不仅能降低过拟合，还能减少计算，这也是xgboost异于传统gbdt的一个特性。</li><li>对缺失值的处理。对于特征的值有缺失的样本，xgboost可以自动学习出它的分裂方向。</li><li>xgboost工具支持并行。boosting不是一种串行的结构吗?怎么并行的？注意xgboost的并行不是tree粒度的并行，xgboost也是一次迭代完才能进行下一次迭代的（第t次迭代的代价函数里包含了前面t-1次迭代的预测值）。xgboost的并行是在特征粒度上的。我们知道，决策树的学习最耗时的一个步骤就是对特征的值进行排序（因为要确定最佳分割点），xgboost在训练之前，预先对数据进行了排序，然后保存为block结构，后面的迭代中重复地使用这个结构，大大减小计算量。这个block结构也使得并行成为了可能，在进行节点的分裂时，需要计算每个特征的增益，最终选增益最大的那个特征去做分裂，那么各个特征的增益计算就可以开多线程进行。</li><li>可并行的近似直方图算法。树节点在进行分裂时，我们需要计算每个特征的每个分割点对应的增益，即用贪心法枚举所有可能的分割点。当数据无法一次载入内存或者在分布式情况下，贪心算法效率就会变得很低，所以xgboost还提出了一种可并行的近似直方图算法，用于高效地生成候选的分割点。</li></ul><p>调参技巧略，直接看API就行了。。。。懒得总结了</p><p>参考资料</p><p>[1].<a href="https://www.zhihu.com/question/41354392/answer/98658997" target="_blank" rel="noopener">https://www.zhihu.com/question/41354392/answer/98658997</a></p><p>[2].<a href="https://mp.weixin.qq.com/s/LoX987dypDg8jbeTJMpEPQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/LoX987dypDg8jbeTJMpEPQ</a></p><p>[3].<a href="https://zhuanlan.zhihu.com/p/97753849" target="_blank" rel="noopener">行抽样、列抽样</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/geroge-gao/Images/master/Xgboost/a.png&quot; alt&gt;&lt;/p&gt;&lt;p&gt;Xgboost, 是GBDT的一种实现方式，并且xgboost做了一些改进和优化。&lt;/p&gt;&lt;h2 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot; class=&quot;headerlink&quot; title=&quot;1. 原理&quot;&gt;&lt;/a&gt;1. 原理&lt;/h2&gt;&lt;h3 id=&quot;1-1-优化目标函数&quot;&gt;&lt;a href=&quot;#1-1-优化目标函数&quot; class=&quot;headerlink&quot; title=&quot;1.1 优化目标函数&quot;&gt;&lt;/a&gt;1.1 优化目标函数&lt;/h3&gt;&lt;p&gt;对于GBDT方法，都是基模型组成的加法公式。&lt;/p&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\hat y_i = \sum_{i=1}^kf_t(x_i)\tag{1}&lt;/script&gt;&lt;p&gt;其中$f_k$为基模型,$y_i$表示第$i$个样本预测值。&lt;/p&gt;&lt;p&gt;正则化损失函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="决策树" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="GBDT" scheme="http://yoursite.com/tags/GBDT/"/>
    
  </entry>
  
  <entry>
    <title>xgboost和lightGBM</title>
    <link href="http://yoursite.com/2020/03/08/xgboost%E5%92%8ClightGBM/"/>
    <id>http://yoursite.com/2020/03/08/xgboost和lightGBM/</id>
    <published>2020-03-08T11:11:12.000Z</published>
    <updated>2020-03-08T11:12:21.378Z</updated>
    
    <content type="html"><![CDATA[<p>Xgboost</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Xgboost&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="决策树" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
      <category term="Xgboost" scheme="http://yoursite.com/tags/Xgboost/"/>
    
      <category term="lightGBM" scheme="http://yoursite.com/tags/lightGBM/"/>
    
  </entry>
  
  <entry>
    <title>hadoop数据倾斜及解决办法</title>
    <link href="http://yoursite.com/2019/12/15/hadoop%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2019/12/15/hadoop数据倾斜及解决办法/</id>
    <published>2019-12-15T07:17:25.000Z</published>
    <updated>2019-12-15T07:23:50.914Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
      <category term="hive" scheme="http://yoursite.com/categories/hadoop/hive/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="hive" scheme="http://yoursite.com/tags/hive/"/>
    
  </entry>
  
  <entry>
    <title>关于决策树总结</title>
    <link href="http://yoursite.com/2019/11/04/%E5%85%B3%E4%BA%8E%E5%86%B3%E7%AD%96%E6%A0%91%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/11/04/关于决策树总结/</id>
    <published>2019-11-04T15:13:46.000Z</published>
    <updated>2019-11-04T15:25:23.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="决策树处理连续值"><a href="#决策树处理连续值" class="headerlink" title="决策树处理连续值"></a>决策树处理连续值</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;决策树处理连续值&quot;&gt;&lt;a href=&quot;#决策树处理连续值&quot; class=&quot;headerlink&quot; title=&quot;决策树处理连续值&quot;&gt;&lt;/a&gt;决策树处理连续值&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="决策树" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>梯度提升树</title>
    <link href="http://yoursite.com/2019/10/10/GBDT%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/10/10/GBDT原理/</id>
    <published>2019-10-10T15:10:38.000Z</published>
    <updated>2020-03-16T07:46:34.602Z</updated>
    
    <content type="html"><![CDATA[<p>GBDT主要由三个概念组成：Regression Decistion Tree（即DT)，Gradient Boosting（即GB)，Shrinkage（算法的一个重要演进分枝，目前大部分源码都按该版本实现）。搞定这三个概念后就能明白GBDT是如何工作的，要继续理解它如何用于搜索排序则需要额外理解RankNet概念，之后便功德圆满。下文将逐个碎片介绍，最终把整张图拼出来。 </p><a id="more"></a><h2 id="加法模型"><a href="#加法模型" class="headerlink" title="加法模型"></a>加法模型</h2><p>对于算法模型而言，一个性能弱的算法模型可能很难得到很好的效果，加法模型的思想是将性能较弱的模型通过加权得到一个性能较强的模型。形如</p><script type="math/tex; mode=display">f(x)=\sum_{m=1}^{M}\beta_m b(x;\gamma_m)\tag{1}</script><p>其中$b(x;y_m)$表示基函数，$\gamma_m$表示基函数系数，$\beta_m$表示基函数系数。</p><h2 id="前向分布算法"><a href="#前向分布算法" class="headerlink" title="前向分布算法"></a>前向分布算法</h2><p>在给定训练集的情况下以及损失函数$L(y,f(x))$的条件下，学习加法模型$f(x)$即为最小化损失函数的问题：</p><script type="math/tex; mode=display">\min\limits_{\beta_m,\gamma_m}\sum_{i=1}^N L(y_i,\sum_{m=1}^M\beta_mb(x_i;\gamma_m))\tag{2}</script><p>前向分步算法的思想：加法模型是不同模型的组合，因此从前向后每次学习一个基函数和基函数系数来逐步优化目标函数$(1)$,从而降低复杂度。</p><p>计算流程：</p><p>(1).初始化第一个基函数$f_0(x)$</p><p>(2)对于$m=1,2,3,…,M$，极小化损失函数</p><script type="math/tex; mode=display">(\beta_m,\gamma_m)=\arg \min\limits_{\beta,\gamma}+\beta_mb(x;\gamma_m)\tag{3}</script><p>得到参数$\beta_m,\gamma_m$</p><p>(3) 更新加法模型</p><script type="math/tex; mode=display">f_m(x)=f_{m-1}(x)+\beta_mb(x;\gamma_m)\tag{4}</script><p>(4)得到加法模型</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^M\beta_mb(x;\gamma_m)\tag{5}</script><h2 id="GBDT梯度提升模型"><a href="#GBDT梯度提升模型" class="headerlink" title="GBDT梯度提升模型"></a>GBDT梯度提升模型</h2><h3 id="提升树算法"><a href="#提升树算法" class="headerlink" title="提升树算法"></a>提升树算法</h3><p>提升方法可以总结为加法模型与前向分布算法，以决策树为基函数的模型成为<strong>提升树</strong>，无论是分类问题还是回归问题，都是基于回归树(这点和统计学系方法里面不一样)，提升树算法则是采用前向分步算法来更新加法模型。对于提升树，基函数变为决策树，所以加法模型为</p><script type="math/tex; mode=display">f_m(x)=\sum_{i=1}^MT(x;w_m)\tag{6}</script><p>其中$M$为决策树的个数，$w$为决策树的参数，$T$表示决策树。</p><p>初始化第一棵决策树，第$m$部的模型为</p><script type="math/tex; mode=display">f_m(x)=f_{m-1}(x)+T(x;w)\tag{7}</script><p>通过最小化损失函数确定下一棵决策树的参数$w_m$</p><script type="math/tex; mode=display">\arg\min\limits_{w_m}\sum_{i=1}^NL(y_i,f_{m-1}+T(x_i,w_m))</script><p>当采用平方误差时</p><script type="math/tex; mode=display">L(y,f(x))=(y-f(x))^2\tag{8}</script><p>损失函数变为</p><script type="math/tex; mode=display">L(y)=(y-f_{m-1}(x)-T(x;w_m))^2</script><script type="math/tex; mode=display">=[r-T(x;w_m)]^2\tag{9}</script><p>其中残差$r=y-f_{m-1}(x)$，所以最后的目的就是为了是$T(x;w_m)$的值更加接近残差，从而达到最小化损失函数的作用。</p><h3 id="回归问题提升树"><a href="#回归问题提升树" class="headerlink" title="回归问题提升树"></a>回归问题提升树</h3><p>1.计算出第一颗树第一棵提升树</p><script type="math/tex; mode=display">f_0(x)=\arg \min\limits\sum_{i=1}^NL(y_i,c)\tag{10}</script><p>2.得到提升树的残差</p><script type="math/tex; mode=display">r_{mi}=y_i-f_{m-1}(x_i), i=1,2,3....,N\tag{11}</script><p>3.通过拟合残茶学习回归树，得到$T_m(x;w_m)$</p><p>4.更新提升树</p><script type="math/tex; mode=display">f_m(x)=f_{m-1}(x)+T(x;w_m)\tag{12}</script><h2 id="梯度提升"><a href="#梯度提升" class="headerlink" title="梯度提升"></a>梯度提升</h2><p>梯度提升本质其实是利用梯度下降算法来对前向分步算法进行优化求解的方法。其关键是利用<strong>损失函数负梯度</strong>在当前模型的值作为残差的近似值，进行一个拟合。</p><script type="math/tex; mode=display">r_{mi}=-[\frac{\partial L(y,f(x_i))}{\partial f(x_i)}]_{f(x_i)=f_m(x_i)}\tag{13}</script><p>利用负梯度代替残差的原因是因为只有在损失函数为平方差的时候，梯度才等于残差，但是当损失函数比较复杂的时候，此时梯度是不等于残差的。</p><p>对于特征的选择和回归树一样，同样是遍历所有特征找到最佳切分点。</p><p>回归例子可以参见统计学习方法。</p><h2 id="GBDT用于分类和回归的区别"><a href="#GBDT用于分类和回归的区别" class="headerlink" title="GBDT用于分类和回归的区别"></a>GBDT用于分类和回归的区别</h2><p>前面主要将的是GBDT的思想，利用残差不断的拟合，直到最后接近目标。但是对于对于分类和回归任务的处理，主要有以下几个方面不一样。</p><h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h3><p>1、分裂节点的评价标准不同</p><p>对于回归类问题，分裂节点的时候主要评价方式为</p><p>(1)平方误差</p><script type="math/tex; mode=display">L(x,c)=min \sum_{i=1}^m\sum_{j\in R_i}(x_j-c_i)^2</script><p>将特征划分为m个不同的区域$R_i$，然后求出每个区域的平方误差求和，平方误差和最小的特征和切分点。</p><p>(2)绝地值误差</p><script type="math/tex; mode=display">L(x,c)=min \sum_{i=1}^m\sum_{j\in R_i}|x_j-c_i|</script><p>(3)friedman_mse：费尔德曼均方误差，改进后的均方误差，一般能够达到比较好的效果</p><p>对于分类问题，其节点分类的评价方式为</p><p>(1)信息熵(<strong>entropy</strong>)</p><script type="math/tex; mode=display">H(x)=-\sum_{i=1}^np_i\log p_i</script><p>(2)gini,基尼系数(信息增益)</p><script type="math/tex; mode=display">g(D,A)=H(D)-H(D|A)</script><p>详细计算过程见统计学习方法。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>在介绍分类的原理之前首先要了解一下对数损失函数</p><script type="math/tex; mode=display">L(y,P(Y|X))=log P(Y|X)\tag{14}</script><p>对于分类任务，GBDT是结合回归加分类模型计算每种分类的概率，对于二分类，采用的是logistic进行分类</p><script type="math/tex; mode=display">P(Y=1|X)=\frac{1}{1+exp(-\sum_{i=1}^Mf_i(x))}\tag{15}</script><script type="math/tex; mode=display">P(Y=0|X)=\frac{1}{1+exp(\sum_{i=1}^Mf_i(x))}\tag{16}</script><p>令$h_\theta(x)=\frac{1}{1+exp(-\sum_{i=1}^Mf_i(x))}$</p><p>所以有</p><script type="math/tex; mode=display">P(Y=1|X)=h_\theta(x)\tag{17}</script><script type="math/tex; mode=display">P(Y=0|X)=1-h_\theta(x)\tag{18}</script><script type="math/tex; mode=display">P(Y|X)=h_\theta(x)^{y_i}(1-h_\theta(x))^{1-y_i}</script><p>损失函数为</p><script type="math/tex; mode=display">J_\theta(x)=-\sum_{i=1}^N [y_ilogh_\theta(x)+(1-y_i)log(1-h_\theta(x))]\tag{19}</script><p>所以经过计算有</p><script type="math/tex; mode=display">\frac{\partial J}{\partial h_\theta(x)}=y-\hat y</script><p>对于多分类问题</p><p>损失函数为交叉熵</p><script type="math/tex; mode=display">L(y,p(y|x))=-\sum_{i=1}^M y_ilog {p_i}\tag{20}</script><p>其中$i$表示所属类别，$M$表示分类树,$p_i$表示属于$i$的概率</p><p>并且有</p><script type="math/tex; mode=display">p(y=i|x)=\frac{exp(F_i(x))}{\sum_{i=1}^Mexp(F_i(x))}\tag{21}</script><p>同样求梯度有</p><script type="math/tex; mode=display">r_{mi}=-\frac{\partial L(y_i,F(x_i))}{\partial F(x_i)}|_{f(x_i)=f_{m-1}(x_i)}</script><p>回归损失函数</p><p>(1)平方损失函数</p><script type="math/tex; mode=display">L(y,x)=\sum_{i=1}^n(y_i-f(x_i))^2</script><p>(2)绝对值损失函数</p><script type="math/tex; mode=display">L(y,x)=\sum_{i=1}^n|y_i-f(x_i)|</script><p>(3)huber损失函数</p><script type="math/tex; mode=display">L(y)=\left\{\begin{array}{rcl}\frac{1}{2}(y-f(x))^2 & & {|y-f(x)|\leq\delta}\\\delta*|y-f(x)-\frac{1}{2}\delta| & & {|y-f(x)|>\delta}\end{array} \right.</script><h2 id="GBDT的正则化"><a href="#GBDT的正则化" class="headerlink" title="GBDT的正则化"></a>GBDT的正则化</h2><p>和Adaboost一样，我们也需要对GBDT进行正则化，防止过拟合。GBDT的正则化主要有三种方式。</p><p>（1）第一种是和Adaboost类似的正则化项，即<strong>步长</strong>（learning rate）。定义为ν,对于前面的弱学习器的迭代 <script type="math/tex">f_k(x)=f_{k-1}(x)+h_k(x)</script> 如果我们加上了正则化项，则有 <script type="math/tex">f_k(x)=f_{k-1}(x)+v\cdot h_k(x)</script> ν的取值范围为0&lt;ν≤10。对于同样的训练集学习效果，较小的ν意味着我们需要更多的弱学习器的迭代次数。通常我们用步长和迭代最大次数一起来决定算法的拟合效果。</p><p>（2）第二种正则化的方式是通过<strong>子采样比例</strong>（subsample）。取值为(0,1]。注意这里的子采样和随机森林不一样，随机森林使用的是放回抽样，而这里是不放回抽样。如果取值为1，则全部样本都使用，等于没有使用子采样。如果取值小于1，则只有一部分样本会去做GBDT的决策树拟合。选择小于1的比例可以减少方差，即防止过拟合，但是会增加样本拟合的偏差，因此取值不能太低。推荐在[0.5, 0.8]之间。</p><p>使用了子采样的GBDT有时也称作随机梯度提升树(Stochastic Gradient Boosting Tree, SGBT)。由于使用了子采样，程序可以通过采样分发到不同的任务去做boosting的迭代过程，最后形成新树，从而减少弱学习器难以并行学习的弱点。（注：这一点没明白。。）</p><p>（3）第三种是对于弱学习器即CART回归树进行正则化<strong>剪枝</strong>。在决策树章节里我们已经讲过，这里就不重复了。</p><h2 id="调参经验"><a href="#调参经验" class="headerlink" title="调参经验"></a>调参经验</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>sklearn.ensemble.<code>`RandomForestClassifier</code></p><p>Parameters</p><ul><li><p><strong>n_estimators</strong> ：树的个数，迭代次数</p><p>The number of trees in the forest.<em>Changed in version 0.22:</em> The default value of <code>n_estimators</code> changed from 10 to 100 in 0.22.</p></li><li><p><strong>criterion</strong>： 叶子结点分裂的方式，默认的是gini和entropy</p></li><li><p><strong>max_depth</strong>：树的深度，默认为空，会一直分裂，直到无法继续分裂</p></li><li><p><strong>min_samples_split</strong>： 分裂一个节点所需要的最小样本</p><ul><li>int：表示样本数</li><li>float 表示的百分比 </li></ul></li><li><p><strong>min_samples_leaf</strong>：保持一颗叶子结点所需要的样本数，该参数能够对模型进行平滑，特别在回归任务中。int和float和<strong>min_samples_split</strong>一样。</p></li><li><p><strong>min_weight_fraction_leaf</strong>：叶子结点所有权重和的最小值，<strong>如果分布相差很大或者有很多缺失值，可以引入该参数</strong></p></li></ul><ul><li><p><strong>max_features</strong>：当考虑最佳分割点是考虑的特征数。</p><ul><li>如果是float型，表示的是百分比</li><li>如果是’auto’ or ‘log2’，表示sqrt(n_features)</li><li>如果是log2, 表示log2(n_features)</li></ul></li><li><p><strong>max_leaf_nodes </strong>: 最大叶子结点，用于防止过拟合 </p></li><li><p><strong>min_impurity_split</strong>：早停的阈值，如果一个节点的不纯度高于该值，则分裂，否则为叶子结点</p><p>Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.<em>Deprecated since version 0.19:</em> <code>min_impurity_split</code> has been deprecated in favor of <code>min_impurity_decrease</code> in 0.19. The default value of <code>min_impurity_split</code> will change from 1e-7 to 0 in 0.23 and it will be removed in 0.25. Use <code>min_impurity_decrease</code> instead.</p></li><li><p><strong>bootstrap</strong>： 是否使用bootstrap采样，为否表示使用整个数据集</p></li><li><p><strong>oob_score</strong>：袋外精度来泛化</p><p>Whether to use out-of-bag samples to estimate the generalization accuracy.</p></li><li><p><strong>class_weight</strong>：类别权重，用于样本分布不均衡时使用</p><ul><li>‘’dict, list of dicts, “balanced”, “balanced_subsample” or None, optional (default=None）</li><li>格式为<code>{class_label: weight}</code> ，例如 {0: 1, 1: 1}</li><li>’balanced‘模式下会自动调整权值，根据训练数据中类别出现频率， n_samples/(n_class *np.bincount())</li><li>‘balanced_subsample’和balanced一样，区别在于才用的boostrap</li></ul></li><li><p><strong>max_samples</strong>：从训练集中取出的每个样本量</p><ul><li>None：表示使用所有样本</li><li>如果为int 表示为该值</li><li>float表示 百分比</li></ul></li></ul><p><em>class</em> <code>sklearn.ensemble.``GradientBoostingRegressor</code></p><ul><li><p><strong>loss</strong> ：损失函数，默认为ls</p><ul><li><p>‘ls’ 平方损失函数，损失函数为$L(y)=(y-f(x))^2$</p></li><li><p>‘lad’，绝对值 ,损失函数 $L(y)=|y-f(x)|$</p></li><li><p>‘huber’： 两者的结合</p><script type="math/tex; mode=display">L(y)=\left\{\begin{array}{rcl}\frac{1}{2}(y-f(x))^2 & & {|y-f(x)|\leq\delta}\\\delta*|y-f(x)-\frac{1}{2}\delta| & & {|y-f(x)|>\delta}\end{array} \right.</script></li></ul></li><li><p><strong>subsample</strong>：子采样比例，子采样会减少方差，增大偏差</p></li><li><p><strong>criterion</strong>： 衡量节点分裂质量的指标</p><ul><li>friedman_mse, </li><li>‘mse’</li><li>’mae‘</li></ul></li></ul><p><em>New in version 0.18.</em></p><ul><li><p><strong>min_samples_split</strong>: 和分类一样</p></li><li><p><strong>tol</strong>：学习率</p></li></ul><p>参考资料</p><p>[1]<a href="https://zhuanlan.zhihu.com/p/86281279" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/86281279</a></p><p>[2].统计学习方法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GBDT主要由三个概念组成：Regression Decistion Tree（即DT)，Gradient Boosting（即GB)，Shrinkage（算法的一个重要演进分枝，目前大部分源码都按该版本实现）。搞定这三个概念后就能明白GBDT是如何工作的，要继续理解它如何用于搜索排序则需要额外理解RankNet概念，之后便功德圆满。下文将逐个碎片介绍，最终把整张图拼出来。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="决策树" scheme="http://yoursite.com/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
      <category term="集成学习" scheme="http://yoursite.com/tags/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>pandas的基本用法</title>
    <link href="http://yoursite.com/2019/10/05/pandas%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/05/pandas的基本用法/</id>
    <published>2019-10-05T03:29:03.000Z</published>
    <updated>2019-12-15T07:23:41.541Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="数据分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib的基本用法</title>
    <link href="http://yoursite.com/2019/10/04/Matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/04/Matplotlib的基本用法/</id>
    <published>2019-10-04T15:20:03.000Z</published>
    <updated>2019-10-05T02:43:47.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matplotlib的基本用法"><a href="#Matplotlib的基本用法" class="headerlink" title="Matplotlib的基本用法"></a>Matplotlib的基本用法</h1><h2 id="简单的折线图"><a href="#简单的折线图" class="headerlink" title="简单的折线图"></a>简单的折线图</h2><p><strong>plt.plot(x,y, fortmat_string)</strong></p><p>作用是定义画图的样式</p><p>x,y表示横纵左表， format可以定义画图格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入Matploylib库</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt  </span><br><span class="line">%matplotlib inline     </span><br><span class="line"><span class="comment">#画布上画图</span></span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="string">'b'</span>,  linewidth=<span class="number">2</span>)</span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>], <span class="string">'r'</span>,   linewidth=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#在画布上显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_1_0.png" alt="png"></p><h2 id="添加标题标签及图的样式"><a href="#添加标题标签及图的样式" class="headerlink" title="添加标题标签及图的样式"></a>添加标题标签及图的样式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt  </span><br><span class="line">%matplotlib inline </span><br><span class="line">x = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>]</span><br><span class="line">y = [<span class="number">2</span>,<span class="number">16</span>,<span class="number">4</span>]</span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment"># 图片的标题</span></span><br><span class="line">plt.title(<span class="string">'Image Title'</span>)</span><br><span class="line"><span class="comment"># 坐标轴Y轴</span></span><br><span class="line">plt.ylabel(<span class="string">'Y axis'</span>)</span><br><span class="line"><span class="comment"># 坐标轴X轴</span></span><br><span class="line">plt.xlabel(<span class="string">'X axis'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_3_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> style </span><br><span class="line">style.use(<span class="string">'ggplot'</span>)</span><br><span class="line">x = [<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">y = [<span class="number">12</span>,<span class="number">16</span>,<span class="number">6</span>]</span><br><span class="line">x2 = [<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line">y2 = [<span class="number">6</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">plt.plot(x,y,<span class="string">'g'</span>,label=<span class="string">'line one'</span>, linewidth=<span class="number">5</span>)</span><br><span class="line">plt.plot(x2,y2,<span class="string">'r'</span>,label=<span class="string">'line two'</span>,linewidth=<span class="number">5</span>)</span><br><span class="line">plt.title(<span class="string">'Epic Info'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y axis'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'X axis'</span>)</span><br><span class="line"><span class="comment">#设置图例位置</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(<span class="literal">True</span>,color=<span class="string">'k'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_4_0.png" alt="png"></p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p>pyplot.bar(left, height, alpha=1, width=0.8, color=, edgecolor=, label=, lw=3)</p><p>画一个柱状图</p><p>参数</p><ul><li>left： x轴的位置序列，一般采用arange函数产生一个序列</li><li>height: y轴的数值序列，也就是柱状图的高度，即我们需要展示的数据</li><li>alpha： 透明度</li><li>width: 柱状图的宽度</li><li>color or facecolor: 柱状图的填充颜色</li><li>edgecolor: 图形边缘颜色</li><li>label: 每个图像代表的意思</li><li>linewidth or linewidths or lw：边缘or线的宽度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line">plt.bar([<span class="number">0.25</span>,<span class="number">1.25</span>,<span class="number">2.25</span>,<span class="number">3.25</span>,<span class="number">4.25</span>],[<span class="number">50</span>,<span class="number">40</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">20</span>],label=<span class="string">"BMW"</span>, color=<span class="string">'b'</span>, width=<span class="number">.5</span>)</span><br><span class="line">plt.bar([<span class="number">.75</span>,<span class="number">1.75</span>,<span class="number">2.75</span>,<span class="number">3.75</span>,<span class="number">4.75</span>],[<span class="number">80</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">60</span>],label=<span class="string">"Audi"</span>, color=<span class="string">'r'</span>,width=<span class="number">.5</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">'Days'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Distance (kms)'</span>)</span><br><span class="line">plt.title(<span class="string">'Information'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_7_0.png" alt="png"></p><h2 id="频率图"><a href="#频率图" class="headerlink" title="频率图"></a>频率图</h2><p>matplotlib.pyplot.hist(x, bins=10, range=None, normed=False, weights=None, cumulative=False, bottom=None, histtype=u’bar’, align=u’mid’, orientation=u’vertical’, rwidth=None, log=False, color=None, label=None, stacked=False)</p><p>统计每个区间出现的频率</p><p>参数</p><ul><li>x：直方图统计的数据</li><li>bins: 指定统计的间隔，如bins=10时表示以10为一个区间</li><li>color: 柱状图的颜色</li><li>histtype: 可选{‘bar’, ‘barstacked’,’step’, ‘stepfilled’}之一</li><li>density: 显示频率</li><li>stacked: 是否显示堆叠柱状图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">population_age = [<span class="number">22</span>,<span class="number">55</span>,<span class="number">62</span>,<span class="number">45</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">34</span>,<span class="number">42</span>,<span class="number">42</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">102</span>,<span class="number">95</span>,<span class="number">85</span>,<span class="number">55</span>,<span class="number">110</span>,<span class="number">120</span>,<span class="number">70</span>,<span class="number">65</span>,<span class="number">55</span>,<span class="number">111</span>,<span class="number">115</span>,<span class="number">80</span>,<span class="number">75</span>,<span class="number">65</span>,<span class="number">54</span>,<span class="number">44</span>,<span class="number">43</span>,<span class="number">42</span>,<span class="number">48</span>]</span><br><span class="line">bins = [<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>]</span><br><span class="line">plt.hist(population_age, bins=<span class="number">10</span>, histtype=<span class="string">'bar'</span>, color=<span class="string">'b'</span>, rwidth=<span class="number">0.8</span>)</span><br><span class="line">plt.xlabel(<span class="string">'age groups'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Number of people'</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_10_0.png" alt="png"></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">1.5</span>,<span class="number">2</span>,<span class="number">2.5</span>,<span class="number">3</span>,<span class="number">3.5</span>,<span class="number">3.6</span>]</span><br><span class="line">y = [<span class="number">7.5</span>,<span class="number">8</span>,<span class="number">8.5</span>,<span class="number">9</span>,<span class="number">9.5</span>,<span class="number">10</span>,<span class="number">10.5</span>] </span><br><span class="line">x1=[<span class="number">8</span>,<span class="number">8.5</span>,<span class="number">9</span>,<span class="number">9.5</span>,<span class="number">10</span>,<span class="number">10.5</span>,<span class="number">11</span>]</span><br><span class="line">y1=[<span class="number">3</span>,<span class="number">3.5</span>,<span class="number">3.7</span>,<span class="number">4</span>,<span class="number">4.5</span>,<span class="number">5</span>,<span class="number">5.2</span>] </span><br><span class="line"><span class="comment"># scatter表示画散点图</span></span><br><span class="line">plt.scatter(x,y, label=<span class="string">'high income low saving'</span>,color=<span class="string">'r'</span>)</span><br><span class="line">plt.scatter(x1,y1,label=<span class="string">'low income high savings'</span>,color=<span class="string">'b'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'saving*100'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'income*1000'</span>)</span><br><span class="line">plt.title(<span class="string">'Scatter Plot'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_12_0.png" alt="png"></p><h2 id="堆叠图"><a href="#堆叠图" class="headerlink" title="堆叠图"></a>堆叠图</h2><p>matplotlib.pyplot.stackplot(x, <em>args, labels=(), colors=None, baseline=’zero’, data=None, *</em>kwargs)</p><p>画堆叠图，主要有三个参数</p><ul><li>x:需要画堆叠图的数值</li><li>laebl: 堆叠图中折现的标签</li><li>colors: 设置折线图的颜色</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sleeping =[<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">eating = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">working =[<span class="number">7</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">playing = [<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">13</span>] </span><br><span class="line">labels = [<span class="string">'Sleeping'</span>, <span class="string">'Eating'</span>, <span class="string">'Working'</span>, <span class="string">'Playing'</span>]</span><br><span class="line">plt.stackplot(days, sleeping,eating,working,playing,labels=labels,colors=[<span class="string">'m'</span>,<span class="string">'c'</span>,<span class="string">'r'</span>,<span class="string">'k'</span>])  </span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y'</span>)</span><br><span class="line">plt.title(<span class="string">'Stack Plot'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_15_0.png" alt="png"></p><h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">slices = [<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">13</span>]</span><br><span class="line">activities = [<span class="string">'sleeping'</span>,<span class="string">'eating'</span>,<span class="string">'working'</span>,<span class="string">'playing'</span>]</span><br><span class="line">cols = [<span class="string">'c'</span>,<span class="string">'m'</span>,<span class="string">'r'</span>,<span class="string">'b'</span>] </span><br><span class="line">plt.pie(slices,  labels=activities,  colors=cols,  startangle=<span class="number">90</span>,  shadow= <span class="literal">True</span>,  explode=(<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>),  autopct=<span class="string">'%1.1f%%'</span>) </span><br><span class="line">plt.title(<span class="string">'Pie Plot'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_17_0.png" alt="png"></p><h2 id="多个子图合并"><a href="#多个子图合并" class="headerlink" title="多个子图合并"></a>多个子图合并</h2><p>plt.subplot(numRows, numCols, plotNum)</p><p>将一块画布分为多个区域，将不同图分别放入不同的子图</p><p>参数</p><ul><li>numRows：指的行数</li><li>numCols：指的列数</li><li>plotNum：子图的位置</li></ul><p>如上面所示的221，表示的是将图分为2 * 2个子图，然后使用第一个位置</p><p>子图的位置依次为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1,1) (1,2)</span><br><span class="line"></span><br><span class="line">(2,1) (2,2)</span><br></pre></td></tr></table></figure><p>依次对应的位置为1,2,3,4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span>    </span><br><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.plot(t1, f(t1), <span class="string">'bo'</span>, t2, f(t2))</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.plot(t2, np.cos(<span class="number">2</span>*np.pi*t2))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_19_0.png" alt="png"></p><h1 id="pandas与matplotlib结合"><a href="#pandas与matplotlib结合" class="headerlink" title="pandas与matplotlib结合"></a>pandas与matplotlib结合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>np.random.rand(nums)</p><p>随即产生nums个位于[0,1]的样本</p><p>np.random.randn(nums)</p><p>随即返回nums个标准正态分布的样本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(np.random.rand(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x24f3122c2b0&gt;]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_23_1.png" alt="png"></p><h2 id="设置坐标轴刻度"><a href="#设置坐标轴刻度" class="headerlink" title="设置坐标轴刻度"></a>设置坐标轴刻度</h2><ul><li>图名</li><li>x轴标签</li><li>y轴标签</li><li>图例</li><li>x轴边界</li><li>y轴边界</li><li>x轴刻度</li><li>y轴刻度</li><li>x轴刻度标签</li><li>y轴刻度标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">2</span>),columns=[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line">fig = df.plot(figsize=(<span class="number">8</span>,<span class="number">4</span>))  <span class="comment"># figsize：创建图表窗口，设置窗口大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'TITLETITLETITLE'</span>)  <span class="comment"># 图名</span></span><br><span class="line">plt.xlabel(<span class="string">'XXXXXX'</span>)  <span class="comment"># x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">'YYYYYY'</span>) <span class="comment"># y轴标签</span></span><br><span class="line"></span><br><span class="line">plt.legend(loc = <span class="string">'upper right'</span>) <span class="comment"># 显示图例，loc表示位置</span></span><br><span class="line"></span><br><span class="line">plt.xlim([<span class="number">0</span>,<span class="number">12</span>])  <span class="comment"># x轴边界</span></span><br><span class="line">plt.ylim([<span class="number">0</span>,<span class="number">1.5</span>])  <span class="comment"># y轴边界</span></span><br><span class="line"></span><br><span class="line">plt.xticks(range(<span class="number">10</span>))  <span class="comment"># 设置x刻度</span></span><br><span class="line">plt.yticks([<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.0</span>,<span class="number">1.2</span>])  <span class="comment"># 设置y刻度</span></span><br><span class="line"></span><br><span class="line">fig.set_xticklabels(<span class="string">"%.1f"</span> %i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))  <span class="comment"># x轴刻度标签</span></span><br><span class="line">fig.set_yticklabels(<span class="string">"%.2f"</span> %i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>,<span class="number">0.8</span>,<span class="number">1.0</span>,<span class="number">1.2</span>])  <span class="comment"># y轴刻度标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里x轴范围是0-12，但刻度只是0-9，刻度标签使得其显示1位小数</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Text(0, 0, &apos;0.00&apos;),</span><br><span class="line"> Text(0, 0, &apos;0.20&apos;),</span><br><span class="line"> Text(0, 0, &apos;0.40&apos;),</span><br><span class="line"> Text(0, 0, &apos;0.60&apos;),</span><br><span class="line"> Text(0, 0, &apos;0.80&apos;),</span><br><span class="line"> Text(0, 0, &apos;1.00&apos;),</span><br><span class="line"> Text(0, 0, &apos;1.20&apos;)]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_25_1.png" alt="png"></p><h2 id="修改图标样式"><a href="#修改图标样式" class="headerlink" title="修改图标样式"></a>修改图标样式</h2><p>pd.Series()作用是产生一个有编号的序列</p><p>np.random.randn()产生正太分布的样本，当只有一个参数是，返回n个标准正太分布的结果，当有两个或多个参数时，参数表示对应的维度</p><p>np.random.rand() 用法和上面一个函数一样，但是返回的是</p><p>np.cumsum()表示将前一行或者前一列加到后面</p><p>参数</p><p>​         a：表示传入函数的数据<br>         axi：{0,1}，axi=0时表示行相加，axi=1时表示列相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(np.random.randn(<span class="number">100</span>).cumsum())</span><br><span class="line">s.plot(linestyle = <span class="string">'--'</span>, marker = <span class="string">'.'</span>,color=<span class="string">"r"</span>,grid=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_27_1.png" alt="png"></p><h2 id="dataframe直接画图"><a href="#dataframe直接画图" class="headerlink" title="dataframe直接画图"></a>dataframe直接画图</h2><p>DataFrame.plot(x=None, y=None, kind=’line’, ax=None, subplots=False,<br>                sharex=None, sharey=False, layout=None,figsize=None,<br>                use_index=True, title=None, grid=None, legend=True,<br>                style=None, logx=False, logy=False, loglog=False,<br>                xticks=None, yticks=None, xlim=None, ylim=None, rot=None,<br>                xerr=None,secondary_y=False, sort_columns=False, **kwds)</p><p>Parameters:<br>x : label or position, default None#指数据框列的标签或位置参数</p><p>y : label or position, default None</p><p>kind : str<br>‘line’ : line plot (default)#折线图<br>‘bar’ : vertical bar plot#条形图<br>‘barh’ : horizontal bar plot#横向条形图<br>‘hist’ : histogram#柱状图<br>‘box’ : boxplot#箱线图<br>‘kde’ : Kernel Density Estimation plot#Kernel 的密度估计图，主要对柱状图添加Kernel 概率密度线<br>‘density’ : same as ‘kde’<br>‘area’ : area plot#不了解此图<br>‘pie’ : pie plot#饼图<br>‘scatter’ : scatter plot#散点图  需要传入columns方向的索引<br>‘hexbin’ : hexbin plot#不了解此图</p><p>ax : matplotlib axes object, default None#<strong>子图(axes, 也可以理解成坐标轴) 要在其上进行绘制的matplotlib subplot对象。如果没有设置，则使用当前matplotlib subplot</strong>其中，变量和函数通过改变figure和axes中的元素（例如：title,label,点和线等等）一起描述figure和axes，也就是在画布上绘图。</p><ul><li>subplots : boolean, default False#判断图片中是否有子图</li></ul><p>Make separate subplots for each column</p><ul><li>sharex : boolean, default True if ax is None else False#如果有子图，子图共x轴刻度，标签</li></ul><p>In case subplots=True, share x axis and set some x axis labels to invisible; defaults to True if ax is None otherwise False if an ax is passed in; Be aware, that passing in both an ax and sharex=True will alter all x axis labels for all axis in a figure!</p><ul><li>sharey : boolean, default False#如果有子图，子图共y轴刻度，标签</li></ul><p>In case subplots=True, share y axis and set some y axis labels to invisible</p><ul><li>layout : tuple (optional)#子图的行列布局</li></ul><p>(rows, columns) for the layout of subplots</p><ul><li><p>figsize : a tuple (width, height) in inches#图片尺寸大小</p></li><li><p>use_index : boolean, default True#默认用索引做x轴</p></li></ul><p>Use index as ticks for x axis</p><ul><li>title : string#图片的标题用字符串</li></ul><p>Title to use for the plot</p><ul><li>grid : boolean, default None (matlab style default)#图片是否有网格</li></ul><p>Axis grid lines</p><ul><li>legend : False/True/’reverse’#子图的图例，添加一个subplot图例(默认为True)</li></ul><p>Place legend on axis subplots</p><ul><li>style : list or dict#对每列折线图设置线的类型</li></ul><p>matplotlib line style per column</p><ul><li>logx : boolean, default False#设置x轴刻度是否取对数</li></ul><p>Use log scaling on x axis</p><ul><li>logy : boolean, default False</li></ul><p>Use log scaling on y axis</p><ul><li>loglog : boolean, default False#同时设置x，y轴刻度是否取对数</li></ul><p>Use log scaling on both x and y axes</p><ul><li>xticks : sequence#设置x轴刻度值，序列形式（比如列表）</li></ul><p>Values to use for the xticks</p><ul><li>yticks : sequence#设置y轴刻度，序列形式（比如列表）</li></ul><p>Values to use for the yticks</p><ul><li><p>xlim : 2-tuple/list#设置坐标轴的范围，列表或元组形式</p></li><li><p>ylim : 2-tuple/list</p></li><li><p>rot : int, default None#设置轴标签（轴刻度）的显示旋转度数</p></li></ul><p>Rotation for ticks (xticks for vertical, yticks for horizontal plots)</p><ul><li>fontsize : int, default None#设置轴刻度的字体大小</li></ul><p>Font size for xticks and yticks</p><ul><li>colormap : str or matplotlib colormap object, default None#设置图的区域颜色</li></ul><p>Colormap to select colors from. If string, load colormap with that name from matplotlib.</p><ul><li>colorbar : boolean, optional  #图片柱子</li></ul><p>If True, plot colorbar (only relevant for ‘scatter’ and ‘hexbin’ plots)</p><ul><li>position : float   </li></ul><p>Specify relative alignments for bar plot layout. From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5 (center)</p><ul><li>layout : tuple (optional)  #布局</li></ul><p>(rows, columns) for the layout of the plot</p><ul><li>table : boolean, Series or DataFrame, default False  #如果为正，则选择DataFrame类型的数据并且转换匹配matplotlib的布局。</li></ul><p>If True, draw a table using the data in the DataFrame and the data will be transposed to meet matplotlib’s default layout. If a Series or DataFrame is passed, use passed data to draw a table.</p><ul><li>yerr : DataFrame, Series, array-like, dict and str</li></ul><p>See Plotting with Error Bars for detail.</p><ul><li><p>xerr : same types as yerr.</p></li><li><p>stacked : boolean, default False in line and</p></li></ul><p>bar plots, and True in area plot. If True, create stacked plot.</p><ul><li><p>sort_columns : boolean, default False  # 以字母表顺序绘制各列，默认使用前列顺序</p></li><li><p>secondary_y : boolean or sequence, default False  ##设置第二个y轴（右y轴）</p></li></ul><p>Whether to plot on the secondary y-axis If a list/tuple, which columns to plot on secondary y-axis</p><ul><li>mark_right : boolean, default True</li></ul><p>When using a secondary_y axis, automatically mark the column labels with “(right)” in the legend</p><ul><li>kwds : keywords</li></ul><p>Options to pass to matplotlib plotting method</p><p><strong>Returns:axes : matplotlib.AxesSubplot or np.array of them</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接用风格样式设置</span></span><br><span class="line"><span class="comment"># 透明度与颜色版</span></span><br><span class="line"><span class="comment"># s.plot(style="--.",alpha = 0.8,colormap = 'Reds_r')</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">100</span>, <span class="number">4</span>),columns=list(<span class="string">'ABCD'</span>)).cumsum()</span><br><span class="line">df.plot(style = <span class="string">'--.'</span>,alpha = <span class="number">0.8</span>,colormap = <span class="string">'summer_r'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x24f379a4cc0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_29_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">df.plot(style = <span class="string">'--o'</span>)</span><br><span class="line">plt.text(<span class="number">5</span>,<span class="number">0.5</span>,<span class="string">'Hello'</span>,fontsize=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(5, 0.5, &apos;Hello&apos;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_30_1.png" alt="png"></p><h2 id="子图绘制"><a href="#子图绘制" class="headerlink" title="子图绘制"></a>子图绘制</h2><h3 id="figure对象"><a href="#figure对象" class="headerlink" title="figure对象"></a>figure对象</h3><p>plt.figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class 'matplotlib.figure.figure'>, **kwargs)</class></p><p>作用创建一块画布</p><p>num相当于id，如果没有id则递增创建，如果已存在则返回该存在的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig1 = plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(np.random.rand(<span class="number">50</span>).cumsum(),<span class="string">'k--'</span>)</span><br><span class="line">fig2 = plt.figure(num=<span class="number">2</span>,figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(<span class="number">50</span>-np.random.rand(<span class="number">50</span>).cumsum(),<span class="string">'k--'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x24f3780f6d8&gt;]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_32_1.png" alt="png"></p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_32_2.png" alt="png"></p><h3 id="先创建子图然后填充"><a href="#先创建子图然后填充" class="headerlink" title="先创建子图然后填充"></a>先创建子图然后填充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先建立子图然后填充图表</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>),facecolor = <span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个子图曲线图</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.plot(np.random.rand(<span class="number">50</span>).cumsum(),<span class="string">'k--'</span>)</span><br><span class="line">plt.plot(np.random.randn(<span class="number">50</span>).cumsum(),<span class="string">'b--'</span>)</span><br><span class="line"><span class="comment"># 第二个字图，直方图</span></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">ax2.hist(np.random.rand(<span class="number">50</span>),alpha=<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个饼状图</span></span><br><span class="line">slices = [<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">13</span>]</span><br><span class="line">activities = [<span class="string">'sleeping'</span>,<span class="string">'eating'</span>,<span class="string">'working'</span>,<span class="string">'playing'</span>]</span><br><span class="line">cols = [<span class="string">'c'</span>,<span class="string">'m'</span>,<span class="string">'r'</span>,<span class="string">'b'</span>]</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">223</span>)</span><br><span class="line">ax3.pie(slices,  labels=activities,  colors=cols,  startangle=<span class="number">90</span>,  shadow= <span class="literal">True</span>,  explode=(<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>),  autopct=<span class="string">'%1.1f%%'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四个折线图</span></span><br><span class="line">ax4 = fig.add_subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>) </span><br><span class="line">df2 = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">4</span>), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">ax4.plot(df2,alpha=<span class="number">0.5</span>,linestyle=<span class="string">'--'</span>,marker=<span class="string">'.'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x24f38c19940&gt;,</span><br><span class="line"> &lt;matplotlib.lines.Line2D at 0x24f3905ed68&gt;,</span><br><span class="line"> &lt;matplotlib.lines.Line2D at 0x24f3905ef28&gt;,</span><br><span class="line"> &lt;matplotlib.lines.Line2D at 0x24f3906b0f0&gt;]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_34_1.png" alt="png"></p><h3 id="使用subplots子图数组填充子图"><a href="#使用subplots子图数组填充子图" class="headerlink" title="使用subplots子图数组填充子图"></a>使用subplots子图数组填充子图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的figure，并返回一个subplot对象的numpy数组 → plt.subplot</span></span><br><span class="line"></span><br><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">3</span>,figsize=(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line">ts = pd.Series(np.random.randn(<span class="number">1000</span>).cumsum())</span><br><span class="line">print(axes, axes.shape, type(axes))</span><br><span class="line"><span class="comment"># 生成图表对象的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过数组访问对应的子图</span></span><br><span class="line">ax1 = axes[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">ax1.plot(ts)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F38EFABA8&gt;</span><br><span class="line">  &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F38F13BA8&gt;</span><br><span class="line">  &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F38CA4C88&gt;]</span><br><span class="line"> [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F38CC8DA0&gt;</span><br><span class="line">  &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F38CECEB8&gt;</span><br><span class="line">  &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F38D17320&gt;]] (2, 3) &lt;class &apos;numpy.ndarray&apos;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;matplotlib.lines.Line2D at 0x24f38d39978&gt;]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_36_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.subplots 参数调整</span></span><br><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">2</span>,sharex=<span class="literal">True</span>,sharey=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># sharex,sharey：是否共享x，y刻度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        axes[i,j].hist(np.random.randn(<span class="number">500</span>),color=<span class="string">'k'</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># wspace,hspace：用于控制宽度和高度的百分比，比如subplot之间的间距</span></span><br><span class="line">plt.subplots_adjust(wspace=<span class="number">0</span>,hspace=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_37_0.png" alt="png"></p><h3 id="多系列子图绘制"><a href="#多系列子图绘制" class="headerlink" title="多系列子图绘制"></a>多系列子图绘制</h3><p>plt.plot():</p><ul><li>subplots, 是否分别绘制子图,为true的时候表示分开绘制，为false表示在一个图立面绘制</li><li>layout：挥之子图矩阵，按顺序填充</li></ul><p>subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)</p><p> 有六个可选参数来控制子图布局。值均为0~1之间。其中left、bottom、right、top围成的区域就是子图的区域。wspace、hspace分别表示子图之间左右、上下的间距。实际的默认值由matplotlibrc文件控制的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index=ts.index, columns=list(<span class="string">'ABCD'</span>))</span><br><span class="line">df = df.cumsum()</span><br><span class="line">df.plot(style = <span class="string">'--.'</span>,alpha = <span class="number">0.4</span>,grid = <span class="literal">True</span>,figsize = (<span class="number">20</span>,<span class="number">8</span>),</span><br><span class="line">       subplots = <span class="literal">True</span>,</span><br><span class="line">       layout = (<span class="number">2</span>,<span class="number">2</span>),</span><br><span class="line">       sharex = <span class="literal">False</span>)</span><br><span class="line">plt.subplots_adjust(wspace=<span class="number">0.1</span>,hspace=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_39_0.png" alt="png"></p><h2 id="基本图表绘制"><a href="#基本图表绘制" class="headerlink" title="基本图表绘制"></a>基本图表绘制</h2><h3 id="Series-与-DataFrame-绘图"><a href="#Series-与-DataFrame-绘图" class="headerlink" title="Series 与 DataFrame 绘图"></a>Series 与 DataFrame 绘图</h3><p>plt.plot(kind=’line’, ax=None, figsize=None, use_index=True, title=None, grid=None, legend=False,<br>style=None, logx=False, logy=False, loglog=False, xticks=None, yticks=None, xlim=None, ylim=None,<br>rot=None, fontsize=None, colormap=None, table=False, yerr=None, xerr=None, label=None, secondary_y=False, **kwds)</p><p>参数含义：</p><ul><li>series的index为横坐标</li><li>value为纵坐标</li><li>kind → line,bar,barh…（折线图，柱状图，柱状图-横…）</li><li>label → 图例标签，Dataframe格式以列名为label</li><li>style → 风格字符串，这里包括了linestyle（-），marker（.），color（g）</li><li>color → 颜色，有color指定时候，以color颜色为准</li><li>alpha → 透明度，0-1</li><li>use_index → 将索引用为刻度标签，默认为True</li><li>rot → 旋转刻度标签，0-360</li><li>grid → 显示网格，一般直接用plt.grid</li><li>xlim,ylim → x,y轴界限</li><li>xticks,yticks → x,y轴刻度值</li><li>figsize → 图像大小</li><li>title → 图名</li><li>legend → 是否显示图例，一般直接用plt.legend()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Series(np.random.randn(<span class="number">1000</span>), index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">1000</span>)) <span class="comment"># pandas 时间序列</span></span><br><span class="line">ts = ts.cumsum()</span><br><span class="line">ts.plot(kind=<span class="string">'line'</span>,</span><br><span class="line">       label = <span class="string">"what"</span>,</span><br><span class="line">       style = <span class="string">'--.'</span>,</span><br><span class="line">       color = <span class="string">'g'</span>,</span><br><span class="line">       alpha = <span class="number">0.4</span>,</span><br><span class="line">       use_index = <span class="literal">True</span>,</span><br><span class="line">       rot = <span class="number">45</span>,</span><br><span class="line">       grid = <span class="literal">True</span>,</span><br><span class="line">       ylim = [<span class="number">-50</span>,<span class="number">50</span>],</span><br><span class="line">       yticks = list(range(<span class="number">-50</span>,<span class="number">50</span>,<span class="number">10</span>)),</span><br><span class="line">       figsize = (<span class="number">8</span>,<span class="number">4</span>),</span><br><span class="line">       title = <span class="string">'TEST_TEST'</span>,</span><br><span class="line">       legend = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 对网格项进行更加细致的设置</span></span><br><span class="line"><span class="comment">#plt.grid(True, linestyle = "--",color = "gray", linewidth = "0.5",axis = 'x')  # 网格</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_41_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># subplots → 是否将各个列绘制到不同图表，默认False</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index=ts.index, columns=list(<span class="string">'ABCD'</span>)).cumsum()</span><br><span class="line">df.plot(kind=<span class="string">'line'</span>,</span><br><span class="line">       style = <span class="string">'--.'</span>,</span><br><span class="line">       alpha = <span class="number">0.4</span>,</span><br><span class="line">       use_index = <span class="literal">True</span>,</span><br><span class="line">       rot = <span class="number">45</span>,</span><br><span class="line">       grid = <span class="literal">True</span>,</span><br><span class="line">       figsize = (<span class="number">8</span>,<span class="number">4</span>),</span><br><span class="line">       title = <span class="string">'test'</span>,</span><br><span class="line">       legend = <span class="literal">True</span>,</span><br><span class="line">       subplots = <span class="literal">False</span>,</span><br><span class="line">       colormap = <span class="string">'Greens'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x24f32b0f630&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_42_1.png" alt="png"></p><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><ul><li>plt.bar()<ul><li>x,y参数：x，y值</li><li>width：宽度比例</li><li>facecolor柱状图里填充的颜色、edgecolor是边框的颜色</li><li>left-每个柱x轴左边界,bottom-每个柱y轴下边界 → bottom扩展即可化为甘特图 Gantt Chart</li><li>align：决定整个bar图分布，默认left表示默认从左边界开始绘制,center会将图绘制在中间位置<br>xerr/yerr ：x/y方向error bar</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的figure，并返回一个subplot对象的numpy数组</span></span><br><span class="line">fig,axes = plt.subplots(<span class="number">4</span>,<span class="number">1</span>,figsize = (<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">s = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">16</span>),index = list(<span class="string">'abcdefghijklmnop'</span>))  </span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">3</span>), columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单系列柱状图方法一：plt.plot(kind='bar/barh')</span></span><br><span class="line">s.plot(kind=<span class="string">'bar'</span>,color = <span class="string">'k'</span>,grid = <span class="literal">True</span>,alpha = <span class="number">0.5</span>,ax = axes[<span class="number">0</span>])  <span class="comment"># ax参数 → 选择第几个子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多系列柱状图</span></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">3</span>), columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">df.plot(kind=<span class="string">'bar'</span>,ax = axes[<span class="number">1</span>],grid = <span class="literal">True</span>,colormap=<span class="string">'Reds_r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多系列堆叠图</span></span><br><span class="line"><span class="comment"># stacked → 堆叠</span></span><br><span class="line">df.plot(kind=<span class="string">'bar'</span>,ax = axes[<span class="number">2</span>],grid = <span class="literal">True</span>,colormap=<span class="string">'Blues_r'</span>,stacked=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># The bars are positioned at y with the given align. Their dimensions are given by width and height. The horizontal baseline is left (default 0). </span></span><br><span class="line"><span class="comment"># https://matplotlib.org/api/_as_gen/matplotlib.pyplot.barh.html?highlight=barh#matplotlib.pyplot.barh</span></span><br><span class="line">df.plot.barh(ax = axes[<span class="number">3</span>],grid = <span class="literal">True</span>,stacked=<span class="literal">True</span>,colormap = <span class="string">'BuGn_r'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x24f32cf0550&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_44_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">y1 = np.random.rand(<span class="number">10</span>)</span><br><span class="line">y2 = -np.random.rand(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.bar(x,y1,width = <span class="number">1</span>,facecolor = <span class="string">'yellowgreen'</span>,edgecolor = <span class="string">'white'</span>,yerr = y1*<span class="number">0.1</span>)</span><br><span class="line">plt.bar(x,y2,width = <span class="number">1</span>,facecolor = <span class="string">'lightskyblue'</span>,edgecolor = <span class="string">'white'</span>,yerr = y2*<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y1):</span><br><span class="line">    plt.text(i<span class="number">-0.2</span>,j<span class="number">-0.15</span>,<span class="string">'%.2f'</span> % j, color = <span class="string">'white'</span>)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,y2):</span><br><span class="line">    plt.text(i<span class="number">-0.2</span>,j+<span class="number">0.05</span>,<span class="string">'%.2f'</span> % -j, color = <span class="string">'white'</span>)</span><br><span class="line"><span class="comment"># 给图添加text</span></span><br><span class="line"><span class="comment"># zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_45_0.png" alt="png"></p><h3 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h3><ul><li>stacked：是否堆叠，默认情况下，区域图被堆叠</li><li>为了产生堆积面积图，每列必须是正值或全部负值！</li><li>当数据有NaN时候，自动填充0，图标签需要清洗掉缺失值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">1</span>,figsize = (<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">4</span>), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line">df1.plot.area(colormap = <span class="string">'Greens_r'</span>,alpha = <span class="number">0.5</span>,ax = axes[<span class="number">0</span>])</span><br><span class="line">df2.plot.area(stacked=<span class="literal">False</span>,colormap = <span class="string">'Set2'</span>,alpha = <span class="number">0.5</span>,ax = axes[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x24f3288f668&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_47_1.png" alt="png"></p><h3 id="填图"><a href="#填图" class="headerlink" title="填图"></a>填图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">1</span>,figsize = (<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">500</span>)</span><br><span class="line">y1 = np.sin(<span class="number">4</span> * np.pi * x) * np.exp(<span class="number">-5</span> * x)</span><br><span class="line">y2 = -np.sin(<span class="number">4</span> * np.pi * x) * np.exp(<span class="number">-5</span> * x)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>].fill(x, y1, <span class="string">'r'</span>,alpha=<span class="number">0.5</span>,label=<span class="string">'y1'</span>)</span><br><span class="line">axes[<span class="number">0</span>].fill(x, y2, <span class="string">'g'</span>,alpha=<span class="number">0.5</span>,label=<span class="string">'y2'</span>)</span><br><span class="line"><span class="comment"># 对函数与坐标轴之间的区域进行填充，使用fill函数</span></span><br><span class="line"><span class="comment"># 也可写成：plt.fill(x, y1, 'r',x, y2, 'g',alpha=0.5)</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">5</span> * np.pi, <span class="number">1000</span>) </span><br><span class="line">y1 = np.sin(x)  </span><br><span class="line">y2 = np.sin(<span class="number">2</span> * x)  </span><br><span class="line">axes[<span class="number">1</span>].fill_between(x, y1, y2, color =<span class="string">'b'</span>,alpha=<span class="number">0.5</span>,label=<span class="string">'area'</span>)  </span><br><span class="line"><span class="comment"># 填充两个函数之间的区域，使用fill_between函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">    axes[i].legend()</span><br><span class="line">    axes[i].grid()</span><br><span class="line"><span class="comment"># 添加图例、格网</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_49_0.png" alt="png"></p><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><p>plt.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None, radius=None, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, hold=None, data=None)</p><ul><li>参数含义：<ul><li>第一个参数：数据</li><li>explode：指定每部分的偏移量</li><li>labels：标签</li><li>colors：颜色</li><li>autopct：饼图上的数据标签显示方式</li><li>pctdistance：每个饼切片的中心和通过autopct生成的文本开始之间的比例</li><li>labeldistance：被画饼标记的直径,默认值：1.1</li><li>shadow：阴影</li><li>startangle：开始角度</li><li>radius：半径</li><li>frame：图框</li><li>counterclock：指定指针方向，顺时针或者逆时针</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(<span class="number">3</span> * np.random.rand(<span class="number">4</span>), index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], name=<span class="string">'series'</span>)</span><br><span class="line">plt.axis(<span class="string">'equal'</span>)  <span class="comment"># 保证长宽相等</span></span><br><span class="line">plt.pie(s,</span><br><span class="line">       explode = [<span class="number">0.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">       labels = s.index,</span><br><span class="line">       colors=[<span class="string">'r'</span>, <span class="string">'g'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">       autopct=<span class="string">'%.2f%%'</span>,</span><br><span class="line">       pctdistance=<span class="number">0.6</span>,</span><br><span class="line">       labeldistance = <span class="number">1.2</span>,</span><br><span class="line">       shadow = <span class="literal">True</span>,</span><br><span class="line">       startangle=<span class="number">0</span>,</span><br><span class="line">       radius=<span class="number">1.5</span>,</span><br><span class="line">       frame=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_51_0.png" alt="png"></p><h3 id="直方图-1"><a href="#直方图-1" class="headerlink" title="直方图"></a>直方图</h3><p>plt.hist(x, bins=10, range=None, normed=False, weights=None, cumulative=False, bottom=None,<br>histtype=’bar’, align=’mid’, orientation=’vertical’,rwidth=None, log=False, color=None, label=None,<br>stacked=False, hold=None, data=None, **kwargs)</p><ul><li>参数<ul><li>bin：箱子的宽度</li><li>normed 标准化</li><li>histtype 风格，bar，barstacked，step，stepfilled</li><li>orientation 水平还是垂直{‘horizontal’, ‘vertical’}</li><li>align : {‘left’, ‘mid’, ‘right’}, optional(对齐方式)</li><li>stacked：是否堆叠</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直方图</span></span><br><span class="line">s = pd.Series(np.random.randn(<span class="number">1000</span>))</span><br><span class="line">s.hist(bins = <span class="number">20</span>,</span><br><span class="line">       histtype = <span class="string">'bar'</span>,</span><br><span class="line">       align = <span class="string">'mid'</span>,</span><br><span class="line">       orientation = <span class="string">'vertical'</span>,</span><br><span class="line">       alpha=<span class="number">0.5</span>,</span><br><span class="line">       normed =<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 密度图</span></span><br><span class="line">s.plot(kind=<span class="string">'kde'</span>,style=<span class="string">'k--'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files (x86)\Anaconda3\lib\site-packages\pandas\plotting\_core.py:2477: MatplotlibDeprecationWarning: </span><br><span class="line">The &apos;normed&apos; kwarg was deprecated in Matplotlib 2.1 and will be removed in 3.1. Use &apos;density&apos; instead.</span><br><span class="line">  ax.hist(values, bins=bins, **kwds)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_53_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 堆叠直方图</span></span><br><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'a'</span>: np.random.randn(<span class="number">1000</span>) + <span class="number">1</span>, <span class="string">'b'</span>: np.random.randn(<span class="number">1000</span>),</span><br><span class="line">                    <span class="string">'c'</span>: np.random.randn(<span class="number">1000</span>) - <span class="number">1</span>, <span class="string">'d'</span>: np.random.randn(<span class="number">1000</span>)<span class="number">-2</span>&#125;,</span><br><span class="line">                   columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df.plot.hist(stacked=<span class="literal">True</span>,</span><br><span class="line">             bins=<span class="number">20</span>,</span><br><span class="line">             colormap=<span class="string">'Greens_r'</span>,</span><br><span class="line">             alpha=<span class="number">0.5</span>,</span><br><span class="line">             grid=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 使用DataFrame.plot.hist()和Series.plot.hist()方法绘制</span></span><br><span class="line"></span><br><span class="line">df.hist(bins=<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 生成多个直方图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F34C1B710&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F34C4D2E8&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F34C80898&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F34CB2E48&gt;]],</span><br><span class="line">      dtype=object)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Figure size 432x288 with 0 Axes&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_54_2.png" alt="png"></p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_54_3.png" alt="png"></p><h3 id="散点图-1"><a href="#散点图-1" class="headerlink" title="散点图"></a>散点图</h3><p>plt.scatter(x, y, s=20, c=None, marker=’o’, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None,<br>verts=None, edgecolors=None, hold=None, data=None, **kwargs)</p><p>参数含义：</p><ul><li>s：散点的大小</li><li>c：散点的颜色</li><li>vmin,vmax：亮度设置，标量</li><li>cmap：colormap</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">x = np.random.randn(<span class="number">1000</span>)</span><br><span class="line">y = np.random.randn(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y,marker=<span class="string">'.'</span>,</span><br><span class="line">           s = np.random.randn(<span class="number">1000</span>)*<span class="number">100</span>,</span><br><span class="line">           cmap = <span class="string">'Reds_r'</span>,</span><br><span class="line">           c = y,</span><br><span class="line">           alpha = <span class="number">0.8</span>,)</span><br><span class="line">plt.grid()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files (x86)\Anaconda3\lib\site-packages\matplotlib\collections.py:857: RuntimeWarning: invalid value encountered in sqrt</span><br><span class="line">  scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_56_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pd.scatter_matrix()散点矩阵</span></span><br><span class="line"><span class="comment"># pd.scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, </span></span><br><span class="line"><span class="comment"># grid=False, diagonal='hist', marker='.', density_kwds=None, hist_kwds=None, range_padding=0.05, **kwds)</span></span><br><span class="line"><span class="comment"># diagonal：(&#123;‘hist’, ‘kde’&#125;)，必须且只能在&#123;‘hist’, ‘kde’&#125;中选择1个 → 每个指标的频率图</span></span><br><span class="line"><span class="comment"># range_padding：(float, 可选)，图像在x轴、y轴原点附近的留白(padding)，该值越大，留白距离越大，图像远离坐标原点</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">100</span>,<span class="number">4</span>),columns = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">pd.plotting.scatter_matrix(df,figsize=(<span class="number">10</span>,<span class="number">6</span>),</span><br><span class="line">                 marker = <span class="string">'o'</span>,</span><br><span class="line">                 diagonal=<span class="string">'kde'</span>,</span><br><span class="line">                 alpha = <span class="number">0.5</span>,</span><br><span class="line">                 range_padding=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F39EB5828&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F222278&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F37E518&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F391F98&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F3AF128&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F3C5278&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F3DC3C8&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F3F3550&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F3F3588&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F41FC18&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F43C208&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F4507B8&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F466D68&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F483358&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F498908&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3F4AFEB8&gt;]],</span><br><span class="line">      dtype=object)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_57_1.png" alt="png"></p><h3 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h3><p>箱型图：又称为盒须图、盒式图、盒状图或箱线图，是一种用作显示一组数据分散情况资料的统计图</p><p>包含一组数据的：最大值、最小值、中位数、上四分位数（Q1）、下四分位数（Q3）、异常值</p><p>① 中位数 → 一组数据平均分成两份，中间的数</p><p>② 下四分位数Q1 → 是将序列平均分成四份，计算(n+1)/4与(n-1)/4两种，一般使用(n+1)/4</p><p>③ 上四分位数Q3 → 是将序列平均分成四份，计算(1+n)/4*3=6.75</p><p>④ 内限 → T形的盒须就是内限，最大值区间Q3+1.5IQR,最小值区间Q1-1.5IQR （IQR=Q3-Q1）</p><p>⑤ 外限 → T形的盒须就是内限，最大值区间Q3+3IQR,最小值区间Q1-3IQR （IQR=Q3-Q1）</p><p>⑥ 异常值 → 内限之外 - 中度异常，外限之外 - 极度异常</p><p>plt.plot.box(),plt.boxplot()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.plot.box()绘制</span></span><br><span class="line"></span><br><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">1</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">5</span>), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">color = dict(boxes=<span class="string">'DarkGreen'</span>, whiskers=<span class="string">'DarkOrange'</span>, medians=<span class="string">'DarkBlue'</span>, caps=<span class="string">'Gray'</span>)</span><br><span class="line"><span class="comment"># 箱型图着色</span></span><br><span class="line"><span class="comment"># boxes → 箱线</span></span><br><span class="line"><span class="comment"># whiskers → 分位数与error bar横线之间竖线的颜色</span></span><br><span class="line"><span class="comment"># medians → 中位数线颜色</span></span><br><span class="line"><span class="comment"># caps → error bar横线颜色</span></span><br><span class="line"></span><br><span class="line">df.plot.box(ylim=[<span class="number">0</span>,<span class="number">1.2</span>],</span><br><span class="line">           grid = <span class="literal">True</span>,</span><br><span class="line">           color = color,</span><br><span class="line">           ax = axes[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x24f394cc9b0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_59_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>, <span class="number">5</span>), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment"># 创建图表、数据</span></span><br><span class="line"></span><br><span class="line">f = df.boxplot(sym = <span class="string">'o'</span>,  <span class="comment"># 异常点形状，参考marker</span></span><br><span class="line">               vert = <span class="literal">True</span>,  <span class="comment"># 是否垂直</span></span><br><span class="line">               whis = <span class="number">1.5</span>,  <span class="comment"># IQR，默认1.5，也可以设置区间比如[5,95]，代表强制上下边缘为数据95%和5%位置</span></span><br><span class="line">               patch_artist = <span class="literal">True</span>,  <span class="comment"># 上下四分位框内是否填充，True为填充</span></span><br><span class="line">               meanline = <span class="literal">False</span>,showmeans=<span class="literal">True</span>,  <span class="comment"># 是否有均值线及其形状</span></span><br><span class="line">               showbox = <span class="literal">True</span>,  <span class="comment"># 是否显示箱线</span></span><br><span class="line">               showcaps = <span class="literal">True</span>,  <span class="comment"># 是否显示边缘线</span></span><br><span class="line">               showfliers = <span class="literal">True</span>,  <span class="comment"># 是否显示异常值</span></span><br><span class="line">               notch = <span class="literal">False</span>,  <span class="comment"># 中间箱体是否缺口</span></span><br><span class="line">               return_type=<span class="string">'dict'</span>  <span class="comment"># 返回类型为字典</span></span><br><span class="line">              ) </span><br><span class="line">plt.title(<span class="string">'boxplot'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> box <span class="keyword">in</span> f[<span class="string">'boxes'</span>]:</span><br><span class="line">    box.set( color=<span class="string">'b'</span>, linewidth=<span class="number">1</span>)        <span class="comment"># 箱体边框颜色</span></span><br><span class="line">    box.set( facecolor = <span class="string">'b'</span> ,alpha=<span class="number">0.5</span>)    <span class="comment"># 箱体内部填充颜色</span></span><br><span class="line"><span class="keyword">for</span> whisker <span class="keyword">in</span> f[<span class="string">'whiskers'</span>]:</span><br><span class="line">    whisker.set(color=<span class="string">'k'</span>, linewidth=<span class="number">0.5</span>,linestyle=<span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">for</span> cap <span class="keyword">in</span> f[<span class="string">'caps'</span>]:</span><br><span class="line">    cap.set(color=<span class="string">'gray'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> median <span class="keyword">in</span> f[<span class="string">'medians'</span>]:</span><br><span class="line">    median.set(color=<span class="string">'DarkBlue'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> flier <span class="keyword">in</span> f[<span class="string">'fliers'</span>]:</span><br><span class="line">    flier.set(marker=<span class="string">'o'</span>, color=<span class="string">'y'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># boxes, 箱线</span></span><br><span class="line"><span class="comment"># medians, 中位值的横线,</span></span><br><span class="line"><span class="comment"># whiskers, 从box到error bar之间的竖线.</span></span><br><span class="line"><span class="comment"># fliers, 异常值</span></span><br><span class="line"><span class="comment"># caps, error bar横线</span></span><br><span class="line"><span class="comment"># means, 均值的横线,</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_60_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># plt.boxplot()绘制</span></span><br><span class="line"><span class="comment"># 分组汇总</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">2</span>), columns=[<span class="string">'Col1'</span>, <span class="string">'Col2'</span>] )</span><br><span class="line">df[<span class="string">'X'</span>] = pd.Series([<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>])</span><br><span class="line">df[<span class="string">'Y'</span>] = pd.Series([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line">df.boxplot(by = <span class="string">'X'</span>)</span><br><span class="line">df.boxplot(column=[<span class="string">'Col1'</span>,<span class="string">'Col2'</span>], by=[<span class="string">'X'</span>,<span class="string">'Y'</span>])</span><br><span class="line"><span class="comment"># columns：按照数据的列分子图</span></span><br><span class="line"><span class="comment"># by：按照列分组做箱型图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array([&lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F3519AD68&gt;,</span><br><span class="line">       &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000024F34B67C88&gt;],</span><br><span class="line">      dtype=object)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_61_1.png" alt="png"></p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/matplotlib基本用法/output_61_2.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Matplotlib的基本用法&quot;&gt;&lt;a href=&quot;#Matplotlib的基本用法&quot; class=&quot;headerlink&quot; title=&quot;Matplotlib的基本用法&quot;&gt;&lt;/a&gt;Matplotlib的基本用法&lt;/h1&gt;&lt;h2 id=&quot;简单的折线图&quot;&gt;&lt;a href=&quot;#简单的折线图&quot; class=&quot;headerlink&quot; title=&quot;简单的折线图&quot;&gt;&lt;/a&gt;简单的折线图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;plt.plot(x,y, fortmat_string)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;作用是定义画图的样式&lt;/p&gt;&lt;p&gt;x,y表示横纵左表， format可以定义画图格式&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#导入Matploylib库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; matplotlib &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#画布上画图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,  linewidth=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;,   linewidth=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在画布上显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
      <category term="可视化" scheme="http://yoursite.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib的Seaborn风格可视化</title>
    <link href="http://yoursite.com/2019/10/04/Matplotlib%E7%9A%84Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2019/10/04/Matplotlib的Seaborn风格可视化/</id>
    <published>2019-10-04T11:04:57.000Z</published>
    <updated>2019-10-05T02:59:45.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Seaborn风格可视化"><a href="#Seaborn风格可视化" class="headerlink" title="Seaborn风格可视化"></a>Seaborn风格可视化</h1><h2 id="什么事seaborn"><a href="#什么事seaborn" class="headerlink" title="什么事seaborn"></a>什么事seaborn</h2><p>​       Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。</p><a id="more"></a><h2 id="seaborn-API"><a href="#seaborn-API" class="headerlink" title="seaborn API"></a>seaborn API</h2><p>Seaborn 要求原始数据的输入类型为 pandas 的 Dataframe 或 Numpy 数组，画图函数有以下几种形式:</p><ul><li>sns.图名(x=’X轴 列名’, y=’Y轴 列名’, data=原始数据df对象)</li><li>sns.图名(x=’X轴 列名’, y=’Y轴 列名’, hue=’分组绘图参数’, data=原始数据df对象)</li><li>sns.图名(x=np.array, y=np.array[, …])</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><h1 id="基本绘图设置"><a href="#基本绘图设置" class="headerlink" title="基本绘图设置"></a>基本绘图设置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建正弦函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sinplot</span><span class="params">(flip=<span class="number">1</span>)</span>:</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">14</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">        plt.plot(x, np.sin(x+i*<span class="number">.5</span>)*(<span class="number">7</span>-i)*flip)</span><br><span class="line"></span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_3_0.png" alt></p><h2 id="简单切换成Seaborn风格"><a href="#简单切换成Seaborn风格" class="headerlink" title="简单切换成Seaborn风格"></a>简单切换成Seaborn风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换Seaborn风格</span></span><br><span class="line">sns.set()</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_5_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换seaborn图标风格</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>), facecolor=<span class="string">'white'</span>)</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">sns.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line">data = np.random.normal(size=(<span class="number">20</span>,<span class="number">6</span>))+np.arange(<span class="number">6</span>)/<span class="number">2</span></span><br><span class="line">sns.boxplot(data=data)</span><br><span class="line">plt.title(<span class="string">'style-whitegrid'</span>)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line">sns.set_style(<span class="string">'dark'</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_6_0.png" alt="png"></p><h2 id="设置图标坐标轴"><a href="#设置图标坐标轴" class="headerlink" title="设置图标坐标轴"></a>设置图标坐标轴</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#despine()</span></span><br><span class="line"><span class="comment"># seaborn.despine(fig=None, ax=None, top=True, right=True, left=False, bottom=False, offset=None, trim=False)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line">sns.set_style(<span class="string">"ticks"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">6</span>,<span class="number">9</span>))</span><br><span class="line">plt.subplots_adjust(hspace=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)  </span><br><span class="line">sinplot()</span><br><span class="line"><span class="comment"># 删除了上、右坐标轴</span></span><br><span class="line">sns.despine()</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">sns.violinplot(data=data)</span><br><span class="line"><span class="comment"># offset：与坐标轴之间的偏移</span></span><br><span class="line"><span class="comment"># trim：为True时，将坐标轴限制在数据最大最小值</span></span><br><span class="line"><span class="comment">#sns.despine(offset=10, trim=True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax3 = fig.add_subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment"># top, right, left, bottom：布尔型，为True时不显示</span></span><br><span class="line"><span class="comment">#sns.despine(left=True, right = False)</span></span><br><span class="line">sns.boxplot(data=data, palette=<span class="string">"deep"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b20e4f7a58&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_8_1.png" alt="png"></p><h2 id="设置局部图标风格"><a href="#设置局部图标风格" class="headerlink" title="设置局部图标风格"></a>设置局部图标风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">"darkgrid"</span>):</span><br><span class="line">    plt.subplot(<span class="number">211</span>)</span><br><span class="line">    sinplot()</span><br><span class="line"><span class="comment"># 设置局部图表风格，用with做代码块区分</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br><span class="line"><span class="comment"># 外部表格风格</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_10_0.png" alt="png"></p><h2 id="设置显示比例"><a href="#设置显示比例" class="headerlink" title="设置显示比例"></a>设置显示比例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set_context()</span></span><br><span class="line"><span class="comment"># 选择包括：'paper', 'notebook', 'talk', 'poster'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 与上面的cell比较你就会发现不同</span></span><br><span class="line">    </span><br><span class="line">sns.set_style(<span class="string">"whitegrid"</span>)</span><br><span class="line">sns.set_context(<span class="string">"poster"</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_12_0.png" alt="png"></p><h2 id="调色板"><a href="#调色板" class="headerlink" title="调色板"></a>调色板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># color_palette()</span></span><br><span class="line"><span class="comment"># 默认6种颜色：deep, muted, pastel, bright, dark, colorblind</span></span><br><span class="line"><span class="comment"># seaborn.color_palette(palette=None, n_colors=None, desat=None)</span></span><br><span class="line">current_palette = sns.color_palette()</span><br><span class="line">print(type(current_palette))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sns.palplot(current_palette[2:4])</span></span><br><span class="line">sns.palplot(current_palette)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;seaborn.palettes._ColorPalette&apos;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_14_1.png" alt="png"></p><h2 id="颜色风格"><a href="#颜色风格" class="headerlink" title="颜色风格"></a>颜色风格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 颜色风格内容：Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, </span></span><br><span class="line"><span class="comment"># BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, </span></span><br><span class="line"><span class="comment"># Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples,</span></span><br><span class="line"><span class="comment"># Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, </span></span><br><span class="line"><span class="comment"># Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, </span></span><br><span class="line"><span class="comment"># autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, </span></span><br><span class="line"><span class="comment"># cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, </span></span><br><span class="line"><span class="comment"># gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, </span></span><br><span class="line"><span class="comment"># hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, </span></span><br><span class="line"><span class="comment"># pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spectral, spectral_r, spring, </span></span><br><span class="line"><span class="comment"># spring_r, summer, summer_r, terrain, terrain_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r</span></span><br><span class="line"></span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">'Accent'</span>,<span class="number">12</span>))</span><br><span class="line">sns.palplot(sns.color_palette(<span class="string">'Accent_r'</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_16_0.png" alt="png"></p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_16_1.png" alt="png"></p><h2 id="设置饱和度和亮度"><a href="#设置饱和度和亮度" class="headerlink" title="设置饱和度和亮度"></a>设置饱和度和亮度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sns.palplot(sns.hls_palette(<span class="number">4</span>,l=<span class="number">.3</span>,s=<span class="number">.8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># l-&gt;亮度</span></span><br><span class="line"><span class="comment"># s-&gt;饱和度</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_18_0.png" alt="png"></p><h2 id="设置颜色线性变化"><a href="#设置颜色线性变化" class="headerlink" title="设置颜色线性变化"></a>设置颜色线性变化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置颜色线性变化</span></span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>, gamma=<span class="number">2</span>))</span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>, start=<span class="number">.5</span>, rot=<span class="number">.75</span>))</span><br><span class="line">sns.palplot(sns.cubehelix_palette(<span class="number">16</span>,start=<span class="number">0.5</span>, rot=<span class="number">0</span>, dark=<span class="number">0.95</span>, reverse=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># n_colors → 颜色个数</span></span><br><span class="line"><span class="comment"># start → 值区间在0-3，开始颜色</span></span><br><span class="line"><span class="comment"># rot → 颜色旋转角度</span></span><br><span class="line"><span class="comment"># gamma → 颜色伽马值，越大颜色越暗</span></span><br><span class="line"><span class="comment"># dark，light → 值区间0-1，颜色深浅</span></span><br><span class="line"><span class="comment"># reverse → 布尔值，默认为False，由浅到深</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_20_0.png" alt="png"></p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_20_1.png" alt="png"></p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_20_2.png" alt="png"></p><h2 id="创建分散颜色"><a href="#创建分散颜色" class="headerlink" title="创建分散颜色"></a>创建分散颜色</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">x = np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 创建分散颜色</span></span><br><span class="line">cmap = sns.diverging_palette(<span class="number">200</span>, <span class="number">20</span>, sep=<span class="number">20</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sns.heatmap(x, cmap=cmap)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21a370cf8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_22_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line">fig=plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line"><span class="keyword">with</span> sns.color_palette(<span class="string">'PuBuGn_d'</span>):</span><br><span class="line">    plt.subplot(<span class="number">211</span>)</span><br><span class="line">    sinplot()</span><br><span class="line">    </span><br><span class="line">sns.set_palette(<span class="string">'husl'</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">sinplot()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_23_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(<span class="string">'darkgrid'</span>)</span><br><span class="line">sns.set_context(<span class="string">'paper'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"><span class="comment">#不再发出警告</span></span><br></pre></td></tr></table></figure><h1 id="分布数据可视化"><a href="#分布数据可视化" class="headerlink" title="分布数据可视化"></a>分布数据可视化</h1><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直方图</span></span><br><span class="line"><span class="comment">#设计随即种子</span></span><br><span class="line">rs = np.random.RandomState(<span class="number">10</span>)</span><br><span class="line">s = pd.Series(rs.randn(<span class="number">100</span>)*<span class="number">100</span>)</span><br><span class="line">sns.distplot(s, bins=<span class="number">10</span>, hist=<span class="literal">True</span>, kde=<span class="literal">False</span>, norm_hist=<span class="literal">False</span>,</span><br><span class="line">            rug=<span class="literal">True</span>,vertical=<span class="literal">False</span>,color=<span class="string">'y'</span>, label=<span class="string">'distplot'</span>, axlabel=<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"><span class="comment"># bins → 箱数</span></span><br><span class="line"><span class="comment"># hist、ked → 是否显示箱/密度曲线</span></span><br><span class="line"><span class="comment"># norm_hist → 直方图是否按照密度来显示</span></span><br><span class="line"><span class="comment"># rug → 是否显示数据分布情况</span></span><br><span class="line"><span class="comment"># vertical → 是否水平显示</span></span><br><span class="line"><span class="comment"># color → 设置颜色</span></span><br><span class="line"><span class="comment"># label → 图例</span></span><br><span class="line"><span class="comment"># axlabel → x轴标注</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.legend.Legend at 0x1b20e65e4e0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_26_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sns.distplot(s, rug=<span class="literal">True</span>, rug_kws=&#123;<span class="string">'color'</span>:<span class="string">'g'</span>&#125;,</span><br><span class="line">            kde_kws=&#123;<span class="string">"color"</span>: <span class="string">"k"</span>, <span class="string">"lw"</span>: <span class="number">1</span>, <span class="string">"label"</span>: <span class="string">"KDE"</span>,<span class="string">'linestyle'</span>:<span class="string">'--'</span>&#125;,   </span><br><span class="line">            <span class="comment"># 设置密度曲线颜色，线宽，标注、线形</span></span><br><span class="line">            hist_kws=&#123;<span class="string">"histtype"</span>: <span class="string">"step"</span>, <span class="string">"linewidth"</span>: <span class="number">1</span>,<span class="string">"alpha"</span>: <span class="number">1</span>, <span class="string">"color"</span>: <span class="string">"g"</span>&#125;)  </span><br><span class="line">            <span class="comment"># 设置箱子的风格、线宽、透明度、颜色</span></span><br><span class="line">            <span class="comment"># 风格包括：'bar', 'barstacked', 'step', 'stepfilled'</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21bc8e828&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_27_1.png" alt="png"></p><h2 id="密度图"><a href="#密度图" class="headerlink" title="密度图"></a>密度图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 单个样本数据密度分布图</span></span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,</span><br><span class="line">           shade = <span class="literal">False</span>,  <span class="comment"># 是否填充</span></span><br><span class="line">           color = <span class="string">'b'</span>,   <span class="comment"># 设置颜色</span></span><br><span class="line">           vertical = <span class="literal">False</span>  <span class="comment"># 设置是否水平</span></span><br><span class="line">           )</span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,bw=<span class="number">5</span>, label=<span class="string">"bw: 0.2"</span>,</span><br><span class="line">            linestyle = <span class="string">'-'</span>,linewidth = <span class="number">1.2</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">sns.kdeplot(s,bw=<span class="number">20</span>, label=<span class="string">"bw: 2"</span>,</span><br><span class="line">            linestyle = <span class="string">'-'</span>,linewidth = <span class="number">1.2</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># bw → 控制拟合的程度，类似直方图的箱数</span></span><br><span class="line"></span><br><span class="line">sns.rugplot(s,height = <span class="number">0.1</span>,color = <span class="string">'k'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 数据频率分布图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21babf470&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_29_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 两个样本数据密度分布图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">2</span>)  <span class="comment"># 设定随机数种子</span></span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">100</span>,<span class="number">2</span>),</span><br><span class="line">                 columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">sns.kdeplot(df[<span class="string">'A'</span>],df[<span class="string">'B'</span>],</span><br><span class="line">           cbar = <span class="literal">True</span>,    <span class="comment"># 是否显示颜色图例</span></span><br><span class="line">           shade = <span class="literal">True</span>,   <span class="comment"># 是否填充</span></span><br><span class="line">           cmap = <span class="string">'Reds'</span>,  <span class="comment"># 设置调色盘</span></span><br><span class="line">           shade_lowest=<span class="literal">False</span>,  <span class="comment"># 最外围颜色是否显示</span></span><br><span class="line">           n_levels = <span class="number">10</span>   <span class="comment"># 曲线个数（如果非常多，则会越平滑）</span></span><br><span class="line">           )</span><br><span class="line"><span class="comment"># 两个维度数据生成曲线密度图，以颜色作为密度衰减显示</span></span><br><span class="line"></span><br><span class="line">sns.rugplot(df[<span class="string">'A'</span>], color=<span class="string">"g"</span>, axis=<span class="string">'x'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line">sns.rugplot(df[<span class="string">'B'</span>], color=<span class="string">"r"</span>, axis=<span class="string">'y'</span>,alpha = <span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 注意设置x，y轴</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21bb63470&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_30_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密度图 - kdeplot()</span></span><br><span class="line"><span class="comment"># 两个样本数据密度分布图</span></span><br><span class="line"><span class="comment"># 多个密度图</span></span><br><span class="line"></span><br><span class="line">rs1 = np.random.RandomState(<span class="number">2</span>)  </span><br><span class="line">rs2 = np.random.RandomState(<span class="number">5</span>)  </span><br><span class="line">df1 = pd.DataFrame(rs1.randn(<span class="number">100</span>,<span class="number">2</span>)+<span class="number">2</span>,columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">df2 = pd.DataFrame(rs2.randn(<span class="number">100</span>,<span class="number">2</span>)<span class="number">-2</span>,columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">sns.kdeplot(df1[<span class="string">'A'</span>],df1[<span class="string">'B'</span>],cmap = <span class="string">'Greens'</span>,</span><br><span class="line">            shade = <span class="literal">True</span>,shade_lowest=<span class="literal">False</span>)</span><br><span class="line">sns.kdeplot(df2[<span class="string">'A'</span>],df2[<span class="string">'B'</span>],cmap = <span class="string">'Blues'</span>,</span><br><span class="line">            shade = <span class="literal">True</span>,shade_lowest=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line"><span class="comment">#sns.rugplot(df2['A']+df1['A'], color="g", axis='x',alpha = 0.5)</span></span><br><span class="line"><span class="comment">#sns.rugplot(df2['B']+df1['B'], color="r", axis='y',alpha = 0.5)</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21be56278&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_31_1.png" alt="png"></p><h2 id="综合散点图"><a href="#综合散点图" class="headerlink" title="综合散点图"></a>综合散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">2</span>)  </span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">200</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],  <span class="comment"># 设置xy轴，显示columns名称</span></span><br><span class="line">              data=df,   <span class="comment"># 设置数据</span></span><br><span class="line">              color = <span class="string">'k'</span>,   <span class="comment"># 设置颜色</span></span><br><span class="line">              s = <span class="number">50</span>, edgecolor=<span class="string">"w"</span>,linewidth=<span class="number">1</span>,  <span class="comment"># 设置散点大小、边缘线颜色及宽度(只针对scatter）</span></span><br><span class="line">              kind = <span class="string">'scatter'</span>,   <span class="comment"># 设置类型：“scatter”、“reg”、“resid”、“kde”、“hex”</span></span><br><span class="line">              space = <span class="number">0.2</span>,  <span class="comment"># 设置散点图和布局图的间距</span></span><br><span class="line">              size = <span class="number">8</span>,   <span class="comment"># 图表大小（自动调整为正方形）</span></span><br><span class="line">              ratio = <span class="number">5</span>,  <span class="comment"># 散点图与布局图高度比，整型</span></span><br><span class="line">              marginal_kws=dict(bins=<span class="number">15</span>, rug=<span class="literal">True</span>)  <span class="comment"># 设置柱状图箱数，是否设置rug</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21bee2be0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_33_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"><span class="comment"># 六边形图</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">500</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sns.axes_style(<span class="string">"white"</span>):</span><br><span class="line">    sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],data = df, kind=<span class="string">"hex"</span>, color=<span class="string">"g"</span>,</span><br><span class="line">                 marginal_kws=dict(bins=<span class="number">20</span>))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_34_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - jointplot()</span></span><br><span class="line"><span class="comment"># 散点图 + 分布图</span></span><br><span class="line"><span class="comment"># 密度图</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">15</span>)</span><br><span class="line">df = pd.DataFrame(rs.randn(<span class="number">300</span>,<span class="number">2</span>),columns = [<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">g = sns.jointplot(x=df[<span class="string">'A'</span>], y=df[<span class="string">'B'</span>],data = df,</span><br><span class="line">                  kind=<span class="string">"kde"</span>, color=<span class="string">"k"</span>,</span><br><span class="line">                  shade_lowest=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 创建密度图</span></span><br><span class="line"></span><br><span class="line">g.plot_joint(plt.scatter,c=<span class="string">"w"</span>, s=<span class="number">30</span>, linewidth=<span class="number">1</span>, marker=<span class="string">"*"</span>)</span><br><span class="line"><span class="comment"># 添加散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21c4325f8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_35_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + ax_marg_x.hist() + ax_marg_y.hist()</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g.plot_joint(plt.scatter, color =<span class="string">'m'</span>, edgecolor = <span class="string">'white'</span>)  <span class="comment"># 设置框内图表，scatter</span></span><br><span class="line">g.ax_marg_x.hist(tips[<span class="string">"total_bill"</span>], color=<span class="string">"b"</span>, alpha=<span class="number">.6</span>,</span><br><span class="line">                 bins=np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">3</span>))            <span class="comment"># 设置x轴直方图，注意bins是数组</span></span><br><span class="line">g.ax_marg_y.hist(tips[<span class="string">"tip"</span>], color=<span class="string">"r"</span>, alpha=<span class="number">.6</span>,</span><br><span class="line">                 orientation=<span class="string">"horizontal"</span>,</span><br><span class="line">                 bins=np.arange(<span class="number">0</span>, <span class="number">12</span>, <span class="number">1</span>))            <span class="comment"># 设置x轴直方图，注意需要orientation参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">g.annotate(stats.pearsonr)    </span><br><span class="line"><span class="comment"># 设置标注，可以为pearsonr，spearmanr</span></span><br><span class="line"></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line">0       16.99  1.01  Female     No  Sun  Dinner     2</span><br><span class="line">1       10.34  1.66    Male     No  Sun  Dinner     3</span><br><span class="line">2       21.01  3.50    Male     No  Sun  Dinner     3</span><br><span class="line">3       23.68  3.31    Male     No  Sun  Dinner     2</span><br><span class="line">4       24.59  3.61  Female     No  Sun  Dinner     4</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_36_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + plot_marginals()</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g = g.plot_joint(plt.scatter,color=<span class="string">"g"</span>, s=<span class="number">40</span>, edgecolor=<span class="string">"white"</span>)   <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">g.plot_marginals(sns.distplot, kde=<span class="literal">True</span>, color=<span class="string">"g"</span>)                <span class="comment"># 绘制x，y轴直方图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21c630da0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_37_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 综合散点图 - JointGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># plot_joint() + plot_marginals()</span></span><br><span class="line"><span class="comment"># kde - 密度图</span></span><br><span class="line"></span><br><span class="line">g = sns.JointGrid(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, data=tips)</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据</span></span><br><span class="line"></span><br><span class="line">g = g.plot_joint(sns.kdeplot,cmap = <span class="string">'Reds_r'</span>)             <span class="comment"># 绘制密度图</span></span><br><span class="line">plt.grid(linestyle = <span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">g.plot_marginals(sns.kdeplot, shade = <span class="literal">True</span>, color=<span class="string">"r"</span>)  <span class="comment"># 绘制x，y轴密度图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.JointGrid at 0x1b21d7aef60&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_38_1.png" alt="png"></p><h2 id="矩阵散点图"><a href="#矩阵散点图" class="headerlink" title="矩阵散点图"></a>矩阵散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">iris = sns.load_dataset(<span class="string">"iris"</span>)</span><br><span class="line">print(iris.head())</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris,</span><br><span class="line">            kind = <span class="string">'scatter'</span>,  <span class="comment"># 散点图/回归分布图 &#123;‘scatter’, ‘reg’&#125;  </span></span><br><span class="line">            diag_kind=<span class="string">"hist"</span>,  <span class="comment"># 直方图/密度图 &#123;‘hist’, ‘kde’&#125;</span></span><br><span class="line">            hue=<span class="string">"species"</span>,   <span class="comment"># 按照某一字段进行分类</span></span><br><span class="line">            palette=<span class="string">"husl"</span>,  <span class="comment"># 设置调色板</span></span><br><span class="line">            markers=[<span class="string">"o"</span>, <span class="string">"s"</span>, <span class="string">"D"</span>],  <span class="comment"># 设置不同系列的点样式（这里根据参考分类个数）</span></span><br><span class="line">            size = <span class="number">2</span>,   <span class="comment"># 图表大小</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   sepal_length  sepal_width  petal_length  petal_width species</span><br><span class="line">0           5.1          3.5           1.4          0.2  setosa</span><br><span class="line">1           4.9          3.0           1.4          0.2  setosa</span><br><span class="line">2           4.7          3.2           1.3          0.2  setosa</span><br><span class="line">3           4.6          3.1           1.5          0.2  setosa</span><br><span class="line">4           5.0          3.6           1.4          0.2  setosa</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21d8a44e0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_40_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"><span class="comment"># 只提取局部变量进行对比</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris,vars=[<span class="string">"sepal_width"</span>, <span class="string">"sepal_length"</span>],</span><br><span class="line">             kind = <span class="string">'reg'</span>, diag_kind=<span class="string">"kde"</span>, </span><br><span class="line">             hue=<span class="string">"species"</span>, palette=<span class="string">"husl"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21e003c18&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_41_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - pairplot()</span></span><br><span class="line"><span class="comment"># 其他参数设置</span></span><br><span class="line"></span><br><span class="line">sns.pairplot(iris, diag_kind=<span class="string">"kde"</span>, markers=<span class="string">"+"</span>,</span><br><span class="line">             plot_kws=dict(s=<span class="number">50</span>, edgecolor=<span class="string">"b"</span>, linewidth=<span class="number">1</span>),</span><br><span class="line">             <span class="comment"># 设置点样式</span></span><br><span class="line">             diag_kws=dict(shade=<span class="literal">True</span>)</span><br><span class="line">             <span class="comment"># 设置密度图样式</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21c37be48&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_42_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  矩阵散点图 - PairGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># map_diag() + map_offdiag()</span></span><br><span class="line"></span><br><span class="line">g = sns.PairGrid(iris,hue=<span class="string">"species"</span>,palette = <span class="string">'hls'</span>,</span><br><span class="line">                vars = [<span class="string">'sepal_length'</span>,<span class="string">'sepal_width'</span>,<span class="string">'petal_length'</span>,<span class="string">'petal_width'</span>],  <span class="comment"># 可筛选</span></span><br><span class="line">                )</span><br><span class="line"><span class="comment"># 创建一个绘图表格区域，设置好x、y对应数据，按照species分类</span></span><br><span class="line"></span><br><span class="line">g.map_diag(plt.hist, </span><br><span class="line">           histtype = <span class="string">'barstacked'</span>,   <span class="comment"># 可选：'bar', 'barstacked', 'step', 'stepfilled'</span></span><br><span class="line">           linewidth = <span class="number">1</span>, edgecolor = <span class="string">'w'</span>)           </span><br><span class="line"><span class="comment"># 对角线图表，plt.hist/sns.kdeplot</span></span><br><span class="line"></span><br><span class="line">g.map_offdiag(plt.scatter,</span><br><span class="line">              edgecolor=<span class="string">"w"</span>, s=<span class="number">40</span>,linewidth = <span class="number">1</span>,   <span class="comment"># 设置点颜色、大小、描边宽度</span></span><br><span class="line">             )     </span><br><span class="line"><span class="comment"># 其他图表，plt.scatter/plt.bar...</span></span><br><span class="line"></span><br><span class="line">g.add_legend()</span><br><span class="line"><span class="comment"># 添加图例</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b218fe3f98&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_43_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵散点图 - PairGrid()</span></span><br><span class="line"><span class="comment"># 可拆分绘制的散点图</span></span><br><span class="line"><span class="comment"># map_diag() + map_lower() + map_upper()</span></span><br><span class="line"></span><br><span class="line">g = sns.PairGrid(iris)</span><br><span class="line">g.map_diag(sns.kdeplot, lw=<span class="number">3</span>)   <span class="comment"># 设置对角线图表</span></span><br><span class="line">g.map_upper(plt.scatter, color = <span class="string">'r'</span>)     <span class="comment"># 设置对角线上端图表</span></span><br><span class="line">g.map_lower(sns.kdeplot, cmap=<span class="string">"Blues_d"</span>)      <span class="comment"># 设置对角线下端图表</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.PairGrid at 0x1b21ee966a0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_44_1.png" alt="png"></p><h1 id="分类数据可视化"><a href="#分类数据可视化" class="headerlink" title="分类数据可视化"></a>分类数据可视化</h1><h2 id="分类散点图"><a href="#分类散点图" class="headerlink" title="分类散点图"></a>分类散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 按照不同类别对样本数据进行分布散点图绘制</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"day"</span>,          <span class="comment"># x → 设置分组统计字段</span></span><br><span class="line">              y=<span class="string">"total_bill"</span>,   <span class="comment"># y → 数据分布统计字段</span></span><br><span class="line">              <span class="comment"># 这里xy数据对调，将会使得散点图横向分布</span></span><br><span class="line">              data=tips,        <span class="comment"># data → 对应数据</span></span><br><span class="line">              jitter = <span class="literal">True</span>,    <span class="comment"># jitter → 当点数据重合较多时，用该参数做一些调整，也可以设置间距如：jitter = 0.1</span></span><br><span class="line">              size = <span class="number">5</span>, edgecolor = <span class="string">'w'</span>,linewidth=<span class="number">1</span>,marker = <span class="string">'o'</span>  <span class="comment"># 设置点的大小、描边颜色或宽度、点样式</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line">0       16.99  1.01  Female     No  Sun  Dinner     2</span><br><span class="line">1       10.34  1.66    Male     No  Sun  Dinner     3</span><br><span class="line">2       21.01  3.50    Male     No  Sun  Dinner     3</span><br><span class="line">3       23.68  3.31    Male     No  Sun  Dinner     2</span><br><span class="line">4       24.59  3.61  Female     No  Sun  Dinner     4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21f971320&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_46_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>,</span><br><span class="line">              data=tips, jitter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21f9b2b00&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_47_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 设置调色盘</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"sex"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>,</span><br><span class="line">              data=tips, jitter=<span class="literal">True</span>,</span><br><span class="line">              palette=<span class="string">"Set2"</span>,  <span class="comment"># 设置调色盘</span></span><br><span class="line">              dodge=<span class="literal">True</span>,  <span class="comment"># 是否拆分</span></span><br><span class="line">             )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fc11198&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_48_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stripplot()</span></span><br><span class="line"><span class="comment"># 筛选分类类别</span></span><br><span class="line"></span><br><span class="line">print(tips[<span class="string">'day'</span>].value_counts())</span><br><span class="line"><span class="comment"># 查看day字段的唯一值</span></span><br><span class="line"></span><br><span class="line">sns.stripplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,jitter = <span class="literal">True</span>, </span><br><span class="line">              order = [<span class="string">'Sat'</span>,<span class="string">'Sun'</span>])</span><br><span class="line"><span class="comment"># order → 筛选类别</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sat     87</span><br><span class="line">Sun     76</span><br><span class="line">Thur    62</span><br><span class="line">Fri     19</span><br><span class="line">Name: day, dtype: int64</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fc8c748&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_49_2.png" alt="png"></p><h2 id="分簇散点图"><a href="#分簇散点图" class="headerlink" title="分簇散点图"></a>分簇散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># swarmplot()</span></span><br><span class="line"><span class="comment"># 分簇散点图</span></span><br><span class="line"></span><br><span class="line">sns.swarmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"day"</span>, data=tips,</span><br><span class="line">              size = <span class="number">5</span>, edgecolor = <span class="string">'w'</span>,linewidth=<span class="number">1</span>,marker = <span class="string">'o'</span>,</span><br><span class="line">              palette = <span class="string">'Reds'</span>)</span><br><span class="line"><span class="comment"># 用法和stripplot类似</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fcdef28&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_51_1.png" alt="png"></p><h2 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># boxplot()</span></span><br><span class="line"></span><br><span class="line">sns.boxplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            linewidth = <span class="number">2</span>,   <span class="comment"># 线宽</span></span><br><span class="line">            width = <span class="number">0.8</span>,     <span class="comment"># 箱之间的间隔比例</span></span><br><span class="line">            fliersize = <span class="number">3</span>,   <span class="comment"># 异常点大小</span></span><br><span class="line">            palette = <span class="string">'hls'</span>, <span class="comment"># 设置调色板</span></span><br><span class="line">            whis = <span class="number">1.5</span>,      <span class="comment"># 设置IQR </span></span><br><span class="line">            notch = <span class="literal">True</span>,    <span class="comment"># 设置是否以中值做凹槽</span></span><br><span class="line">            order = [<span class="string">'Thur'</span>,<span class="string">'Fri'</span>,<span class="string">'Sat'</span>,<span class="string">'Sun'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">           )</span><br><span class="line"><span class="comment"># 绘制箱型图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sns.swarmplot(x="day", y="total_bill", data=tips,color ='k',size = 3,alpha = 0.8)</span></span><br><span class="line"><span class="comment"># 可以添加散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fd32710&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_53_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line">sns.boxplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            hue = <span class="string">'smoker'</span>, palette = <span class="string">'Reds'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fdce5c0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_54_1.png" alt="png"></p><h1 id="小提琴图"><a href="#小提琴图" class="headerlink" title="小提琴图"></a>小提琴图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># violinplot()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">            linewidth = <span class="number">2</span>,   <span class="comment"># 线宽</span></span><br><span class="line">            width = <span class="number">0.8</span>,     <span class="comment"># 箱之间的间隔比例</span></span><br><span class="line">            palette = <span class="string">'hls'</span>, <span class="comment"># 设置调色板</span></span><br><span class="line">            order = [<span class="string">'Thur'</span>,<span class="string">'Fri'</span>,<span class="string">'Sat'</span>,<span class="string">'Sun'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">            scale = <span class="string">'area'</span>,  <span class="comment"># 测度小提琴图的宽度：area-面积相同，count-按照样本数量决定宽度，width-宽度一样</span></span><br><span class="line">            gridsize = <span class="number">50</span>,   <span class="comment"># 设置小提琴图边线的平滑度，越高越平滑</span></span><br><span class="line">            inner = <span class="string">'box'</span>,   <span class="comment"># 设置内部显示类型 → “box”, “quartile”, “point”, “stick”, None</span></span><br><span class="line">            <span class="comment">#bw = 0.8        # 控制拟合程度，一般可以不设置</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21feb0d68&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_56_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过hue参数再分类</span></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,</span><br><span class="line">               hue = <span class="string">'smoker'</span>, palette=<span class="string">"muted"</span>, </span><br><span class="line">               split=<span class="literal">True</span>,  <span class="comment"># 设置是否拆分小提琴图</span></span><br><span class="line">               inner=<span class="string">"quartile"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21ff37940&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_57_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结合散点图</span></span><br><span class="line"></span><br><span class="line">sns.violinplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette = <span class="string">'hls'</span>, inner = <span class="literal">None</span>)</span><br><span class="line">sns.swarmplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, color=<span class="string">"w"</span>, alpha=<span class="number">.5</span>)</span><br><span class="line"><span class="comment"># 插入散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21fff0e80&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_58_1.png" alt="png"></p><h2 id="LV图"><a href="#LV图" class="headerlink" title="LV图"></a>LV图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  lvplot()</span></span><br><span class="line">sns.lvplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips, palette=<span class="string">"mako"</span>,</span><br><span class="line">           <span class="comment">#hue = 'smoker',</span></span><br><span class="line">           width = <span class="number">0.8</span>,           <span class="comment"># 箱之间间隔比例</span></span><br><span class="line">           linewidth = <span class="number">12</span>,</span><br><span class="line">           scale = <span class="string">'area'</span>,        <span class="comment"># 设置框的大小 → “linear”、“exonential”、“area”</span></span><br><span class="line">           k_depth = <span class="string">'proportion'</span>,  <span class="comment"># 设置框的数量 → “proportion”、“tukey”、“trustworthy”</span></span><br><span class="line">          )</span><br><span class="line"><span class="comment"># 绘制LV图</span></span><br><span class="line"></span><br><span class="line">sns.swarmplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, data=tips,color =<span class="string">'k'</span>,size = <span class="number">3</span>,alpha = <span class="number">0.8</span>)</span><br><span class="line"><span class="comment"># 可以添加散点图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b22101c400&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_60_1.png" alt="png"></p><h1 id="分类统计图"><a href="#分类统计图" class="headerlink" title="分类统计图"></a>分类统计图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"><span class="comment"># 置信区间：样本均值 + 抽样误差</span></span><br><span class="line"></span><br><span class="line">titanic = sns.load_dataset(<span class="string">"titanic"</span>)</span><br><span class="line"><span class="comment">#print(titanic.head())</span></span><br><span class="line"><span class="comment">#print('-----')</span></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">sns.barplot(x=<span class="string">"sex"</span>, y=<span class="string">"survived"</span>, hue=<span class="string">"class"</span>, data=titanic,</span><br><span class="line">            palette = <span class="string">'hls'</span>, </span><br><span class="line">            order = [<span class="string">'male'</span>,<span class="string">'female'</span>],  <span class="comment"># 筛选类别</span></span><br><span class="line">            capsize = <span class="number">0.05</span>,  <span class="comment"># 误差线横向延伸宽度</span></span><br><span class="line">            saturation=<span class="number">.8</span>,   <span class="comment"># 颜色饱和度</span></span><br><span class="line">            errcolor = <span class="string">'gray'</span>,errwidth = <span class="number">2</span>,  <span class="comment"># 误差线颜色，宽度</span></span><br><span class="line">            ci = <span class="string">'sd'</span>    <span class="comment"># 置信区间误差 → 0-100内值、'sd'、None</span></span><br><span class="line">            )</span><br><span class="line"><span class="comment">#print(titanic.groupby(['sex','class']).mean()['survived'])</span></span><br><span class="line"><span class="comment">#print(titanic.groupby(['sex','class']).std()['survived'])</span></span><br><span class="line"><span class="comment"># 计算数据</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b2210a1048&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_62_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">sns.barplot(x=<span class="string">"day"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"sex"</span>, data=tips,</span><br><span class="line">            palette = <span class="string">'Blues'</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line">tips.groupby([<span class="string">'day'</span>,<span class="string">'sex'</span>]).mean()</span><br><span class="line"><span class="comment"># 计算数据</span></span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th></th>      <th>total_bill</th>      <th>tip</th>      <th>size</th>    </tr>    <tr>      <th>day</th>      <th>sex</th>      <th></th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th rowspan="2" valign="top">Thur</th>      <th>Male</th>      <td>18.714667</td>      <td>2.980333</td>      <td>2.433333</td>    </tr>    <tr>      <th>Female</th>      <td>16.715312</td>      <td>2.575625</td>      <td>2.468750</td>    </tr>    <tr>      <th rowspan="2" valign="top">Fri</th>      <th>Male</th>      <td>19.857000</td>      <td>2.693000</td>      <td>2.100000</td>    </tr>    <tr>      <th>Female</th>      <td>14.145556</td>      <td>2.781111</td>      <td>2.111111</td>    </tr>    <tr>      <th rowspan="2" valign="top">Sat</th>      <th>Male</th>      <td>20.802542</td>      <td>3.083898</td>      <td>2.644068</td>    </tr>    <tr>      <th>Female</th>      <td>19.680357</td>      <td>2.801786</td>      <td>2.250000</td>    </tr>    <tr>      <th rowspan="2" valign="top">Sun</th>      <th>Male</th>      <td>21.887241</td>      <td>3.220345</td>      <td>2.810345</td>    </tr>    <tr>      <th>Female</th>      <td>19.872222</td>      <td>3.367222</td>      <td>2.944444</td>    </tr>  </tbody></table></div><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_63_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、barplot()</span></span><br><span class="line"><span class="comment"># 柱状图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">crashes = sns.load_dataset(<span class="string">"car_crashes"</span>).sort_values(<span class="string">"total"</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">print(crashes.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">f, ax = plt.subplots(figsize=(<span class="number">6</span>, <span class="number">15</span>))</span><br><span class="line"><span class="comment"># 创建图表</span></span><br><span class="line"></span><br><span class="line">sns.set_color_codes(<span class="string">"pastel"</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"total"</span>, y=<span class="string">"abbrev"</span>, data=crashes,</span><br><span class="line">            label=<span class="string">"Total"</span>, color=<span class="string">"b"</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 设置第一个柱状图</span></span><br><span class="line"></span><br><span class="line">sns.set_color_codes(<span class="string">"muted"</span>)</span><br><span class="line">sns.barplot(x=<span class="string">"alcohol"</span>, y=<span class="string">"abbrev"</span>, data=crashes,</span><br><span class="line">            label=<span class="string">"Alcohol-involved"</span>, color=<span class="string">"b"</span>,edgecolor = <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 设置第二个柱状图</span></span><br><span class="line"></span><br><span class="line">ax.legend(ncol=<span class="number">2</span>, loc=<span class="string">"lower right"</span>)</span><br><span class="line">sns.despine(left=<span class="literal">True</span>, bottom=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    total  speeding  alcohol  not_distracted  no_previous  ins_premium  \</span><br><span class="line">40   23.9     9.082    9.799          22.944       19.359       858.97   </span><br><span class="line">34   23.9     5.497   10.038          23.661       20.554       688.75   </span><br><span class="line">48   23.8     8.092    6.664          23.086       20.706       992.61   </span><br><span class="line">3    22.4     4.032    5.824          21.056       21.280       827.34   </span><br><span class="line">17   21.4     4.066    4.922          16.692       16.264       872.51   </span><br><span class="line"></span><br><span class="line">    ins_losses abbrev  </span><br><span class="line">40      116.29     SC  </span><br><span class="line">34      109.72     ND  </span><br><span class="line">48      152.56     WV  </span><br><span class="line">3       142.39     AR  </span><br><span class="line">17      137.13     KY</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_64_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  countplot()</span></span><br><span class="line"><span class="comment"># 计数柱状图</span></span><br><span class="line"></span><br><span class="line">sns.countplot(x=<span class="string">"class"</span>, hue=<span class="string">"who"</span>, data=titanic,palette = <span class="string">'magma'</span>)</span><br><span class="line"><span class="comment">#sns.countplot(y="class", hue="who", data=titanic,palette = 'magma')  </span></span><br><span class="line"><span class="comment"># x/y → 以x或者y轴绘图（横向，竖向）</span></span><br><span class="line"><span class="comment"># 用法和barplot相似</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b22117aac8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_65_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pointplot()</span></span><br><span class="line"><span class="comment"># 折线图 - 置信区间估计</span></span><br><span class="line"></span><br><span class="line">sns.pointplot(x=<span class="string">"time"</span>, y=<span class="string">"total_bill"</span>, hue = <span class="string">'smoker'</span>,data=tips,</span><br><span class="line">              palette = <span class="string">'hls'</span>,</span><br><span class="line">              dodge = <span class="literal">True</span>,   <span class="comment"># 设置点是否分开</span></span><br><span class="line">              join = <span class="literal">True</span>,    <span class="comment"># 是否连线</span></span><br><span class="line">              markers=[<span class="string">"o"</span>, <span class="string">"x"</span>], linestyles=[<span class="string">"-"</span>, <span class="string">"--"</span>],  <span class="comment"># 设置点样式、线型</span></span><br><span class="line">              )</span><br><span class="line">tips.groupby([<span class="string">'time'</span>,<span class="string">'smoker'</span>]).mean()[<span class="string">'total_bill'</span>]</span><br><span class="line"><span class="comment"># 计算数据</span></span><br><span class="line"><span class="comment"># # 用法和barplot相似</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time    smoker</span><br><span class="line">Lunch   Yes       17.399130</span><br><span class="line">        No        17.050889</span><br><span class="line">Dinner  Yes       21.859429</span><br><span class="line">        No        20.095660</span><br><span class="line">Name: total_bill, dtype: float64</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_66_1.png" alt="png"></p><h1 id="线性数据可视化"><a href="#线性数据可视化" class="headerlink" title="线性数据可视化"></a>线性数据可视化</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本用法</span></span><br><span class="line"></span><br><span class="line">tips = sns.load_dataset(<span class="string">"tips"</span>)</span><br><span class="line">print(tips.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, hue = <span class="string">'smoker'</span>,data=tips,palette=<span class="string">"Set1"</span>,</span><br><span class="line">           ci = <span class="number">70</span>,   <span class="comment"># 误差值</span></span><br><span class="line">           size = <span class="number">5</span>,  <span class="comment"># 图表大小</span></span><br><span class="line">           markers = [<span class="string">'+'</span>,<span class="string">'o'</span>],  <span class="comment"># 点样式</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line">0       16.99  1.01  Female     No  Sun  Dinner     2</span><br><span class="line">1       10.34  1.66    Male     No  Sun  Dinner     3</span><br><span class="line">2       21.01  3.50    Male     No  Sun  Dinner     3</span><br><span class="line">3       23.68  3.31    Male     No  Sun  Dinner     2</span><br><span class="line">4       24.59  3.61  Female     No  Sun  Dinner     4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b21c57d7b8&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_68_2.png" alt="png"></p><h2 id="多表格"><a href="#多表格" class="headerlink" title="多表格"></a>多表格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, col=<span class="string">"smoker"</span>, data=tips)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b2215774e0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_70_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多图表1</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"size"</span>, y=<span class="string">"total_bill"</span>, hue=<span class="string">"day"</span>, col=<span class="string">"day"</span>,data=tips, </span><br><span class="line">           aspect=<span class="number">0.6</span>,    <span class="comment"># 长宽比</span></span><br><span class="line">           x_jitter=<span class="number">.30</span>,  <span class="comment"># 给x或者y轴随机增加噪音点</span></span><br><span class="line">           col_wrap=<span class="number">4</span>,    <span class="comment"># 每行的列数</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b2216276a0&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_71_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多图表2</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>, row=<span class="string">"sex"</span>, col=<span class="string">"time"</span>,data=tips, size=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 行为sex字段，列为time字段</span></span><br><span class="line"><span class="comment"># x轴total_bill, y轴tip</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b22160a400&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_72_1.png" alt="png"></p><h2 id="非线性回归"><a href="#非线性回归" class="headerlink" title="非线性回归"></a>非线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非线性回归</span></span><br><span class="line"></span><br><span class="line">sns.lmplot(x=<span class="string">"total_bill"</span>, y=<span class="string">"tip"</span>,data=tips,</span><br><span class="line">           order = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b2214d7b00&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_74_1.png" alt="png"></p><h1 id="其他图表可视化"><a href="#其他图表可视化" class="headerlink" title="其他图表可视化"></a>其他图表可视化</h1><h2 id="时间线图"><a href="#时间线图" class="headerlink" title="时间线图"></a>时间线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  tsplot()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">31</span>)</span><br><span class="line">data = np.sin(x) + np.random.rand(<span class="number">10</span>, <span class="number">31</span>) + np.random.randn(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#print(data.shape)</span></span><br><span class="line"><span class="comment">#print(pd.DataFrame(data).head())</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">sns.tsplot(data=data,</span><br><span class="line">           err_style=<span class="string">"ci_band"</span>,   <span class="comment"># 误差数据风格，可选：ci_band, ci_bars, boot_traces, boot_kde, unit_traces, unit_points</span></span><br><span class="line">           interpolate=<span class="literal">True</span>,      <span class="comment"># 是否连线</span></span><br><span class="line">           ci = [<span class="number">40</span>,<span class="number">70</span>,<span class="number">90</span>],       <span class="comment"># 设置误差区间 </span></span><br><span class="line">           color = <span class="string">'r'</span>            <span class="comment"># 设置颜色</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b21668c860&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_76_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.tsplot(data=data, err_style=<span class="string">"boot_traces"</span>, </span><br><span class="line">           n_boot=<span class="number">300</span>   <span class="comment"># 迭代次数</span></span><br><span class="line">          )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b216533048&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_77_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gammas = sns.load_dataset(<span class="string">"gammas"</span>)</span><br><span class="line">print(gammas.head())</span><br><span class="line">print(<span class="string">'数据量为：%i条'</span> % len(gammas))</span><br><span class="line">print(<span class="string">'timepoint为0.0时的数据量为：%i条'</span> % len(gammas[gammas[<span class="string">'timepoint'</span>] == <span class="number">0</span>]))</span><br><span class="line">print(<span class="string">'timepoint共有%i个唯一值'</span> % len(gammas[<span class="string">'timepoint'</span>].value_counts()))</span><br><span class="line"><span class="comment">#print(gammas['timepoint'].value_counts())  # 查看唯一值具体信息</span></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"></span><br><span class="line">sns.tsplot(time=<span class="string">"timepoint"</span>,     <span class="comment"># 时间数据，x轴</span></span><br><span class="line">           value=<span class="string">"BOLD signal"</span>,  <span class="comment"># y轴value</span></span><br><span class="line">           unit=<span class="string">"subject"</span>,       <span class="comment"># </span></span><br><span class="line">           condition=<span class="string">"ROI"</span>,      <span class="comment"># 分类</span></span><br><span class="line">           data=gammas)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   timepoint  ROI  subject  BOLD signal</span><br><span class="line">0        0.0  IPS        0     0.513433</span><br><span class="line">1        0.0  IPS        1    -0.414368</span><br><span class="line">2        0.0  IPS        2     0.214695</span><br><span class="line">3        0.0  IPS        3     0.814809</span><br><span class="line">4        0.0  IPS        4    -0.894992</span><br><span class="line">数据量为：6000条</span><br><span class="line">timepoint为0.0时的数据量为：60条</span><br><span class="line">timepoint共有100个唯一值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b221f95a58&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_78_2.png" alt="png"></p><h2 id="热图"><a href="#热图" class="headerlink" title="热图"></a>热图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热图 - heatmap()</span></span><br><span class="line"><span class="comment"># 简单示例</span></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># 创建数据 - 10*12图表</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(df,    <span class="comment"># 加载数据</span></span><br><span class="line">            vmin=<span class="number">0</span>, vmax=<span class="number">1</span>   <span class="comment"># 设置图例最大最小值</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b221faac88&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_80_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># heatmap()</span></span><br><span class="line"><span class="comment"># 参数设置</span></span><br><span class="line"></span><br><span class="line">flights = sns.load_dataset(<span class="string">"flights"</span>)</span><br><span class="line">flights = flights.pivot(<span class="string">"month"</span>, <span class="string">"year"</span>, <span class="string">"passengers"</span>) </span><br><span class="line"><span class="comment">#print(flights.head())</span></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">           </span><br><span class="line">sns.heatmap(flights,</span><br><span class="line">            annot = <span class="literal">True</span>,      <span class="comment"># 是否显示数值</span></span><br><span class="line">            fmt = <span class="string">'d'</span>,         <span class="comment"># 格式化字符串</span></span><br><span class="line">            linewidths = <span class="number">0.2</span>,  <span class="comment"># 格子边线宽度</span></span><br><span class="line">            <span class="comment">#center = 100,      # 调色盘的色彩中心值，若没有指定，则以cmap为主</span></span><br><span class="line">            <span class="comment">#cmap = 'Reds',     # 设置调色盘</span></span><br><span class="line">            cbar = <span class="literal">True</span>,       <span class="comment"># 是否显示图例色带</span></span><br><span class="line">            <span class="comment">#cbar_kws=&#123;"orientation": "horizontal"&#125;,   # 是否横向显示图例色带</span></span><br><span class="line">            <span class="comment">#square = True,     # 是否正方形显示图表</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b223040588&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_81_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  heatmap()</span></span><br><span class="line"><span class="comment"># 绘制半边热图</span></span><br><span class="line"></span><br><span class="line">sns.set(style=<span class="string">"white"</span>)</span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line"></span><br><span class="line">rs = np.random.RandomState(<span class="number">33</span>)</span><br><span class="line">d = pd.DataFrame(rs.normal(size=(<span class="number">100</span>, <span class="number">26</span>)))</span><br><span class="line">corr = d.corr()   <span class="comment"># 求解相关性矩阵表格</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line"></span><br><span class="line">mask = np.zeros_like(corr, dtype=np.bool)</span><br><span class="line">mask[np.triu_indices_from(mask)] = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置一个“上三角形”蒙版</span></span><br><span class="line"></span><br><span class="line">cmap = sns.diverging_palette(<span class="number">220</span>, <span class="number">10</span>, as_cmap=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 设置调色盘</span></span><br><span class="line"></span><br><span class="line">sns.heatmap(corr, mask=mask, cmap=cmap, vmax=<span class="number">.3</span>, center=<span class="number">0</span>,</span><br><span class="line">            square=<span class="literal">True</span>, linewidths=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 生成半边热图</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;matplotlib.axes._subplots.AxesSubplot at 0x1b2231f3128&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_82_1.png" alt="png"></p><h2 id="图标矩阵"><a href="#图标矩阵" class="headerlink" title="图标矩阵"></a>图标矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">attend = sns.load_dataset(<span class="string">"attention"</span>)</span><br><span class="line">print(attend.head())</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"></span><br><span class="line">g = sns.FacetGrid(attend, col=<span class="string">"subject"</span>, col_wrap=<span class="number">5</span>,   <span class="comment"># 设置每行的图表数量</span></span><br><span class="line">                  size=<span class="number">1.5</span>)</span><br><span class="line">g.map(plt.plot, <span class="string">"solutions"</span>, <span class="string">"score"</span>, </span><br><span class="line">      marker=<span class="string">"o"</span>,color = <span class="string">'gray'</span>,linewidth = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制图表矩阵</span></span><br><span class="line"></span><br><span class="line">g.set(xlim = (<span class="number">0</span>,<span class="number">4</span>),</span><br><span class="line">      ylim = (<span class="number">0</span>,<span class="number">10</span>),</span><br><span class="line">      xticks = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">      yticks = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">      )</span><br><span class="line"><span class="comment"># 设置x，y轴刻度</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   Unnamed: 0  subject attention  solutions  score</span><br><span class="line">0           0        1   divided          1    2.0</span><br><span class="line">1           1        2   divided          1    3.0</span><br><span class="line">2           2        3   divided          1    3.0</span><br><span class="line">3           3        4   divided          1    5.0</span><br><span class="line">4           4        5   divided          1    4.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;seaborn.axisgrid.FacetGrid at 0x1b22328cb00&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/Seaborn%E9%A3%8E%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96/output_84_2.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Seaborn风格可视化&quot;&gt;&lt;a href=&quot;#Seaborn风格可视化&quot; class=&quot;headerlink&quot; title=&quot;Seaborn风格可视化&quot;&gt;&lt;/a&gt;Seaborn风格可视化&lt;/h1&gt;&lt;h2 id=&quot;什么事seaborn&quot;&gt;&lt;a href=&quot;#什么事seaborn&quot; class=&quot;headerlink&quot; title=&quot;什么事seaborn&quot;&gt;&lt;/a&gt;什么事seaborn&lt;/h2&gt;&lt;p&gt;​       Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
      <category term="可视化" scheme="http://yoursite.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Seaborn" scheme="http://yoursite.com/tags/Seaborn/"/>
    
  </entry>
  
  <entry>
    <title>PCA主成分分析</title>
    <link href="http://yoursite.com/2019/09/26/PCA%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/09/26/PCA主成分分析/</id>
    <published>2019-09-26T14:19:48.000Z</published>
    <updated>2019-10-05T02:40:10.571Z</updated>
    
    <content type="html"><![CDATA[<script type="math/tex; mode=display">S_B=(u_1-u_2)(u_1-u_2)^T</script><script type="math/tex; mode=display">S_w^{-1}(u_1-u_2)(u_1-u_2)^Tw=\lambda W</script><p>因为$(u_1-u_2)^Tw$是一个标量，所以可以看出</p><script type="math/tex; mode=display">W\propto S_W^{-1}(u_1-u_2)</script><p>需要注意的是$S_W$在大多数情况下是不可逆的，所以为了解决这个问题，通常有两种方法</p><a id="more"></a><ul><li>令$S_W=S_W+\gamma I$，其中$I$是一个特别小的数，这样$S_W$一定可逆</li><li>先使用PCA对数据局进行降维，使得降维后的数据的$S_W$一定可逆</li></ul><script type="math/tex; mode=display">S_w=\sum_{i=1}^C S_{wi}</script><script type="math/tex; mode=display">S_{wi}=\sum_{x\in{y_i}}(x-\mu_i)(x-\mu_i)^T</script><script type="math/tex; mode=display">S_B=\sum_{i=1}^C\frac{N_i}{N}(\mu_i-\mu)(\mu_i-\mu)^T</script><p>其中$\mu$表示所有的特征值得均值</p><script type="math/tex; mode=display">\mu=\frac{1}{N}\sum_{\forall x\in y_i}x</script><p>而$\mu_i$求的是每一个分类的均值，在而分类中$S_B$表示的是类间的差值，但是在多分类中肯定无法这样计算，所以分类中计算的是每个分类中心点到所以分类中心点的方差。C表示的是分类数。</p><p>最后得到的结果和原来还是一样</p><script type="math/tex; mode=display">S_w^{-1}S_Bw_i=\lambda w_i</script><p>所以总结下来LDA的计算流程为</p><ol><li>计算每个分类的特征中心值$\mu$</li><li>计算每个分类的类内方差$S_W$</li><li>计算每个分类的类间方差$S_B$</li><li>计算评价函数$J(w)=\frac{wS_Bw^t}{wS_ww^t}$</li><li>利用拉格朗日得到最后的结果</li></ol><p>LDA用于降维，和PCA有很多相同，也有很多不同的地方，因此值得好好的比较一下两者的降维异同点。</p><p>　　　　首先我们看看相同点：</p><p>　　　　1）两者均可以对数据进行降维。</p><p>　　　　2）两者在降维时均使用了矩阵特征分解的思想。</p><p>　　　　3）两者都假设数据符合高斯分布。</p><p>　　　　我们接着看看不同点：</p><p>　　　　1）LDA是有监督的降维方法，而PCA是无监督的降维方法</p><p>　　　　2）LDA降维最多降到类别数k-1的维数，而PCA没有这个限制。，所以</p><p>　　　　3）LDA除了可以用于降维，还可以用于分类。</p><p>　　　　4）LDA选择分类性能最好的投影方向，而PCA选择样本点投影具有最大方差的方向。</p><p>　　　　这点可以从下图形象的看出，在某些数据分布下LDA比PCA降维较优。</p><p>感觉使用latex写公式真的爽的一笔啊</p><script type="math/tex; mode=display">f(x)=\frac{1}{x}+3y+7z</script>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;math/tex; mode=display&quot;&gt;
S_B=(u_1-u_2)(u_1-u_2)^T&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
S_w^{-1}(u_1-u_2)(u_1-u_2)^Tw=\lambda W&lt;/script&gt;&lt;p&gt;因为$(u_1-u_2)^Tw$是一个标量，所以可以看出&lt;/p&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
W\propto S_W^{-1}(u_1-u_2)&lt;/script&gt;&lt;p&gt;需要注意的是$S_W$在大多数情况下是不可逆的，所以为了解决这个问题，通常有两种方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="特征工程" scheme="http://yoursite.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="特征降维" scheme="http://yoursite.com/tags/%E7%89%B9%E5%BE%81%E9%99%8D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘比赛技巧</title>
    <link href="http://yoursite.com/2019/09/21/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/21/数据挖掘比赛技巧总结/</id>
    <published>2019-09-21T03:29:58.000Z</published>
    <updated>2020-03-08T11:11:32.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><ul><li><p>缺失值填充</p><ul><li>特征为连续值，且为正态分布，使用均值填充，保持期望不变</li><li>特征值为连续值，且为长尾分布，使用中值填充，避免异常点影响</li><li>特征为离散值，使用众数填充</li><li>使用模型预测完善用户画像</li></ul></li><li><p>特征转换</p><ul><li>对长尾分布的特征，做对数变换</li><li>标准化、归一化</li><li><p>连续值特征离散化</p><p> 基于LR、SVM、DNN等对特征的分布和尺度敏感的，归一化有助于模型收敛，基于树模型，具有伸缩不变形，不需要做特征变换</p></li></ul></li><li><p>ID类特征处理</p><ul><li>OneHot编码，例如性别，编码为0,1或者1,0</li><li>使用某种特征的统计量代替该特征</li><li>Word Embedding，将高纬稀疏特征映射到低纬稠密特征。</li></ul></li><li><p>异常值剔除</p></li></ul><a id="more"></a><h2 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h2><p>1、对于高维稀疏特征(如ID特征 One hot编码后)，使用线性模型LR、FM(腾讯社交广告大赛)</p><p>2、对于低纬稠密特征，使用集成树模型XgBoost，GDBT，Random Forest(o2o优惠券核销预测)</p><p>3、对于图像语音类数据，使用DNN，如CNN，LSTM</p><p>数据挖掘比赛中集成树模型占优势的原因：</p><ul><li><p>比赛数据特点</p><ul><li>结构化标单数据</li><li>混合类型(类别型，连续型)</li><li>大量缺失值</li><li>含有离群点</li><li>长尾分布</li></ul></li><li><p>树算法模型法特点</p><ul><li>善于处理混合类型特征</li><li>善于处理缺失值</li><li>伸缩不变性</li><li>对离群点有鲁棒性</li><li>容易并行化、有高效开源工具</li></ul><h2 id="模型融合"><a href="#模型融合" class="headerlink" title="模型融合"></a>模型融合</h2><p>Average、Voting、Stacking，Blending</p><p>Stacking工具mlxtend</p></li></ul><h2 id="调参经验和技巧"><a href="#调参经验和技巧" class="headerlink" title="调参经验和技巧"></a>调参经验和技巧</h2><p>  树模型调参经验</p><p>  GridSearchCV</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;特征工程&quot;&gt;&lt;a href=&quot;#特征工程&quot; class=&quot;headerlink&quot; title=&quot;特征工程&quot;&gt;&lt;/a&gt;特征工程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缺失值填充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特征为连续值，且为正态分布，使用均值填充，保持期望不变&lt;/li&gt;
&lt;li&gt;特征值为连续值，且为长尾分布，使用中值填充，避免异常点影响&lt;/li&gt;
&lt;li&gt;特征为离散值，使用众数填充&lt;/li&gt;
&lt;li&gt;使用模型预测完善用户画像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特征转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对长尾分布的特征，做对数变换&lt;/li&gt;
&lt;li&gt;标准化、归一化&lt;/li&gt;
&lt;li&gt;&lt;p&gt;连续值特征离散化&lt;/p&gt;
&lt;p&gt; 基于LR、SVM、DNN等对特征的分布和尺度敏感的，归一化有助于模型收敛，基于树模型，具有伸缩不变形，不需要做特征变换&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ID类特征处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OneHot编码，例如性别，编码为0,1或者1,0&lt;/li&gt;
&lt;li&gt;使用某种特征的统计量代替该特征&lt;/li&gt;
&lt;li&gt;Word Embedding，将高纬稀疏特征映射到低纬稠密特征。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异常值剔除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据降维" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E9%99%8D%E7%BB%B4/"/>
    
      <category term="特征工程" scheme="http://yoursite.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hive的基本操作</title>
    <link href="http://yoursite.com/2019/09/17/hive%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/09/17/hive的基本操作/</id>
    <published>2019-09-17T13:57:11.000Z</published>
    <updated>2019-10-01T15:05:15.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表的增删改查操作"><a href="#表的增删改查操作" class="headerlink" title="表的增删改查操作"></a>表的增删改查操作</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>使用if not exists 如果存在则跳过，comment为注释。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> mydb.employees(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'Employee name'</span>,</span><br><span class="line">salary <span class="built_in">float</span> <span class="keyword">comment</span> <span class="string">'Employee salary'</span>,</span><br><span class="line">subordinates <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt; <span class="keyword">comment</span> <span class="string">'Names of subordinates'</span>,</span><br><span class="line">deduction <span class="keyword">map</span>&lt;<span class="keyword">string</span>, <span class="built_in">float</span>&gt;,</span><br><span class="line">address <span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>, state:<span class="keyword">string</span>, zip:<span class="built_in">int</span>&gt; <span class="keyword">comment</span> <span class="string">'Home address'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">comment</span> <span class="string">'descriptions of table'</span></span><br><span class="line">location <span class="string">'/user/hive/warehouse/mydb.db/employees'</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="描述表"><a href="#描述表" class="headerlink" title="描述表"></a>描述表</h2><p>显示表的字段和结构，使用desc/describe </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--显示表的字段和数据类型</span></span><br><span class="line">desc table_name;</span><br><span class="line"><span class="comment">--显示对应字段的数据类型</span></span><br><span class="line">desc table_name.columns</span><br></pre></td></tr></table></figure><h2 id="管理表和外部表"><a href="#管理表和外部表" class="headerlink" title="管理表和外部表"></a>管理表和外部表</h2><p><strong>管理表</strong>是hive创建的表，由hive控制其生命周期，hive默认情况下会将数据存在在配置文件指定的目录当中，由hive.metastore.warehouse.dir指定。当使用hive删除表的时候，对应的数据也会被删除，即hdfs文件系统中的数据也会被删除。管理表的缺点在于无法共享数据，比如利用pig等工具创建的数据，hive对其没有权限。当使用hive查询这些数据的时候就可以使用一个外部表指向这份数据，而不需要对其的权限。外部表需要使用external修饰。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> stocks(</span><br><span class="line"><span class="keyword">exchange</span><span class="keyword">string</span>,</span><br><span class="line">symbol<span class="keyword">string</span>,</span><br><span class="line">ymd<span class="keyword">string</span>,</span><br><span class="line">price__open<span class="keyword">string</span>,</span><br><span class="line">price__high<span class="keyword">string</span>,</span><br><span class="line">price__low<span class="keyword">string</span>,</span><br><span class="line">price__close<span class="built_in">float</span>,</span><br><span class="line">volume<span class="built_in">int</span>,</span><br><span class="line">price_adj_close<span class="built_in">float</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="string">'分隔符为,'</span></span><br><span class="line">location <span class="string">'data/stocks'</span>;</span><br></pre></td></tr></table></figure><p>加上external字段值后，删除表并不会删除这份数据，不过描述标的元数据信息会被删除。元数据可以理解为对该表的描述信息，而不是表内数据。</p><p>需要注意的是如果语句省略了external关键字同事源表是外部表，那么新表也是外部表，如果源表是管理表，新表也是管理表。在加上external之后，无论源表是管理表还是外部表，新表都是外部表。</p><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>在建表过程中，会根据分区字段创建对应目录，优点在于分层存储，可以加快查询速度，而缺点在于一些数据存在于文件目录下，但是hive只能从表中读取数据，因此会造成资源浪费。分区表创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees(</span><br><span class="line"><span class="keyword">name</span><span class="keyword">string</span>,</span><br><span class="line">salary<span class="built_in">float</span>,</span><br><span class="line">subordinates<span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">deduction<span class="keyword">map</span>&lt;<span class="keyword">string</span>,<span class="built_in">float</span>&gt;,</span><br><span class="line">address<span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>, city:<span class="keyword">string</span>, state:<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (country <span class="keyword">string</span>, state <span class="keyword">string</span>);</span><br></pre></td></tr></table></figure><p>在建表的时候hive在hdfs上的目录为…/employees/country/state</p><p>查看表中存在所有分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> employees;</span><br></pre></td></tr></table></figure><p>查询指定分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> employees <span class="keyword">partition</span>(country=<span class="string">'CHINA'</span>)</span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> table_name;</span><br></pre></td></tr></table></figure><p>对于管理表，表的元数据和表内数据都会被删除。</p><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="表的重命名"><a href="#表的重命名" class="headerlink" title="　表的重命名"></a>　表的重命名</h3><p>将表从ａ重命名为ｂ</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> a <span class="keyword">rename</span> <span class="keyword">to</span> b;</span><br></pre></td></tr></table></figure><h3 id="增加表分区"><a href="#增加表分区" class="headerlink" title="增加表分区"></a>增加表分区</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">add</span> partiion</span><br><span class="line"><span class="comment">--在一个查询语句中增加多个分区</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> </span><br><span class="line"><span class="keyword">partition</span>(...) location <span class="string">'/user/hive/warehouse/a'</span></span><br><span class="line"><span class="keyword">partition</span>(...) location <span class="string">'/user/hive/warehouse/b'</span></span><br><span class="line"><span class="keyword">partition</span>(...) location <span class="string">'/user/hive/warehouse/c'</span></span><br></pre></td></tr></table></figure><h3 id="修改列的信息"><a href="#修改列的信息" class="headerlink" title="修改列的信息"></a>修改列的信息</h3><p>将列名从a改到b，并且将其移到serverity字段后面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">change</span> </span><br><span class="line"><span class="keyword">column</span> a b type_name <span class="string">'修改列的数据类型'</span></span><br><span class="line"><span class="keyword">comment</span> <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">after</span> serverity</span><br></pre></td></tr></table></figure><h3 id="增加新的列"><a href="#增加新的列" class="headerlink" title="增加新的列"></a>增加新的列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">column</span>(</span><br><span class="line">    app_name <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'Application name'</span>,</span><br><span class="line">    session_id <span class="keyword">long</span> <span class="keyword">comment</span> <span class="string">'the current session id'</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="删除或替换列"><a href="#删除或替换列" class="headerlink" title="删除或替换列"></a>删除或替换列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  table_name <span class="keyword">replace</span> <span class="keyword">columns</span>（</span><br><span class="line">hour_mins_secs <span class="built_in">INT</span> <span class="keyword">comment</span> <span class="string">'xxx'</span></span><br><span class="line">severity <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'xxx'</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>将之前的列都删除，只留下replace的列</p><h3 id="修改表的属性"><a href="#修改表的属性" class="headerlink" title="修改表的属性"></a>修改表的属性</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">set</span> tblproperties(<span class="string">'notes'</span>=<span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure><h3 id="修改表的存储属性"><a href="#修改表的存储属性" class="headerlink" title="修改表的存储属性"></a>修改表的存储属性</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">partition</span>(a=xxx,b=xxx,c=xxx) <span class="keyword">set</span> fileformat sequencefile;</span><br></pre></td></tr></table></figure><p>指定对应的分区中的表，并且重新设置其格式。</p><h1 id="加载和导出数据"><a href="#加载和导出数据" class="headerlink" title="加载和导出数据"></a>加载和导出数据</h1><h2 id="从本地加载数据"><a href="#从本地加载数据" class="headerlink" title="从本地加载数据"></a>从本地加载数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/home/hadopp/data.txt'</span></span><br><span class="line">overwrite <span class="keyword">into</span> <span class="keyword">table</span> employees</span><br><span class="line"><span class="keyword">partition</span>(country=<span class="string">'US'</span>,state=<span class="string">'CA'</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是创建分区表的时候使用的是partition by。如果目录不存在，hive会先创建分区目录。</p><h2 id="通过查询语句加载数据"><a href="#通过查询语句加载数据" class="headerlink" title="通过查询语句加载数据"></a>通过查询语句加载数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> employees</span><br><span class="line"><span class="keyword">partition</span>(country=<span class="string">'US'</span>,state=<span class="string">'CA'</span>)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> xxx=xxx;</span><br></pre></td></tr></table></figure><h2 id="通过查询语句建表"><a href="#通过查询语句建表" class="headerlink" title="通过查询语句建表"></a>通过查询语句建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> table_name <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name_b;</span><br></pre></td></tr></table></figure><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--方法一，谁用hadoop提供的工具</span></span><br><span class="line">hadoop fs -cp source_path target_path</span><br><span class="line"><span class="comment">--方法二</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/home/hadoop/employees'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h1 id="hive的连接操作"><a href="#hive的连接操作" class="headerlink" title="hive的连接操作"></a>hive的连接操作</h1><p>table stu</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1chenli21</span><br><span class="line">2xuzeng22</span><br><span class="line">3xiaodan23</span><br><span class="line">4hua24</span><br></pre></td></tr></table></figure><p>table sub</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1chinese</span><br><span class="line">2english</span><br><span class="line">3science</span><br><span class="line">5nature</span><br></pre></td></tr></table></figure><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>inner join，关键字 join on。仅列出两个表中符合连接条件的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*,b.* <span class="keyword">from</span> stu a <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line"><span class="number">1</span>chenli<span class="number">21</span><span class="number">1</span>chinese</span><br><span class="line"><span class="number">2</span>xuzeng<span class="number">22</span><span class="number">2</span>english</span><br><span class="line"><span class="number">3</span>xiaodan<span class="number">23</span><span class="number">3</span>science</span><br></pre></td></tr></table></figure><p>join后面连接表，而on指定连接条件。</p><h2 id="左连接和右连接"><a href="#左连接和右连接" class="headerlink" title="左连接和右连接"></a>左连接和右连接</h2><p>左连接，显示左边表的所有数据，如果右边表有与之对应的数据则显示，否则显示为NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> stu a <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli211chinese</span><br><span class="line">2xuzeng222english</span><br><span class="line">3xiaodan233science</span><br><span class="line">4hua24NULLNULL</span><br></pre></td></tr></table></figure><p>右连接与左连接相反，使用的关键字为 <strong>right outer  join xxx on xxx</strong>。</p><p>标准查询关键字执行顺序为 from-&gt;where-&gt;group by-&gt;having-&gt;order by。</p><h2 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h2><p>左表和右表都显示，如果没有对应数据，则都显示为NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> stu a <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli211chinese</span><br><span class="line">2xuzeng222english</span><br><span class="line">3xiaodan233science</span><br><span class="line">4hua24NULLNULL</span><br><span class="line">NULLNULLNULL5nature</span><br></pre></td></tr></table></figure><h2 id="左半开连接"><a href="#左半开连接" class="headerlink" title="左半开连接"></a>左半开连接</h2><p>左半开连接。left semi join，语法与左连接不一样，只能选择出左边表的数据，此数据符合on后面的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* <span class="keyword">from</span> stu a <span class="keyword">left</span> <span class="keyword">semi</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli21</span><br><span class="line">2xuzeng22</span><br><span class="line">3xiaodan23</span><br><span class="line"><span class="comment">--下列语句会报错</span></span><br><span class="line"><span class="keyword">select</span> a.*,b.* <span class="keyword">from</span> stu a <span class="keyword">left</span> <span class="keyword">semi</span> <span class="keyword">join</span> sub b <span class="keyword">on</span> a.id=b.id;</span><br></pre></td></tr></table></figure><h2 id="笛卡尔连接"><a href="#笛卡尔连接" class="headerlink" title="笛卡尔连接"></a>笛卡尔连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*,b.* <span class="keyword">from</span> cl_student a <span class="keyword">join</span> cl_stu_sub b;</span><br><span class="line"><span class="comment">--结果</span></span><br><span class="line">1chenli211chinese</span><br><span class="line">1chenli212english</span><br><span class="line">1chenli213science</span><br><span class="line">1chenli215nature</span><br><span class="line">2xuzeng221chinese</span><br><span class="line">2xuzeng222english</span><br><span class="line">2xuzeng223science</span><br><span class="line">2xuzeng225nature</span><br><span class="line">3xiaodan231chinese</span><br><span class="line">3xiaodan232english</span><br><span class="line">3xiaodan233science</span><br><span class="line">3xiaodan235nature</span><br><span class="line">4hua241chinese</span><br><span class="line">4hua242english</span><br><span class="line">4hua243science</span><br><span class="line">4hua245nature</span><br></pre></td></tr></table></figure><p>花了几天的时间整理了hive的用法，终于不用在对着SQL摸瞎了，加油吧进击的SQL boy！ 日常福利(●´∀｀●)</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/alisi.jpg" alt="爱丽丝"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;表的增删改查操作&quot;&gt;&lt;a href=&quot;#表的增删改查操作&quot; class=&quot;headerlink&quot; title=&quot;表的增删改查操作&quot;&gt;&lt;/a&gt;表的增删改查操作&lt;/h1&gt;&lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;p&gt;使用if not exists 如果存在则跳过，comment为注释。&lt;/p&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exists&lt;/span&gt; mydb.employees(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Employee name&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	salary &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Employee salary&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subordinates &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Names of subordinates&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	deduction &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt;&amp;gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	address &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;lt;street:&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, city:&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, state:&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, zip:&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Home address&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;descriptions of table&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location &lt;span class=&quot;string&quot;&gt;&#39;/user/hive/warehouse/mydb.db/employees&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive编程" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hive" scheme="http://yoursite.com/tags/Hive/"/>
    
      <category term="基本操作" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>hive数据类型</title>
    <link href="http://yoursite.com/2019/09/08/hive%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/09/08/hive数据类型/</id>
    <published>2019-09-08T08:40:03.000Z</published>
    <updated>2019-09-08T16:04:42.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本文件数据编码"><a href="#文本文件数据编码" class="headerlink" title="文本文件数据编码"></a>文本文件数据编码</h2><ul><li>TSV：tab separated values；即“制表符分隔值”，用制表符分隔数据</li><li>CSV： comma separated values；即“逗号分隔值”，用逗号分隔数据</li></ul><p>两种文件存在的缺点在于文件中可能存在不需要作为分隔符的逗号或者制表符存在，所有hive有专门的分隔符。</p><p>hive记录中默认的分隔符</p><a id="more"></a><div class="table-container"><table><thead><tr><th style="text-align:center">分隔符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td style="text-align:center">对于文本文件来说每一行都是记录，可以使用换行符作为分隔符</td></tr><tr><td style="text-align:center">^A(ctrl+A)</td><td style="text-align:center">用于分隔字段(列)，在CREATE TABLE 语句中可以使用八进制编码\001表示，键盘上打不出来。</td></tr><tr><td style="text-align:center">^B</td><td style="text-align:center">用于分隔array或者struct中的元素，或于用map钟键值对的分隔，在CREATE TABLE中使用\002表示</td></tr><tr><td style="text-align:center">^C</td><td style="text-align:center">用于MAP钟键与值的分隔，用\003表示</td></tr></tbody></table></div><h2 id="读时模式"><a href="#读时模式" class="headerlink" title="读时模式"></a>读时模式</h2><p>传统数据库是<strong>写时模式</strong>，即在写入文件的时候会，会对数据的格式进行校验，如果不符合，将无法写入数据库。</p><p>hive是<strong>读时模式</strong>，在往数据库里写入不会对数据进行校验，但是在读取数据的时候会对数据进行校验，对于不合格的数据，会设置为null。</p><p>hive的优点在于加载(写)数据的时候速度较快，因为不需要对数据进行解析，而传统写时模式则有利于数据的查询。</p><p>好久没有更新博客了，这篇虽然水了点，写得像个笔记，算是开篇吧，福利就上亚丝娜吧!!!</p><p><img src="https://raw.githubusercontent.com/geroge-gao/Images/master/test1.jpg" alt="亚丝娜"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文本文件数据编码&quot;&gt;&lt;a href=&quot;#文本文件数据编码&quot; class=&quot;headerlink&quot; title=&quot;文本文件数据编码&quot;&gt;&lt;/a&gt;文本文件数据编码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TSV：tab separated values；即“制表符分隔值”，用制表符分隔数据&lt;/li&gt;
&lt;li&gt;CSV： comma separated values；即“逗号分隔值”，用逗号分隔数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;两种文件存在的缺点在于文件中可能存在不需要作为分隔符的逗号或者制表符存在，所有hive有专门的分隔符。&lt;/p&gt;&lt;p&gt;hive记录中默认的分隔符&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive编程" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Hive" scheme="http://yoursite.com/tags/Hive/"/>
    
      <category term="编码类型" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
</feed>
